<?php/** * @link      https://github.com/demodyne/demodyne * @copyright Copyright (c) 2015-2017 Demodyne (https://www.demodyne.org) * @license   http://www.gnu.org/licenses/agpl.html GNU Affero General Public License */namespace DGIModule\Form;use DGIModule\Entity\City;use DGIModule\Entity\Country;use DGIModule\Entity\User;use Doctrine\ORM\EntityManager;use Zend\Form\Form;use DoctrineModule\Stdlib\Hydrator\DoctrineObject as DoctrineHydrator;use Zend\InputFilter\InputFilterProviderInterface;use Zend\Mvc\I18n\Translator;class EditUserProfileForm extends Form implements InputFilterProviderInterface{    private $entityManager;    private $translator;    public function __construct(EntityManager $entityManager, Translator $translator, User $user)    {        parent::__construct('user-profile-presentation-form');        $this->entityManager = $entityManager;        $this->translator = $translator;        $this->setAttribute('method', 'post');        $this->setHydrator(new DoctrineHydrator($entityManager,'DGIModule\Entity\User'));        $this->add([            'name' => 'usrFirstname',            'attributes' => [                'type'  => 'text',                'required' => 'required',                'class'=>'form-control text-change',                'id' => 'usrFirstname',                'maxlength' => 50,                'value' => $user->getUsrFirstname()            ],        ]);        $this->add([            'name' => 'usrLastname',            'attributes' => [                'type'  => 'text',                'required' => 'required',                'class'=>'form-control text-change',                'id' => 'usrLastname',                'maxlength' => 50,                'value' =>$user->getUsrLastname()            ],        ]);        $this->add([            'name' => 'usrEmail',            'attributes' => [                'type'  => 'email',                'required' => 'required',                'class'=>'form-control text-change',                'id' => 'usrEmail',                'maxlength' => 60,                'value' =>$user->getUsrEmail()            ],        ]);        $this->add([            'type' => 'DoctrineModule\Form\Element\ObjectSelect',            'name' => 'country',            'value' => $user->getCountry(),            'attributes' => [                'required' => true,                'class'=>'form-control text-change',                'id' => 'country'            ],            'options' => [                'object_manager' => $entityManager,                'target_class' => '\DGIModule\Entity\Country',                'label_generator' => function (Country $country) {                    return $country->getCountryName();                },                'is_method' => true,                'required' => true,                'find_method' => [                    'name' => 'getAllCountries',                    'params' => [                        'criteria' => [],                    ],                ],            ]        ]);        $this->add([            'name' => 'usrPostalcode',            'attributes' => [                'type'  => 'text',                'required' => 'required',                'class'=>'form-control text-change',                'id' => 'usrPostalcode',                'size' => 10,                'value' =>$user->getCity()?$user->getCity()->getCityPostalcode():''            ],        ]);        $this->add([            'type' => 'DoctrineModule\Form\Element\ObjectSelect',            'name' => 'city',            'value' => $user->getCity(),            'attributes' => [                'required' => true,                'class'=>'form-control text-change',                'id' => 'city'            ],            'options' => [                'object_manager' => $entityManager,                'target_class' => '\DGIModule\Entity\City',                'label_generator' => function (City $city) {                    return $city->getCityName();                },                'disable_inarray_validator' => true,                'is_method' => true,                'required' => true,                'find_method' => [                    'name' => 'getCities',                    'params' => [                        'postalcode'=>$user->getCity()?$user->getCity()->getCityPostalcode():'00000',                        'country' => $user->getCountry()                    ],                ],            ]        ]);        $this->add([            'name' => 'usrPhone',            'type'  => 'DGIModule\Form\Element\Phone',            'attributes' => [                'id' => 'phone',                'maxlength' => 12,                'size' => 12,                'class'=>'form-control text-change',                'value' =>($user->getUsrPhone()!=null)?$user->getUsrPhone():''            ]        ]);        $this->add([            'name' => 'usrBirthday',            'type'  => 'Zend\Form\Element\Select',            'options' => [                'value_options' => $this->getBirthyear(),            ],            'attributes' => [                'id' => 'birthyear',                'class'=>'form-control text-change',                'value' =>($user->getUsrBirthday()!=null)?$user->getUsrBirthday():0            ]        ]);        $this->add([            'name' => 'usrGendre',            'type'  => 'Zend\Form\Element\Select',            'options' => [                'value_options' => [                    0 => $this->translator->translate('--- select gender ---', 'DGIModule'),                    1 => $this->translator->translate("Male", 'DGIModule'),                    2 => $this->translator->translate("Female", 'DGIModule')                ],            ],            'attributes' => [                'id' => 'gendre',                'class'=>'form-control text-change',                'value' =>($user->getUsrGendre()!=null)?$user->getUsrGendre():0            ]        ]);        $this->add([            'type' => 'Zend\Form\Element\Textarea',            'name' => 'usrPresentation',            'attributes' => [                'rows' => 3,                'class'=>'form-control text-change',                'id' => 'propSavedDescription',                'value' =>$user->getUsrPresentation()            ],        ]);    }    public function getInputFilterSpecification()    {        return [            'usrFirstname' => [                'required' => true,                'filters' => [                    ['name' => 'StripTags'],                    ['name' => 'StringTrim'],                ],                'validators' => [                    [                        'name' => 'StringLength',                        'options' => [                            'encoding' => 'UTF-8',                            'min' => 2,                            'max' => 100                        ],                    ],                ],            ],            'usrLastname' => [                'required' => true,                'filters' => [                    ['name' => 'StripTags'],                    ['name' => 'StringTrim'],                ],                'validators' => [                    [                        'name' => 'StringLength',                        'options' => [                            'encoding' => 'UTF-8',                            'min' => 2,                            'max' => 100                        ],                    ],                ],            ],            'usrEmail' => [                'required'   => true,                'validators' => [                    [                        'name' => 'EmailAddress'                    ],                    [                        'name'		=> 'DoctrineModule\Validator\NoObjectExists',                        'options' => [                            'object_repository' => $this->entityManager->getRepository('DGIModule\Entity\User'),                            'fields'            => 'usrEmail'                        ],                    ],                ],            ],            'usrPostalcode' => [                'required' => true,                'filters' => [                    ['name' => 'StripTags'],                    ['name' => 'StringTrim'],                ],                'validators' => [                    [                        'name' => 'StringLength',                        'options' => [                            'encoding' => 'UTF-8',                            'min' => 2,                            'max' => 10                        ],                    ],                ],            ],            'usrPhone' => [                'required' => false,                'filters' => [                    ['name' => 'StripTags'],                    ['name' => 'StringTrim'],                ],                'validators' => [                    [                        'name' => 'StringLength',                        'options' => [                            'encoding' => 'UTF-8',                            'min' => 10,                            'max' => 12                        ],                    ],                ],            ],            'usrBirthday' => [                'required' => false            ],            'usrGendre'  => [                'required' => false            ],            'usrPresentation' => [                'required' => false            ]        ];    }    private function getBirthyear() {        $currentYear = (int)date('Y');        $year_list = array();        $year_list[0]= _("select birthyear");        for ($year=$currentYear-15;$year>=$currentYear-100;$year--) {            $year_list[$year]=$year;        }        return $year_list;    }}