<?php/** * @link      https://github.com/demodyne/demodyne * @copyright Copyright (c) 2015-2016 Demodyne (https://www.demodyne.org) * @license   http://www.gnu.org/licenses/agpl.html GNU Affero General Public License */namespace DGIModule\Form;use Zend\Form\Form;use Zend\Stdlib\Hydrator\ClassMethods;use Zend\Authentication\AuthenticationService;class UserProfilePresentationForm extends Form{    public function __construct($serviceLocator = null, $name = null, $options = [])    {        parent::__construct('user-profile-presentation-form');        $this->setAttribute('method', 'post');        $this->setHydrator(new ClassMethods());        $entityManager = $serviceLocator->get('doctrine.entitymanager.orm_default');        $this->setInputFilter(new UserProfilePresentationFilter($serviceLocator));        $this->add(array(            'name' => 'usrFirstname',            'attributes' => array(                'type'  => 'text',                'required' => 'required',                'class'=>'form-control text-change',                'id' => 'usrFirstname',                'maxlength' => 50,            ),            'options' => array(                'label' => 'Firstname:',            ),        ));        $this->add(array(            'name' => 'usrLastname',            'attributes' => array(                'type'  => 'text',                'required' => 'required',                'class'=>'form-control text-change',                'id' => 'usrLastname',                'maxlength' => 50,            ),            'options' => array(                'label' => 'Lastname:',            ),        ));        $this->add(array(            'name' => 'usrEmail',            'attributes' => array(                'type'  => 'email',                'required' => 'required',                'class'=>'form-control text-change',                'id' => 'usrEmail',                'maxlength' => 60,            ),            'options' => array(                'label' => 'E-mail:',            ),        ));        $this->add([            'type' => 'DoctrineModule\Form\Element\ObjectSelect',            'name' => 'country',            'value' => null,            'attributes' => array(                'required' => true,                'class'=>'form-control text-change',                'id' => 'country'            ),            'options' => [                'label' => 'Country: ',                'object_manager' => $entityManager,                'target_class' => '\DGIModule\Entity\Country',                'label_generator' => function ($country) {                    return $country->getCountryName();                },                'is_method' => true,                'required' => true,                'find_method' => array(                    'name' => 'getAllCountries',                    'params' => array(                        'criteria' => array(),                    ),                ),            ]        ]);		$this->add(array(		    'name' => 'usrPostalcode',		    'attributes' => array(		        'type'  => 'text',		        'required' => 'required',		        'class'=>'form-control text-change',		        'id' => 'usrPostalcode',		        'maxlength' => 5,		        'size' => 5,		    ),		    'options' => array(		        'label' => 'Postalcode:',		    ),		));		$authService = $serviceLocator->get('Zend\Authentication\AuthenticationService');		$user = $authService->getIdentity();		$this->add([		    'type' => 'DoctrineModule\Form\Element\ObjectSelect',		    'name' => 'city',		    'value' => $user->getCity(),		    'attributes' => array(		        'required' => true,		        'class'=>'form-control text-change',		        'id' => 'city'		    ),		    'options' => [		        'label' => 'City: ',		        'object_manager' => $entityManager,		        'target_class' => '\DGIModule\Entity\City',		        'label_generator' => function ($city) {		            return $city->getCityName();		        },		        'disable_inarray_validator' => true,		        'is_method' => true,		        'required' => true,		        'find_method' => array(		            'name' => 'getCities',		            'params' => array(		                'postalcode'=>$user->getCity()->getCityPostalcode(),		                'country' => $user->getCountry()		            ),		        ),	        ]        ]);		$this->add(array(		    'name' => 'usrCity',		    'attributes' => array(		        'type'  => 'text',		        'required' => 'required',		        'class'=>'form-control text-change',		        'id' => 'usrCity',		        'maxlength' => 50,		        'size' => 50,		        'readonly' => 'readonly'		    ),		));		$this->add(array(		    'name' => 'usrPhone',		    'type'  => 'DGIModule\Form\Element\Phone',		    'options' => array(		        'label' => 'Phone:',		    ),		    'attributes' => [		        'id' => 'phone',		        'maxlength' => 12,		        'size' => 12,		        'class'=>'form-control text-change',		    ]		));		$this->add(array(		    'name' => 'usrBirthday',		    'type'  => 'Zend\Form\Element\Select',		    'options' => array(		        'label' => 'Birthyear: ',		        'value_options' => $this->getBirthyear(),		    ),		    'attributes' => [		        'id' => 'birthyear',		        'class'=>'form-control text-change',		    ]		));		$this->add(array(		    'name' => 'usrGendre',		    'type'  => 'Zend\Form\Element\Select',		    'options' => array(		        'label' => 'Gendre: ',		        'value_options' => [0 => _('--- select gender ---'), 1 => _("Male"), 2 => _("Female")],		    ),		    'attributes' => [		        'id' => 'gendre',		        'class'=>'form-control text-change',		    ]		));        $this->add(array(            'name' => 'submit',            'attributes' => array(                'type'  => 'submit',                'value' => 'Save',                'id' => 'submitbutton',            ),        ));         $this->add([            'type' => 'Zend\Form\Element\Textarea',            'name' => 'usrPresentation',            'attributes' => array(                'rows' => 3,                'class'=>'form-control text-change',                'id' => 'propSavedDescription'            ),            'options' => [                'label' => 'Description: ',            ]        ]);    }    private function getBirthyear() {        $currentYear = (int)date('Y');        $year_list = array();        $year_list[0]= _("select birthyear");        for ($year=$currentYear-15;$year>=$currentYear-100;$year--) {            $year_list[$year]=$year;        }        return $year_list;    }}