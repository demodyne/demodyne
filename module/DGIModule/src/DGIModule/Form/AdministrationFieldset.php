<?php/** * @link      https://github.com/demodyne/demodyne * @copyright Copyright (c) 2015-2017 Demodyne (https://www.demodyne.org) * @license   http://www.gnu.org/licenses/agpl.html GNU Affero General Public License */namespace DGIModule\Form;use DGIModule\Entity\Administration;use DGIModule\Entity\City;use Doctrine\ORM\EntityManager;use Zend\Form\Fieldset;use Zend\InputFilter\InputFilterProviderInterface;use Zend\Mvc\I18n\Translator;use DoctrineModule\Stdlib\Hydrator\DoctrineObject as DoctrineHydrator;class AdministrationFieldset extends Fieldset implements InputFilterProviderInterface{    private $presentation = false;    public function __construct(EntityManager $entityManager, Translator $translator, $presentation = false)    {        parent::__construct('administration-fieldset');        $this->presentation = $presentation;        $this->setName('admin')            ->setHydrator(new DoctrineHydrator($entityManager,'DGIModule\Entity\Administration'));        $this->setObject(new Administration());        $this->add(array(            'name' => 'adminName',            'attributes' => array(                'required' => 'required',                'class'=>'form-control text-change',            ),        ));        $this->add([            'type' => 'Zend\Form\Element\Textarea',            'name' => 'adminPresentation',            'attributes' => array(                'required' => 'required',                'rows' => 4,                'class'=>'form-control text-change',                'id' => 'adminPresentation'            ),        ]);        if (!$presentation) {            $this->add(array(                'name' => 'adminLevel',                'type' => 'Zend\Form\Element\Select',                'options' => array(                    'value_options' => [                        1 => $translator->translate("City", 'DGIModule'),                        2 => $translator->translate("Region", 'DGIModule'),                        3 => $translator->translate("Country", 'DGIModule'),                    ],                ),                'attributes' => [                    'id' => 'adminLevel',                    'class' => 'form-control text-change',                    'required' => 'required',                ]            ));            $this->add(array(                'name' => 'adminPostalcode',                'attributes' => array(                    'type'  => 'text',                    'class'=>'form-control text-change',                    'id' => 'adminPostalcode',                    'size' => 10,                ),            ));            $this->add(array(                'name' => 'adminRegion',                'type'  => 'Zend\Form\Element\Select',                'options' => array(                    'disable_inarray_validator' => true,                ),                'attributes' => [                    'id' => 'adminRegion',                    'required' => 'required',                    'class'=>'form-control text-change',                ]            ));            $this->add([                'type' => 'DoctrineModule\Form\Element\ObjectSelect',                'name' => 'adminCity',                'attributes' => array(                    'class'=>'form-control text-change',                    'id' => 'adminCity'                ),                'options' => [                    'empty_option' => $translator->translate('Please write a postalcode first!','DGIModule'),                    'disable_inarray_validator' => true,                    'object_manager' => $entityManager,                    'target_class' => '\DGIModule\Entity\City',                    'required' => false,                    'is_method' => true,                    'label_generator' => function (City $city) {                        return $city->getCityName();                    },                    'find_method' => array(                        'name' => 'getCities',                        'params' => array(                            'postalcode'=>null,                            'country' => null                        ),                    ),                ]            ]);        }        $this->add(array(            'name' => 'adminAddress',            'attributes' => array(                'required' => 'required',                'class'=>'form-control text-change',            ),        ));        $this->add(array(            'name' => 'adminWebsite',            'type' => 'Zend\Form\Element\Url',            'attributes' => array(                'required' => 'required',                'class'=>'form-control text-change',                'onblur' => 'checkURLInput(this)',            ),        ));        $this->add(array(            'name' => 'adminFax',            'type'  => 'DGIModule\Form\Element\Phone',            'attributes' => [                'id' => 'fax',                'maxlength' => 12,                'size' => 12,                'class'=>'form-control text-change',            ]        ));    }    /**     * @return array     */    public function getInputFilterSpecification()    {        return array(            'adminName' => array(                'required' => true,                'filters'  => array(                    array('name' => 'StripTags'),                    array('name' => 'StringTrim'),                ),                'validators' => array(                    array(                        'name'    => 'StringLength',                        'options' => array(                            'encoding' => 'UTF-8',                            'min'      => 1,                            'max'      => 100,                        ),                    ),                ),            ),            'adminAddress' => array(                'required' => true,                'filters'  => array(                    array('name' => 'StripTags'),                    array('name' => 'StringTrim'),                ),                'validators' => array(                    array(                        'name'    => 'StringLength',                        'options' => array(                            'encoding' => 'UTF-8',                            'min'      => 1,                            'max'      => 100,                        ),                    ),                ),            ),            'adminPresentation' => array(                'required' => true,                'filters'  => array(                    array('name' => 'StripTags'),                    array('name' => 'StringTrim'),                ),                'validators' => array(                    array(                        'name'    => 'StringLength',                        'options' => array(                            'encoding' => 'UTF-8',                            'min'      => 1,                            'max'      => 1000,                        ),                    ),                ),            ),            'adminWebsite' => array(                'required' => true,                'filters'  => array(                    array('name' => 'StripTags'),                    array('name' => 'StringTrim'),                ),                'validators' => array(                    array(                        'name'    => 'StringLength',                        'options' => array(                            'encoding' => 'UTF-8',                            //'min'      => 0,                            'max'      => 500,                        ),                    ),                ),            ),            'adminPostalcode' => array(                'required' => false,                'filters'  => array(                    array('name' => 'StripTags'),                    array('name' => 'StringTrim'),                ),                'validators' => array(                    array(                        'name'    => 'StringLength',                        'options' => array(                            'encoding' => 'UTF-8',                            //'min'      => 0,                            'max'      => 20,                        ),                    ),                ),            ),            'adminCity' => array(                'required' => false,            ),            'adminFax' => array(                'required' => false,                'filters'  => array(                    array('name' => 'StripTags'),                    array('name' => 'StringTrim'),                ),                'validators' => array(                    array(                        'name'    => 'StringLength',                        'options' => array(                            'encoding' => 'UTF-8',                            'min'      => 10,                            'max'      => 12,                        ),                    ),                ),            ),        );    }}