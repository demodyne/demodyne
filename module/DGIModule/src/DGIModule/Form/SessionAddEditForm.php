<?php/** * @link      https://github.com/demodyne/demodyne * @copyright Copyright (c) 2015-2017 Demodyne (https://www.demodyne.org) * @license   http://www.gnu.org/licenses/agpl.html GNU Affero General Public License */namespace DGIModule\Form;use DGIModule\Entity\City;use Doctrine\ORM\EntityManager;use Zend\Form\Form;use Zend\InputFilter\InputFilterProviderInterface;use DoctrineModule\Stdlib\Hydrator\DoctrineObject as DoctrineHydrator;use DGIModule\Entity\Hydrator\Strategy\DateTimeStrategy;use Zend\Mvc\I18n\Translator;use Zend\Validator\Date;use Zend\Validator\NotEmpty;use Zend\Validator\StringLength;use Zend\Validator\Uri;class SessionAddEditForm extends Form implements InputFilterProviderInterface{    private $entityManager;    private $translator;    public function __construct(EntityManager $entityManager, Translator $translator, City $city)    {        parent::__construct('session-form');        $this->entityManager = $entityManager;        $this->translator = $translator;        $this            ->setAttribute('name', 'session')            ->setAttribute('id', 'session-add-edit-session-form')            ->setOption( 'use_as_base_fieldset', true)            ->setOption( 'use_input_filter_defaults', false)        ;        $this->setAttribute('enctype', 'multipart/form-data');        $this->setAttribute('method', 'post');        $hydrator = new DoctrineHydrator($entityManager,'DGIModule\Entity\Event');        $hydrator->addStrategy('eventStartDate', new DateTimeStrategy());        $this->setHydrator($hydrator);        $this->add(array(            'name' => 'eventName',            'attributes' => array(                'type'  => 'text',                'required' => 'required',                'class'=>'form-control text-change',                'id' => 'eventName',                'maxlength' => 200,                'placeholder'=> $this->translator->translate('Give a title to this session', 'DGIModule'),            ),        ));        $this->add([            'type' => 'Zend\Form\Element\Textarea',            'name' => 'eventDescription',            'attributes' => array(                'rows' => 6,                'class'=>'form-control text-change',                'id' => 'eventDescription',                'style' => 'display:none',            ),        ]);        $this->add(array(            'name' => 'eventLink',//                  'type' => 'Zend\Form\Element\Url',            'attributes' => array(                'type'  => 'text',                'required' => 'required',                'class'=>'form-control text-change',                'id' => 'eventLink',                'maxlength' => 1000,            ),        ));        $this->add(array(            'name' => 'eventDate',            'type'  => 'Zend\Form\Element\Date',            'attributes' => [                'type'  => 'text',                'id' => 'eventDate',                'class'=>'form-control text-change',                'value' => date('Y-m-d'),            ]        ));        $time = strtotime('today midnight');        $startTime = date("H:i", $time);        $times = [$startTime => $startTime];        $timeValue = null;        $now = date("H:i", strtotime('now'));        for ($time = date("H:i", strtotime('+30 minutes', strtotime($startTime)));             $time != $startTime;             $time = date("H:i", strtotime('+30 minutes', strtotime($time)))) {            $times[$time] = $time;            if (strtotime($now) <= strtotime($time) && !$timeValue) {                $timeValue = $time;            }        }        $this->add(array(            'name' => 'eventTime',            'type'  => 'Zend\Form\Element\Select',            'options' => array(                'value_options' => $times,            ),            'attributes' => [                'id' => 'eventTime',                'class'=>'form-control text-change',                'value' => $timeValue            ]        ));        $time = strtotime('today midnight');        $startTime = date("H:i", $time);        $times = [];        $timeValue = '01:00';        for ($time = date("H:i", strtotime('+30 minutes', strtotime($startTime)));            $time != '12:30';            $time = date("H:i", strtotime('+30 minutes', strtotime($time)))) {            $times[$time] = $time;        }        $this->add(array(            'name' => 'eventDuration',            'type'  => 'Zend\Form\Element\Select',            'options' => array(                'value_options' => $times,            ),            'attributes' => [                'id' => 'eventTime',                'class'=>'form-control text-change',                'value' => $timeValue            ]        ));        $this->add(array(            'name' => 'eventLocation',            'attributes' => array(                'type'  => 'text',                'required' => 'required',                'class'=>'form-control text-change',                'id' => 'eventLocation',                'maxlength' => 500,            ),        ));        $this->add(array(            'name' => 'eventPostalcode',            'attributes' => array(                'type'  => 'text',                'required' => 'required',                'class'=>'form-control text-change',                'id' => 'eventPostalcode',                'size' => 10,                'value' => $city->getCityPostalcode(),            ),        ));        $this->add([            'type' => 'DoctrineModule\Form\Element\ObjectSelect',            'name' => 'city',            'attributes' => array(                'required' => true,                'class'=>'form-control text-change',                'id' => 'city',                'value' => $city->getCityId(),            ),            'options' => [                'object_manager' => $entityManager,                'target_class' => '\DGIModule\Entity\City',                'label_generator' => function (City $city) {                    return $city->getCityName();                },                'disable_inarray_validator' => true,                'is_method' => true,                'required' => true,                'find_method' => array(                    'name' => 'getCities',                    'params' => array(                        'postalcode'=>$city?$city->getCityPostalcode():'00000',                        'country' => $city->getCountry()                    ),                ),            ]        ]);    }    /**     * @return array     */    public function getInputFilterSpecification()    {        return [            'eventName' => [                'required' => true,                'filters'  => [                    ['name' => 'StripTags'],                    ['name' => 'StringTrim'],                ],                'validators' => [                    [                        'name'    => 'NotEmpty',                        'options' => [                            'messages' => [NotEmpty::IS_EMPTY  => $this->translator->translate("You must provide a name for the session.", 'DGIModule')]                        ],                    ],                    [                        'name'    => 'StringLength',                        'options' => [                            'encoding' => 'UTF-8',                            'max'      => 200,                            'messages' => [StringLength::TOO_LONG  => $this->translator->translate("The session name is more than %max% characters long", 'DGIModule')]                        ],                    ],                ],            ],            'eventDescription' => [                'required' => true,                'filters' => [                    ['name' => 'StripTags',                        'options' => [                            'allowTags' => ['b','u', 'i', 'br', 'strong', 'blockquote', 'span', 'div', 'p']                        ]],                ],                'validators' => [                    [                        'name'    => 'NotEmpty',                        'options' => [                            'messages' => [NotEmpty::IS_EMPTY  => $this->translator->translate("You must provide a description for the session.", 'DGIModule')]                        ],                    ],                    [                        'name'    => 'StringLength',                        'options' => [                            'encoding' => 'UTF-8',                            'max'      => 5000,                            'messages' => [StringLength::TOO_LONG  => $this->translator->translate("The session description is more than %max% characters long", 'DGIModule')]                        ],                    ],                ],            ],            'eventDate' => [                'required' => true,                'filters'  => [                    ['name' => 'StripTags'],                    ['name' => 'StringTrim'],                ],                'validators' => [                    [                        'name'    => 'NotEmpty',                        'options' => [                            'messages' => [NotEmpty::IS_EMPTY  => $this->translator->translate("You must provide the start date.", 'DGIModule')]                        ],                    ],                    [                        'name'    => 'Date',                        'options' => [                            'messages' => [Date::INVALID_DATE  => $this->translator->translate("The start date does not appear to be a valid date", 'DGIModule')]                        ],                    ],                ],            ],            'eventLocation' => [                'required' => true,                'filters'  => [                    ['name' => 'StripTags'],                    ['name' => 'StringTrim'],                ],                'validators' => [                    [                        'name'    => 'NotEmpty',                        'options' => [                            'messages' => [NotEmpty::IS_EMPTY  => $this->translator->translate("You must provide a location.", 'DGIModule')]                        ],                    ],                    [                        'name'    => 'StringLength',                        'options' => [                            'encoding' => 'UTF-8',                            'max'      => 500,                            'messages' => [StringLength::TOO_LONG  => $this->translator->translate("The location is more than %max% characters long", 'DGIModule')]                        ],                    ],                ],            ],            'eventPostalcode' => [                'required' => true,                'filters' => [                    ['name' => 'StripTags'],                    ['name' => 'StringTrim'],                ],                'validators' => [                    [                        'name' => 'StringLength',                        'options' => [                            'encoding' => 'UTF-8',                            'min' => 2,                            'max' => 10                        ],                    ],                ],            ],            'city' => [                'required' => true,                'validators' => [                    [                        'name'		=> 'DoctrineModule\Validator\ObjectExists',                        'options' => [                            'object_repository' => $this->entityManager->getRepository('DGIModule\Entity\City'),                            'fields'            => 'cityId',                            'messages' => [                                'noObjectFound' => $this->translator->translate('You must select a valid city', 'DGIModule')                            ]                        ],                    ],                ],            ],            'eventLink' => [                'required' => false,                'filters' => [                    ['name' => 'StripTags'],                ],                'validators' => [                    [                        'name' => 'Uri',                        'options' => [                            'allowAbsolute' => true,                            'allowRelative' => false,                            'messages' => [Uri::NOT_URI  => $this->translator->translate("The URL does not appear to be valid (should start with 'http(s)://')", 'DGIModule')]                        ],                    ],                    [                        'name' => 'StringLength',                        'options' => [                            'encoding' => 'UTF-8',                            'max' => 2000,                            'messages' => [StringLength::TOO_LONG  => $this->translator->translate("The URL must be less than %max% characters long", 'DGIModule')]                        ],                    ],                ],            ],        ];    }}