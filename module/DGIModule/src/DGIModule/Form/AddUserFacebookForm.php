<?php/** * @link      https://github.com/demodyne/demodyne * @copyright Copyright (c) 2015-2017 Demodyne (https://www.demodyne.org) * @license   http://www.gnu.org/licenses/agpl.html GNU Affero General Public License */namespace DGIModule\Form;use Doctrine\ORM\EntityManager;use Zend\Form\Form;use Zend\Mvc\I18n\Translator;use Zend\Hydrator\ClassMethods;use Zend\InputFilter\InputFilterProviderInterface;use Zend\Validator\Regex;use Zend\Validator\StringLength;class AddUserFacebookForm extends Form  implements InputFilterProviderInterface{    /** @var EntityManager $entityManager */    private $entityManager;    /** @var Translator $translator */    private $translator;    /**     * AddUserFacebookForm constructor.     * @param EntityManager $entityManager     * @param Translator $translator     */    public function __construct(EntityManager $entityManager, Translator $translator)    {        parent::__construct('add-user-facebook-form');             $this->entityManager = $entityManager;        $this->translator = $translator;                $this->setAttribute('method', 'post');        $this->setHydrator(new ClassMethods());        $this->setAttribute('class', 'form-horizontal');                $this->add(array(            'name' => 'usrName',            'attributes' => array(                'type'  => 'text',                'class'=>'form-control text-change',                'id' => 'username',                'maxlength' => 20,                'required' => 'required',            ),        ));                $this->add(array(            'name' => 'usrEmail',            'attributes' => array(                'type'  => 'email',                'id' => 'email',                'class'=>'form-control text-change',                'maxlength' => 60,                'readonly' => 'readonly'            ),        ));                $this->add(array(            'type' => 'Zend\Form\Element\Csrf',            'name' => 'userCSRF',            'options' => array(                'csrf_options' => array(                    'timeout' => 1200                )            )        ));		    }    public function getInputFilterSpecification()    {        return array(            'usrName' => [    			'required' => true,    			'filters'  => array(    				array('name' => 'StripTags'),    				array('name' => 'StringTrim'),    			),    			'validators' => array(    				array(    					'name'    => 'StringLength',    					'options' => array(    						'encoding' => 'UTF-8',    						'min'      => 5,    						'max'      => 20,    						'messages' => array(    						      StringLength::TOO_LONG  => $this->translator->translate("The username must be between %min% and %max% characters long", 'DGIModule'),    						      StringLength::TOO_SHORT  => $this->translator->translate("The username must be between %min% and %max% characters long", 'DGIModule')    				        )    					),    				),    				array(    				    'name' => 'Regex',    				    'options' => array(    				        'pattern' => '/^[a-zA-Z][a-zA-Z0-9_.-]+$/',    				        'messages' => array(    				            Regex::NOT_MATCH => $this->translator->translate("Invalid username. Usernames must start with a letter. Allowed characters are alphabets (a-z, A-Z), digits (0-9), underscore (_), hyphen (-) , and period (.)", 'DGIModule')    				        )    				    ),    				),    				array(    				    'name'		=> 'DoctrineModule\Validator\NoObjectExists',    				    'options' => array(    				        'object_repository' => $this->entityManager->getRepository('DGIModule\Entity\User'),    				        'fields'            => 'usrName',    				        'messages' => [    				            'objectFound' => $this->translator->translate('This username is already registered to Demodyne', 'DGIModule')    				        ]    				    ),    				),    			),    		],            'usrEmail' => [                'required'   => true,                'validators' => array(                    array(                        'name' => 'EmailAddress'                    ),    				array(    					'name'		=> 'DoctrineModule\Validator\NoObjectExists',    					'options' => array(    						'object_repository' => $this->entityManager->getRepository('DGIModule\Entity\User'),    						'fields'            => 'usrEmail',    					    'messages' => [     					        'objectFound' => $this->translator->translate('This email is already registered to Demodyne', 'DGIModule')    					    ]    					),    				),                ),            ]        );    } }