<?php/** * @link      https://github.com/demodyne/demodyne * @copyright Copyright (c) 2015-2017 Demodyne (https://www.demodyne.org) * @license   http://www.gnu.org/licenses/agpl.html GNU Affero General Public License */namespace DGIModule\Form;use DGIModule\Entity\Country;use Doctrine\ORM\EntityManager;use Zend\Form\Form;use Zend\Captcha\Image as CaptchaImage;use DGIModule\Entity\User;use DoctrineModule\Stdlib\Hydrator\DoctrineObject as DoctrineHydrator;use Zend\Mvc\I18n\Translator;use Zend\Validator\Identical;use Zend\Validator\Regex;use Zend\Validator\StringLength;use Zend\InputFilter\InputFilterProviderInterface;class RegisterAdministrationForm extends Form implements InputFilterProviderInterface{    private $entityManager;    private $translator;    public function __construct(EntityManager $entityManager, Translator $translator)    {        parent::__construct('administration-registration');        $this->entityManager = $entityManager;        $this->translator = $translator;        $this->setAttribute('method', 'post');        $this->setHydrator(new DoctrineHydrator($entityManager,'DGIModule\Entity\User'));        $this->setObject(new User());        $this->setAttribute('class', 'form-horizontal');        $this->add(new AdministrationFieldset($entityManager, $translator, false));        $this->add(array(            'name' => 'usrFirstname',            'attributes' => array(                'type'  => 'text',                'required' => 'required',                'class'=>'form-control text-change',                'id' => 'firstname',                'maxlength' => 50,                'size' => 50,            ),        ));        $this->add(array(            'name' => 'usrLastname',            'attributes' => array(                'type'  => 'text',                'required' => 'required',                'class'=>'form-control text-change',                'id' => 'lastname',                'maxlength' => 50,                'size' => 50,            ),        ));        $this->add(array(            'name' => 'usrName',            'attributes' => array(                'type'  => 'text',                'class'=>'form-control text-change',                'id' => 'username',                'maxlength' => 20,                'required' => 'required',            ),        ));        $this->add(array(            'name' => 'usrEmail',            'attributes' => array(                'type'  => 'email',                'id' => 'email',                'class'=>'form-control text-change',                'maxlength' => 50,                'size' => 50,                'required' => 'required',            ),        ));        $this->add(array(            'name' => 'usrPassword',            'attributes' => array(                'type'  => 'password',                'id' => 'password',                'class'=>'form-control text-change',                'maxlength' => 12,                'size' => 50,                'required' => 'required',            ),        ));        $this->add(array(            'name' => 'usrPasswordConfirm',            'attributes' => array(                'type'  => 'password',                'id' => 'password2',                'class'=>'form-control text-change',                'maxlength' => 12,                'size' => 50,                'required' => 'required',            ),        ));        $this->add([            'type' => 'DoctrineModule\Form\Element\ObjectSelect',            'name' => 'country',            'value' => 73,            'attributes' => array(                'required' => true,                'class'=>'form-control text-change',                'id' => 'country'            ),            'options' => [                'label' => 'Country: ',                'object_manager' => $entityManager,                'target_class' => '\DGIModule\Entity\Country',                'label_generator' => function (Country $country) {                    return $country->getCountryName();                },                'is_method' => true,                'required' => false,                'find_method' => array(                    'name' => 'getAllCountries',                    'params' => array(                        'criteria' => array(),                    ),                ),            ]        ]);        $this->add(array(            'name' => 'usrPostalcode',            'attributes' => array(                'type'  => 'text',                'required' => 'required',                'class'=>'form-control text-change',                'id' => 'usrPostalcode',                'size' => 10,            ),        ));        $this->add(array(            'name' => 'city',            'type'  => 'Zend\Form\Element\Select',            'options' => array(                'empty_option' => '--- please write your postalcode first ---',                'disable_inarray_validator' => true,            ),            'attributes' => [                'id' => 'city',                'required' => 'required',                'class'=>'form-control text-change',            ]        ));        $this->add(array(            'name' => 'usrPhone',            'type'  => 'DGIModule\Form\Element\Phone',            'attributes' => [                'id' => 'phone',                'maxlength' => 12,                'size' => 12,                'class'=>'form-control text-change',            ]        ));        $captchaImage = new CaptchaImage(  array(                'font' => '/data/fonts/arialnb.ttf',                'width' => 250,                'height' => 100,                'dotNoiseLevel' => 40,                'lineNoiseLevel' => 3)        );        $captchaImage->setWordLen(4);        $captchaImage->setImgDir('./public/img/captcha');        $captchaImage->setImgUrl('/captcha');        $this->add(array(            'type' => 'Zend\Form\Element\Captcha',            'name' => 'captcha',            'options' => array(                'captcha' => $captchaImage            ),            'attributes' => [                'id' => 'captcha',                'class'=>'form-control text-change',            ]        ));        $this->add(array(            'type' => 'Zend\Form\Element\Csrf',            'name' => 'userCSRF',            'options' => array(                'csrf_options' => array(                    'timeout' => 1200                )            )        ));    }    public function getInputFilterSpecification()    {        return array(            'usrName'=> [                'required' => true,                'filters'  => array(                    array('name' => 'StripTags'),                    array('name' => 'StringTrim'),                ),                'validators' => array(                    array(                        'name'    => 'StringLength',                        'options' => array(                            'encoding' => 'UTF-8',                            'min'      => 5,                            'max'      => 20,                            'messages' => array(                                StringLength::TOO_LONG  => $this->translator->translate("The username must be between %min% and %max% characters long", 'DGIModule'),                                StringLength::TOO_SHORT  => $this->translator->translate("The username must be between %min% and %max% characters long", 'DGIModule')                            )                        ),                    ),                    array(                        'name' => 'Regex',                        'options' => array(                            'pattern' => '/^[a-zA-Z][a-zA-Z0-9_.-]+$/',                            'messages' => array(                                Regex::NOT_MATCH => $this->translator->translate("Invalid username. Usernames must start with a letter. Allowed characters are alphabets (a-z, A-Z), digits (0-9), underscore (_), hyphen (-) , and period (.)", 'DGIModule')                            )                        ),                    ),                    array(                        'name'		=> 'DoctrineModule\Validator\NoObjectExists',                        'options' => array(                            'object_repository' => $this->entityManager->getRepository('DGIModule\Entity\User'),                            'fields'            => 'usrName',                            'messages' => [                                'objectFound' => $this->translator->translate('This username is already registered to Demodyne', 'DGIModule')                            ]                        ),                    ),                ),            ],            'usrEmail' => [                'required'   => true,                'validators' => array(                    array(                        'name' => 'EmailAddress'                    ),                    array(                        'name'		=> 'DoctrineModule\Validator\NoObjectExists',                        'options' => array(                            'object_repository' => $this->entityManager->getRepository('DGIModule\Entity\User'),                            'fields'            => 'usrEmail',                            'messages' => [                                'objectFound' => $this->translator->translate('This email is already registered to Demodyne', 'DGIModule')                            ]                        ),                    ),                ),            ],            'usrPassword' => [                'required' => true,                'validators' => array(                    array(                        'name'    => 'StringLength',                        'options' => array(                            'encoding' => 'UTF-8',                            'min'      => 6,                            'max'      => 12,                            'messages' => array(                                StringLength::TOO_LONG  => $this->translator->translate("The password must be between %min% and %max% characters long", 'DGIModule'),                                StringLength::TOO_SHORT  => $this->translator->translate("The password must be between %min% and %max% characters long", 'DGIModule')                            )                        ),                    ),                ),            ],            'usrPasswordConfirm'=> [                'required' => true,                'validators' => array(                    array(                        'name'    => 'Identical',                        'options' => array(                            'token' => 'usrPassword',                            'messages' => array(                                Identical::NOT_SAME  => $this->translator->translate("The two given passwords do not match", 'DGIModule'),                            )                        ),                    ),                ),            ],        );    }}