<?php/** * @link      https://github.com/demodyne/demodyne * @copyright Copyright (c) 2015-2017 Demodyne (https://www.demodyne.org) * @license   http://www.gnu.org/licenses/agpl.html GNU Affero General Public License */namespace DGIModule\Form;use DGIModule\Entity\City;use Doctrine\ORM\EntityManager;use Zend\Form\Form;use Zend\Mvc\I18n\Translator;use Zend\InputFilter\InputFilterProviderInterface;use Zend\Captcha\Image as CaptchaImage;use Zend\Validator\Identical;use Zend\Validator\Regex;use Zend\Validator\StringLength;use DoctrineModule\Stdlib\Hydrator\DoctrineObject as DoctrineHydrator;class ReferendumPartoutRegisterForm extends Form implements InputFilterProviderInterface{    /** @var EntityManager $entityManager */    private $entityManager;    /** @var Translator $translator */    private $translator;    public function __construct(EntityManager $entityManager, Translator $translator, $france, $postalcode)    {        $this->entityManager = $entityManager;        $this->translator = $translator;        parent::__construct('user-registration-form');        $this->setAttribute('method', 'post');        $this->setHydrator(new DoctrineHydrator($entityManager,'DGIModule\Entity\User'));        $this->setAttribute('class', 'form-horizontal');        $this->setAttribute('data-fv-framework', 'bootstrap');        $this->setAttribute('data-fv-icon-valid', 'glyphicon glyphicon-ok');        $this->setAttribute('data-fv-icon-invalid', 'glyphicon glyphicon-remove');        $this->setAttribute('data-fv-icon-validating', 'glyphicon glyphicon-refresh');        $this->add(array(            'name' => 'usrPostalcode',            'attributes' => array(                'type'  => 'text',                'required' => 'required',                'class'=>'form-control input-md',                'id' => 'usrPostalcode',                'maxlength' => 5,                'data-fv-digits' => 'true',                'data-fv-stringlength'=>"true",                'data-fv-stringlength-max'=>"5",                'data-fv-stringlength-min'=>"5",                'data-fv-stringlength-message'=>"Le code postal doit avoir 5 chiffres",                'placeholder' => 'votre code postal'            ),        ));        $this->add(array(            'name' => 'country',            'type' => 'Zend\Form\Element\Hidden',            'attributes' => array(                'id' => 'country',                'value' => 73,            ),        ));        $this->add([            'type' => 'DoctrineModule\Form\Element\ObjectSelect',            'name' => 'city',            'attributes' => array(                'required' => true,                'class'=>'form-control text-change',                'id' => 'city'            ),            'options' => [                'object_manager' => $entityManager,                'target_class' => '\DGIModule\Entity\City',                'label_generator' => function (City $city) {                    return $city->getCityName();                },                'disable_inarray_validator' => true,                'is_method' => true,                'find_method' => array(                    'name' => 'getCities',                    'params' => array(                        'postalcode'=> $postalcode,                        'country' => $france                    ),                ),            ]        ]);        $this->add(array(            'name' => 'usrFirstname',            'attributes' => array(                'type'  => 'text',                'required' => 'required',                'class'=>'form-control input-md',                'id' => 'firstname',                'maxlength' => 50,                'size' => 50,                'data-fv-stringlength'=>"true",                'data-fv-stringlength-min'=>"2",                'data-fv-stringlength-message'=>"Le prénom doit avoir au moins 2 caractères",                'placeholder' => 'votre prénom'            ),        ));        $this->add(array(            'name' => 'usrLastname',            'attributes' => array(                'type'  => 'text',                'required' => 'required',                'class'=>'form-control input-md',                'id' => 'lastname',                'maxlength' => 50,                'data-fv-stringlength'=>"true",                'data-fv-stringlength-min'=>"2",                'data-fv-stringlength-message'=>"Le nom doit avoir au moins 2 caractères",                'placeholder' => 'votre nom'            ),        ));        $this->add(array(            'name' => 'usrNIR',            'attributes' => array(                'type'  => 'text',                'required' => 'required',                'class'=>'form-control input-md',                'id' => 'usrNIR',                'maxlength' => 15,                'data-fv-digits' => 'true',                'data-fv-stringlength'=>"true",                'data-fv-stringlength-max'=>"15",                'data-fv-stringlength-min'=>"15",                'data-fv-stringlength-message'=>"Le numéro de Sécurité Sociale doit avoir 15 chiffres",                'placeholder' => 'numéro de Sécurité Sociale à 15 chiffres (carte Vitale)'            ),        ));        $this->add([            'name' => 'usrName',            'attributes' => [                'type'  => 'text',                'class'=>'form-control input-md',                'id' => 'username',                'maxlength' => 20,                'required' => 'required',                'data-fv-regexp'=>"true",                'data-fv-regexp-regexp'=>'^[a-zA-Z][a-zA-Z0-9_.-]+$',                'data-fv-regexp-message'=> "Le nom d'utilisateur doit commencer avec une lettre et peut contenir que des lettres (a-z, A-Z), chiffres (0-9), barres (_), tirets (-), et points (.)",                'data-fv-stringlength'=>"true",                'data-fv-stringlength-max'=>"20",                'data-fv-stringlength-min'=>"5",                'data-fv-stringlength-message'=>"Le nom d'utilisateur doit avoir entre 5 et 20 caractères",                'placeholder' => "votre futur nom d'utilisateur Demodyne"            ],        ]);        $this->add([            'name' => 'usrEmail',            'attributes' => [                'type'  => 'email',                'id' => 'email',                'class'=>'form-control input-md',                'maxlength' => 60,                'required' => 'required',                'placeholder' => 'votre adresse email'            ],        ]);        $this->add([            'name' => 'usrPassword',            'attributes' => [                'type'  => 'password',                'id' => 'usrPassword',                'class'=>'form-control input-md',                'required' => 'required',                'data-fv-stringlength'=>'true',                'data-fv-stringlength-min'=>'6',                'data-fv-stringlength-max'=>'12',                'data-fv-stringlength-message'=>'Le mot de passe doit avoir entre 6 et 12 caractères'            ],        ]);        $this->add([            'name' => 'usrPasswordConfirm',            'attributes' => [                'type'  => 'password',                'id' => 'usrPasswordConfirm',                'class'=>'form-control input-md',                'required' => 'required',                'data-fv-identical'=>"true",                'data-fv-identical-field'=>"usrPassword",                'data-fv-identical-message'=>"Les deux mot de passe ne sont pas identiques"            ],        ]);		$dirdata = './public/img';		$captchaImage = new CaptchaImage(  [		    'font' => '/data/fonts/arialnb.ttf',		    'width' => 325,		    'height' => 75,		    'dotNoiseLevel' => 40,		    'lineNoiseLevel' => 3,            ]		);		$captchaImage->setWordLen(4);		$captchaImage->setImgDir($dirdata.'/captcha');		$captchaImage->setImgUrl('/captcha');		$this->add([		    'type' => 'Zend\Form\Element\Captcha',		    'name' => 'captcha',		    'options' => [		        'captcha' => $captchaImage            ],		    'attributes' => [		        'id' => 'captcha',		        'class'=>'form-control input-md',                'required' => 'required',                'data-fv-stringlength'=>'true',                'data-fv-stringlength-min'=>'4',                'data-fv-stringlength-max'=>'4',                'data-fv-stringlength-message'=>'Veuillez recopier toutes les 4 caractères de l\'image'		    ]        ]);        $this->add([            'type' => 'Zend\Form\Element\Csrf',            'name' => 'userCSRF',            'options' => [                'csrf_options' => [                    'timeout' => 1200                ]            ]        ]);    }        public function getInputFilterSpecification()        {            return [                'usrFirstname' => [                    'required' => true,                    'filters' => [                        ['name' => 'StripTags'],                        ['name' => 'StringTrim'],                    ],                    'validators' => [                        [                            'name'    => 'NotEmpty',                        ],                        [                            'name' => 'StringLength',                            'options' => [                                'encoding' => 'UTF-8',                                'min' => 2,                                'max' => 50                            ],                        ],                    ],                ],                'usrLastname' => [                    'required' => true,                    'filters' => [                        ['name' => 'StripTags'],                        ['name' => 'StringTrim'],                    ],                    'validators' => [                        [                            'name' => 'StringLength',                            'options' => [                                'encoding' => 'UTF-8',                                'min' => 2,                                'max' => 50                            ],                        ],                    ],                ],                'usrNIR' => [                    'required' => true,                    'filters' => [                        ['name' => 'StripTags'],                        ['name' => 'StringTrim'],                    ],                    'validators' => [                        [                            'name' => 'StringLength',                            'options' => [                                'encoding' => 'UTF-8',                                'min' => 15,                                'max' => 15                            ],                        ],                    ],                ],                'usrPostalcode' => [                    'required' => true,                    'filters' => [                        ['name' => 'StripTags'],                        ['name' => 'StringTrim'],                    ],                    'validators' => [                        [                            'name' => 'StringLength',                            'options' => [                                'encoding' => 'UTF-8',                                'min' => 2,                            ],                        ],                    ],                ],                'city' => [                    'required' => true,                    'validators' => [                        [                            'name'		=> 'DoctrineModule\Validator\ObjectExists',                            'options' => [                                'object_repository' => $this->entityManager->getRepository('DGIModule\Entity\City'),                                'fields'            => 'cityId',                                'messages' => [                                    'noObjectFound' => $this->translator->translate('You must select a valid city', 'DGIModule')                                ]                            ],                        ],                    ],                ],                'usrName'=> [                    'required' => true,                    'filters'  => [                        ['name' => 'StripTags'],                        ['name' => 'StringTrim'],                    ],                    'validators' => [                        [                            'name'    => 'StringLength',                            'options' => [                                'encoding' => 'UTF-8',                                'min'      => 5,                                'max'      => 20,                                'messages' => [                                    StringLength::TOO_LONG  => $this->translator->translate("The username must be between %min% and %max% characters long", 'DGIModule'),                                    StringLength::TOO_SHORT  => $this->translator->translate("The username must be between %min% and %max% characters long", 'DGIModule')                                ]                            ],                        ],                        [                            'name' => 'Regex',                            'options' => [                                'pattern' => '/^[a-zA-Z][a-zA-Z0-9_.-]+$/',                                'messages' => [                                    Regex::NOT_MATCH => $this->translator->translate("Invalid username. Usernames must start with a letter. Allowed characters are alphabets (a-z, A-Z), digits (0-9), underscore (_), hyphen (-) , and period (.)", 'DGIModule')                                ]                            ],                        ],                        [                            'name'		=> 'DoctrineModule\Validator\NoObjectExists',                            'options' => [                                'object_repository' => $this->entityManager->getRepository('DGIModule\Entity\User'),                                'fields'            => 'usrName',                                'messages' => [                                    'objectFound' => 'Le nom d\'utilisateur "%value%" est déjà enregitré sur Demodyne. Veuillez vous connecter ou choisir un autre nom d\'utilisateur.',                                ]                            ],                        ],                    ],                ],                'usrEmail' => [                    'required'   => true,                    'validators' => [                        [                            'name' => 'EmailAddress'                        ],                        [                            'name'		=> 'DoctrineModule\Validator\NoObjectExists',                            'options' => [                                'object_repository' => $this->entityManager->getRepository('DGIModule\Entity\User'),                                'fields'            => 'usrEmail',                                'messages' => [                                    'objectFound' => 'Il existe un compte Demodyne enregistré avec l\'email %value%. Veuillez vous connecter ou choisir une autre adresse émail.'                                ]                            ],                        ],                    ],                ],                'usrPassword' => [                    'required' => true,                    'validators' => [                        [                            'name'    => 'StringLength',                            'options' => [                                'encoding' => 'UTF-8',                                'min'      => 6,                                'max'      => 12,                                'messages' => [                                    StringLength::TOO_LONG  => $this->translator->translate("The password must be between %min% and %max% characters long", 'DGIModule'),                                    StringLength::TOO_SHORT  => $this->translator->translate("The password must be between %min% and %max% characters long", 'DGIModule')                                ]                            ],                        ],                    ],                ],                'usrPasswordConfirm'=> [                    'required' => true,                    'validators' => [                        [                            'name'    => 'Identical',                            'options' => [                                'token' => 'usrPassword',                                'messages' => [                                    Identical::NOT_SAME  => $this->translator->translate("The two given passwords do not match", 'DGIModule'),                                ]                            ],                        ],                    ],                ],            ];        }}