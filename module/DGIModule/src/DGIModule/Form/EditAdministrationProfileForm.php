<?php/** * @link      https://github.com/demodyne/demodyne * @copyright Copyright (c) 2015-2017 Demodyne (https://www.demodyne.org) * @license   http://www.gnu.org/licenses/agpl.html GNU Affero General Public License */namespace DGIModule\Form;use Doctrine\ORM\EntityManager;use Zend\Form\Form;use DoctrineModule\Stdlib\Hydrator\DoctrineObject as DoctrineHydrator;use Zend\InputFilter\InputFilterProviderInterface;use DGIModule\Entity\User;use DGIModule\Entity\Country;use DGIModule\Entity\City;use DGIModule\Form\AdministrationFieldset;use Zend\Mvc\I18n\Translator;class EditAdministrationProfileForm extends Form implements InputFilterProviderInterface{    private $entityManager;    /**     * AdministrationPresentationForm constructor.     * @param EntityManager $entityManager     * @param Translator $translator     * @param User $user     */    public function __construct(EntityManager $entityManager, Translator $translator, User $user)    {        parent::__construct('administration-presentation-form');        $this->entityManager = $entityManager;        $this->setAttribute('method', 'post');        $this->setAttribute('class', 'form-horizontal');        $this->setHydrator(new DoctrineHydrator($entityManager,'DGIModule\Entity\User'));        $this->add(new AdministrationFieldset($entityManager, $translator, true));        $this->add(array(            'name' => 'usrFirstname',            'attributes' => array(                'type'  => 'text',                'required' => 'required',                'class'=>'form-control text-change',                'id' => 'firstname',                'maxlength' => 50,                'size' => 50,            ),        ));        $this->add(array(            'name' => 'usrLastname',            'attributes' => array(                'type'  => 'text',                'required' => 'required',                'class'=>'form-control text-change',                'id' => 'lastname',                'maxlength' => 50,                'size' => 50,            ),        ));        $this->add(array(            'name' => 'usrEmail',            'attributes' => array(                'type'  => 'email',                'required' => 'required',                'class'=>'form-control text-change',                'id' => 'usrEmail',            ),        ));        $this->add(array(            'name' => 'usrCountry',            'attributes' => array(                'type'  => 'text',                'class'=>'form-control',                'size' => 10,                'disabled' => true,                'value' => $user->getCountry()->getCountryName()            )        ));        $this->add([            'type' => 'DoctrineModule\Form\Element\ObjectSelect',            'name' => 'country',            'value' => $user->getCountry(),            'attributes' => [                'required' => true,                'class'=>'form-control text-change',                'id' => 'country',                'style' => 'display: none;',            ],            'options' => [                'label' => 'Country: ',                'object_manager' => $entityManager,                'target_class' => '\DGIModule\Entity\Country',                'label_generator' => function (Country $country) {                    return $country->getCountryName();                },                'is_method' => true,                'required' => false,                'find_method' => [                    'name' => 'getAllCountries',                    'params' => [                        'criteria' => [],                    ],                ],            ]        ]);        $this->add(array(            'name' => 'usrPostalcode',            'attributes' => array(                'type'  => 'text',                'required' => 'required',                'class'=>'form-control text-change',                'id' => 'usrPostalcode',                'size' => 10,            ),            'options' => array(                'label' => 'Postalcode:',            ),        ));        $this->add([            'type' => 'DoctrineModule\Form\Element\ObjectSelect',            'name' => 'city',            'value' => $user->getCity(),            'attributes' => array(                'required' => true,                'class'=>'form-control text-change',                'id' => 'city',                'disable_inarray_validator' => true,            ),            'options' => [                'label' => 'City: ',                'object_manager' => $entityManager,                'target_class' => '\DGIModule\Entity\City',                'label_generator' => function (City $city) {                    return $city->getCityName();                },                'disable_inarray_validator' => true,                'is_method' => true,                'required' => true,                'find_method' => array(                    'name' => 'getCities',                    'params' => array(                        'postalcode'=>$user->getCity()?$user->getCity()->getCityPostalcode():'00000',                        'country' => $user->getCountry()                    ),                ),            ]        ]);        $this->add(array(            'name' => 'usrPhone',            'type'  => 'DGIModule\Form\Element\Phone',            'options' => array(                'label' => 'Phone:',            ),            'attributes' => [                'id' => 'phone',                'maxlength' => 12,                'size' => 12,                'class'=>'form-control text-change',            ]        ));    }    public function getInputFilterSpecification()    {        return [            'usrFirstname' =>[                'required' => true,                'filters' => [                    ['name' => 'StripTags'],                    ['name' => 'StringTrim'],                ],                'validators' => [                    [                        'name' => 'StringLength',                        'options' => [                            'encoding' => 'UTF-8',                            'min' => 2,                            'max' => 100                        ],                    ],                ],            ],            'usrLastname' => [                'required' => true,                'filters' => [                    ['name' => 'StripTags'],                    ['name' => 'StringTrim'],                ],                'validators' => [                    [                        'name' => 'StringLength',                        'options' => [                            'encoding' => 'UTF-8',                            'min' => 2,                            'max' => 100                        ],                    ],                ],            ],            'usrEmail' => [                'required'   => true,                'validators' => [                    [                        'name' => 'EmailAddress'                    ],                    [                        'name'		=> 'DoctrineModule\Validator\NoObjectExists',                        'options' => [                            'object_repository' => $this->entityManager->getRepository('DGIModule\Entity\User'),                            'fields'            => 'usrEmail'                        ],                    ],                ],            ],            'country' => [                'required' => true,            ],            'usrPostalcode' => [                'required' => true,                'filters' => [                    ['name' => 'StripTags'],                    ['name' => 'StringTrim'],                ],                'validators' => [                    [                        'name' => 'StringLength',                        'options' => [                            'encoding' => 'UTF-8',                            'min' => 2,                        ],                    ],                ],            ],            'usrPhone' => [                'required' => false,                'filters' => [                    ['name' => 'StripTags'],                    ['name' => 'StringTrim'],                ],                'validators' => [                    [                        'name' => 'StringLength',                        'options' => [                            'encoding' => 'UTF-8',                            'min' => 10,                            'max' => 12                        ],                    ],                ],            ]        ];    }}