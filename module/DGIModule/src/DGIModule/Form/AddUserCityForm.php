<?php/** * @link      https://github.com/demodyne/demodyne * @copyright Copyright (c) 2015-2017 Demodyne (https://www.demodyne.org) * @license   http://www.gnu.org/licenses/agpl.html GNU Affero General Public License */namespace DGIModule\Form;use DGIModule\Entity\City;use DGIModule\Entity\Country;use Doctrine\ORM\EntityManager;use Zend\Form\Form;use Zend\Mvc\I18n\Translator;use Zend\Hydrator\ClassMethods;use Zend\InputFilter\InputFilterProviderInterface;class AddUserCityForm extends Form  implements InputFilterProviderInterface{        private $entityManager;    private $translator;        public function __construct(EntityManager $entityManager, Translator $translator, $fbLocation = null)    {        parent::__construct('add-user-city-form');             $this->entityManager = $entityManager;        $this->translator = $translator;        $this->setAttribute('method', 'post');        $this->setHydrator(new ClassMethods());        $this->setAttribute('class', 'form-horizontal');                $this->add([            'type' => 'DoctrineModule\Form\Element\ObjectSelect',            'name' => 'country',            'value' => 73,            'attributes' => array(                'required' => true,                'class'=>'form-control text-change',                'id' => 'user-city-country'            ),            'options' => [                'label' => 'Country: ',                'object_manager' => $entityManager,                'target_class' => '\DGIModule\Entity\Country',                'label_generator' => function (Country $country) {                    return $country->getCountryName();                },                'option_attributes' => [                    'data-postalcode' => function (Country $country) {                        return $country->getCountryPostalcode();                    },                ],                'is_method' => true,                'required' => false,                'find_method' => array(                    'name' => 'getAllCountries',                    'params' => array(                        'criteria' => array(),                    ),                ),            ]        ]);		$this->add(array(		    'name' => 'usrPostalcode',		    'attributes' => array(		        'type'  => 'text',		        'required' => 'required',		        'class'=>'form-control text-change',		        'id' => 'user-city-usrPostalcode',		        'size' => 10,		    ),		));				if ($fbLocation) {    		$this->add([    		    'type' => 'DoctrineModule\Form\Element\ObjectSelect',    		    'name' => 'city',    		    'attributes' => array(    		        'required' => true,    		        'class'=>'form-control text-change',    		        'id' => 'user-city-city'    		    ),    		    'options' => [    		        'object_manager' => $entityManager,    		        'target_class' => '\DGIModule\Entity\City',    		        'label_generator' => function (City $city) {    		              return $city->getCityName();    		        },    		        'disable_inarray_validator' => true,    		        'is_method' => true,    		        'required' => true,    		        'find_method' => array(    		            'name' => 'searchCity',    		            'params' => array(    		                'cityName'=> $fbLocation[0],    		                'regionName' => $fbLocation[1],    		                'countryName' => $fbLocation[2],    		            ),    		        ),		        ]	        ]);		}		else {		    $this->add(array(    		     'name' => 'city',    		     'type'  => 'Zend\Form\Element\Select',    		     'options' => array(        		     'disable_inarray_validator' => true,    		     ),    		     'attributes' => [        		     'id' => 'user-city-city',        		     'required' => 'required',        		     'class'=>'form-control text-change',    		     ]		     ));		}    }    public function getInputFilterSpecification()    {        return array(            'country' => [    		    'required' => true,		    ],	        'usrPostalcode' => [    		    'required' => true,    		    'filters' => array(    		        array('name' => 'StripTags'),    		        array('name' => 'StringTrim'),    		    ),    		    'validators' => array(    		        array(    		            'name' => 'StringLength',    		            'options' => array(    		                'encoding' => 'UTF-8',    		                'min' => 2,    		            ),    		        ),    		    ),            ],            'city' => [                'required' => true,                'validators' => array(                    array(                        'name'		=> 'DoctrineModule\Validator\ObjectExists',                        'options' => array(                            'object_repository' => $this->entityManager->getRepository('DGIModule\Entity\City'),                            'fields'            => 'cityId',                            'messages' => [                                'noObjectFound' => $this->translator->translate('You must select a valid city', 'DGIModule')                            ]                        ),                    ),                ),            ],        );    } }