<?php/** * @link      https://github.com/demodyne/demodyne * @copyright Copyright (c) 2015-2017 Demodyne (https://www.demodyne.org) * @license   http://www.gnu.org/licenses/agpl.html GNU Affero General Public License */namespace DGIModule\Controller;use Facebook\Exceptions\FacebookResponseException;use Facebook\Exceptions\FacebookSDKException;use Zend\Mvc\Controller\AbstractActionController;use Zend\Session\SessionManager;use Zend\View\Model\ViewModel;use DGIModule\Entity\User;use DGIModule\Form\UserLoginForm;use Zend\Session\Container;use Facebook\Facebook;use Doctrine\ORM\EntityManager;use Zend\Mvc\I18n\Translator;use Zend\Authentication\AuthenticationService;class UserLoginController extends AbstractActionController{    protected $entityManager;    protected $translator;    protected $config;    protected $auth;    public function __construct(        array $config,        EntityManager $entityManager,        Translator $translator,        AuthenticationService $auth    )    {        $this->config = $config;        $this->entityManager = $entityManager;        $this->translator = $translator;        $this->auth = $auth;    }    public function indexAction()    {        return $this->redirect()->toRoute('user/login', array('action'=>'login'));    }    public function loginAction()    {		$form = new UserLoginForm($this->entityManager, $this->translator);		$messages = null;		$redirect = $this->params()->fromQuery('redirect', null);		$error =false;        $errorMessage = $this->translator->translate('Supplied credential is invalid.', 'DGIModule');        unset($_SESSION['guest']);        unset($_SESSION['level']);        /** @var $request \Zend\Http\Request */        $request = $this->getRequest();        if ($request->isPost()) {            $form->setData($request->getPost());            if ($form->isValid()) {                				$data = $form->getData();                /** @var \DoctrineModule\Authentication\Adapter\ObjectRepository $adapter */                $adapter = $this->auth->getAdapter();				$adapter->setOptions(array(                    'object_manager' => $this->entityManager,                    'identity_class' => 'DGIModule\Entity\User',                    'identity_property' => 'usrName',                    'credential_property' => 'usrPassword',                     'credential_callable' => function(User $user, $passwordGiven) {                            if ($user->getUsrPassword() == md5($this->config['demodyne']['registration']['password_static_salt'] . $passwordGiven . $user->getUsrPasswordSalt()) &&                                $user->getUsrActive() == 1 && $user->getUsrDeleted() == 0 ) {                            return true;                        }                        else {                            return false;                        }                    },                ));				$adapter->setIdentity($data['username']);				$adapter->setCredential($data['password']);				$authResult = $this->auth->authenticate();				// if authentification is valid				if ($authResult->isValid()) {					$identity = $authResult->getIdentity();					$this->auth->getStorage()->write($identity);//					$time = 1209600; // 14 days 1209600/3600 = 336 hours => 336/24 = 14 days//					if ($data['rememberme']) $this->auth->getStorage()->session->getManager()->rememberMe($time); // no way to get the session// 					if ($data['rememberme']) {// 						$sessionManager = new SessionManager();// 						$sessionManager->rememberMe($time);// 					}					// update last login to user					$identity->setUsrLastLoginDate($identity->getUsrCurrentLoginDate())					         ->setUsrCurrentLoginDate(new \DateTime());					$this->entityManager->merge($identity);					$this->entityManager->flush();					$session = new Container('language');					$session->language = $identity->getLang()->getLangId();					// redirect					if ($redirect) return $this->redirect()->toUrl($redirect);					elseif ($identity->isPartner()) {					    $this->redirect()->toRoute('partner/dashboard');					}					else {					   $this->redirect()->toRoute('home');					}				}				foreach ($authResult->getMessages() as $message) {					$messages .= "$message\n"; 				}					$error = true;                /** @var \DGIModule\Entity\User $user */                $user = $this->entityManager->getRepository('DGIModule\Entity\User')->findOneBy(['usrName' => $data['username']]);				if ($user) {                    if (!$user->getUsrActive()) {                        $errorMessage = $this->translator->translate('Your account has not been validated yet.<br> We have send you an activation email.<br> Please check your email and validate your account.', 'DGIModule');                        $this->forward()->dispatch('DGIModule\Controller\Email', ['action' => 'email-validation', 'id'=>$user->getUsrUUID(), 'email' => true]);                    }                    elseif ($user->getUsrDeleted()) {                        $errorMessage = $this->translator->translate('Your have deleted your account.', 'DGIModule');                    }                }			}			else {			    $error = true;			}		}		$viewModel = new ViewModel();		$viewModel->setTerminal(true);        /** @var $response \Zend\Http\Response */        $response = $this->getResponse();		if ($redirect) {            $response->setStatusCode(401);            $response->sendHeaders();    	}		$viewModel->setTemplate('dgi-module/index/index.phtml');		$viewModel->setVariables(array(			'error' => $error,            'errorMessage' => $errorMessage,			'loginForm'	=> $form,			'messages' => $messages,		    'redirect' => $redirect,		    'facebook' => false,		));				$languages = $this->entityManager->getRepository('DGIModule\Entity\Language')->getLanguages();		$currentLanguage = $this->entityManager->getRepository('DGIModule\Entity\Language')->findOneBy(['langId' => $this->translator->getTranslator()->getLocale()]);		$viewModel->setVariables([		    'languages' => $languages,		    'currentLanguage' => $currentLanguage		]);				return $viewModel;    }	public function logoutAction()	{		if ($this->auth->hasIdentity()) {			// Identity exists; get it			//$identity = $auth->getIdentity();		}		$this->auth->clearIdentity();		$sessionManager = new SessionManager();		$sessionManager->forgetMe();		unset($_SESSION['level']);		unset($_SESSION['inbox']);		unset($_SESSION['administrationDashboard']);		unset($_SESSION['measure']);		unset($_SESSION['event']);		unset($_SESSION['news']);		unset($_SESSION['newsletter']);		unset($_SESSION['partnerDashboard']);		unset($_SESSION['proposal']);		unset($_SESSION['program']);		unset($_SESSION['banner']);		unset($_SESSION['session']);        unset($_SESSION['admin']);        unset($_SESSION['blog']);		unset($_SESSION['fb_access_token']);		return $this->redirect()->toRoute('home', ['lang'=>$this->params('lang', 'en')]);	}    /**     * @return ViewModel|\Zend\Http\Response     */    public function facebookLoginAction()	{	    $messages = null;	    $redirect = $this->params()->fromQuery('redirect', null);	    $error =false;	    unset($_SESSION['guest']);	    	    $fb = new Facebook([	        'app_id' => $this->config['facebook']['app_id'],	        'app_secret' => $this->config['facebook']['app_secret'],	        'default_graph_version' => 'v2.7',	    ]);	    if (!isset($_SESSION['fb_access_token'])) {	        $helper = $fb->getJavaScriptHelper();	        	        try {	            	            $accessToken = $helper->getAccessToken();	            	            $extend_url = "https://graph.facebook.com/oauth/access_token?client_id=".$this->config['facebook']['app_id']	            ."&client_secret=".$this->config['facebook']['app_secret']	            ."&grant_type=fb_exchange_token&fb_exchange_token=".(string)$accessToken;	             	            $resp = file_get_contents($extend_url);                $output = json_decode($resp, true);	             	            $accessToken = $output['access_token'];	            	        } catch(FacebookResponseException $e) {	            // When Graph returns an error	            return $this->forward()->dispatch('DGIModule\Controller\Error', array('action' => 'error', 'dialog'=>false, 'message' => $this->translator->translate('Error accessing your Facebook account. Please try again later.', 'DGIModule')));	        } catch(FacebookSDKException $e) {	            // When validation fails or other local issues	            return $this->forward()->dispatch('DGIModule\Controller\Error', array('action' => 'error', 'dialog'=>false, 'message' => $this->translator->translate('Error accessing your Facebook account. Please try again later.', 'DGIModule')));	        } catch (\Exception $e) {	            return $this->forward()->dispatch('DGIModule\Controller\Error', array('action' => 'error', 'dialog'=>false, 'message' => $this->translator->translate('Error accessing your Facebook account. Please try again later.', 'DGIModule')));	        }	        	        if (! isset($accessToken)) {	            return $this->forward()->dispatch('DGIModule\Controller\Error', array('action' => 'error', 'dialog'=>false, 'message' => $this->translator->translate('Error accessing your Facebook account. Please try again later.', 'DGIModule')));	        }	        $_SESSION['fb_access_token'] = (string) $accessToken;	    }	    	    	    	    try {	        // Returns a `Facebook\FacebookResponse` object	        $response = $fb->get('/me?fields=id', $_SESSION['fb_access_token']);	    } catch(FacebookResponseException $e) {	            return $this->forward()->dispatch('DGIModule\Controller\Error', array('action' => 'error', 'dialog'=>false, 'message' => $this->translator->translate('Error accessing your Facebook account. Please try again later.', 'DGIModule')));	    } catch(FacebookSDKException $e) {	            return $this->forward()->dispatch('DGIModule\Controller\Error', array('action' => 'error', 'dialog'=>false, 'message' => $this->translator->translate('Error accessing your Facebook account. Please try again later.', 'DGIModule')));	    }	     	    $fbUser = $response->getGraphUser();	    $user = $this->entityManager->getRepository('DGIModule\Entity\User')->findOneBy(array('fbId' => $fbUser['id'], 'usrDeletedDate'=>null));	     	    if ($user) {	        $this->auth->getStorage()->write($user);	        	        $user->setUsrLastLoginDate($user->getUsrCurrentLoginDate())	             ->setUsrCurrentLoginDate(new \DateTime())	             ->setFbAccessToken($_SESSION['fb_access_token']);	        $this->entityManager->merge($user);	        $this->entityManager->flush();	        	        $session = new Container('language');	        $session->language = $user->getLang()->getLangId();	        $session = new Container('level');	        $session->level = 'country';	        $session->levelValue = $this->config['demodyne']['level']['country'];	        // redirect	        if ($redirect) return $this->redirect()->toUrl($redirect);	        elseif ($user->isPartner()) {	            $this->redirect()->toRoute('partner/dashboard');	        }	        else {	            $this->redirect()->toRoute('home');	        }	    }	    	    else {	        $viewModel = new ViewModel();	        $viewModel->setTerminal(true);	        if ($redirect) {	            $this->getResponse()->setStatusCode(401);	            $this->getResponse()->sendHeaders();	        }	        $form = new UserLoginForm($this->entityManager, $this->translator);	        $viewModel->setTemplate('dgi-module/index/index.phtml');	        $viewModel->setVariables(array(	            'error' => true,	            'loginForm'	=> $form,	            'messages' => $this->translator->translate('No user registered with this Facebook account.', 'DGIModule'),	            'redirect' => $redirect,	            'facebook' => true,	        ));	        	        $languages = $this->entityManager->getRepository('DGIModule\Entity\Language')->getLanguages();	        $currentLanguage = $this->entityManager->getRepository('DGIModule\Entity\Language')->findOneBy(['langId' => $this->translator->getTranslator()->getLocale()]);	        $viewModel->setVariables([	            'languages' => $languages,	            'currentLanguage' => $currentLanguage	        ]);	        	        return $viewModel;	    }	}	}