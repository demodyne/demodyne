<?php/** * @link      https://github.com/demodyne/demodyne * @copyright Copyright (c) 2015-2016 Demodyne (https://www.demodyne.org) * @license   http://www.gnu.org/licenses/agpl.html GNU Affero General Public License */namespace DGIModule\Controller;use Zend\Mvc\Controller\AbstractActionController;use Zend\View\Model\ViewModel;use DGIModule\Entity\User; use DGIModule\Form\UserLoginForm;       use DGIModule\Form\UserLoginFilter;use Zend\Session\Container;class UserLoginController extends AbstractActionController{    public function indexAction()    {        return $this->redirect()->toRoute('user/login', array('action'=>'login'));    }    public function loginAction()    {		$form = new UserLoginForm();		$form->get('submit')->setValue('Login');		$messages = null;		$redirect = $this->params()->fromQuery('redirect', null);		$error =false;		unset($_SESSION['guest']);		$request = $this->getRequest();        if ($request->isPost()) {            $form->setInputFilter(new UserLoginFilter($this->getServiceLocator()));            $form->setData($request->getPost());            if ($form->isValid()) {                				$data = $form->getData();							$authService = $this->getServiceLocator()->get('Zend\Authentication\AuthenticationService');						$adapter = $authService->getAdapter();				$entityManager = $this->getServiceLocator()->get('doctrine.entitymanager.orm_default');				$adapter->setOptions(array(                    'object_manager' => $entityManager,                    'identity_class' => 'DGIModule\Entity\User',                     'identity_property' => 'usrName',                     'credential_property' => 'usrPassword',                      'credential_callable' => function(\DGIModule\Entity\User $user, $passwordGiven) {                             $config = $this->getServiceLocator()->get('Config');                            if ($user->getUsrPassword() == md5($config['demodyne']['registration']['password_static_salt'] . $passwordGiven . $user->getUsrPasswordSalt()) &&                                $user->getUsrActive() == 1 && $user->getUsrDeleted() == 0 ) {                            return true;                        }                        else {                            return false;                        }                    },                ));				$adapter->setIdentityValue($data['username']); 				$adapter->setCredentialValue($data['password']); 				$authResult = $authService->authenticate();				// if authentification is valid				if ($authResult->isValid()) {					$identity = $authResult->getIdentity();					$authService->getStorage()->write($identity);					// TODO remember me					$time = 1209600; // 14 days 1209600/3600 = 336 hours => 336/24 = 14 days//-					if ($data['rememberme']) $authService->getStorage()->session->getManager()->rememberMe($time); // no way to get the session					if ($data['rememberme']) {						$sessionManager = new \Zend\Session\SessionManager();						$sessionManager->rememberMe($time);					}					// update last login to user					$identity->setUsrLastLoginDate($identity->getUsrCurrentLoginDate())					         ->setUsrCurrentLoginDate(new \DateTime());					$entityManager = $this->getServiceLocator()->get('doctrine.entitymanager.orm_default');					$entityManager->merge($identity);					$entityManager->flush();					$session = new Container('language');					$session->language = $identity->getLang()->getLangId();					$config = $this->getServiceLocator()->get('Config');					$session = new Container('level');					$session->level = 'country';					$session->levelValue = $config['demodyne']['level']['country'];					// redirect					if ($redirect) return $this->redirect()->toUrl($redirect);					elseif ($identity->isPartner()) {					    $this->redirect()->toRoute('partner/dashboard');					}					elseif ($identity->isAdministration()) {					    $adminLevel=$identity->getAdmin()->getAdminLevel();					    if ($adminLevel==3) {                            $this->redirect()->toRoute('country');                        }                        elseif ($adminLevel==2) {                            $this->redirect()->toRoute('region');                        }                        elseif ($adminLevel==1) {                            $this->redirect()->toRoute('city');                        }					}					else {					   $this->redirect()->toRoute('home');					}				}				foreach ($authResult->getMessages() as $message) {					$messages .= "$message\n"; 				}					$error = true;			}			else {			    $error = true;			}		}		$viewModel = new ViewModel();		$viewModel->setTerminal(true);		if ($redirect) {    		$this->getResponse()->setStatusCode(401);    		$this->getResponse()->sendHeaders();    	}		$viewModel->setTemplate('dgi-module/index/index.phtml');		$viewModel->setVariables(array(			'error' => $error,			'loginForm'	=> $form,			'messages' => $messages,		    'redirect' => $redirect,		));				$entityManager = $this->getServiceLocator()->get('doctrine.entitymanager.orm_default');		$languages = $entityManager->getRepository('DGIModule\Entity\Language')->getLanguages();		$currentLanguage = $entityManager->getRepository('DGIModule\Entity\Language')->findOneBy(['langId' => $this->getServiceLocator()->get('translator')->getTranslator()->getLocale()]);		$viewModel->setVariables([		    'languages' => $languages,		    'currentLanguage' => $currentLanguage		]);				return $viewModel;    }	public function logoutAction()	{		$auth = $this->getServiceLocator()->get('Zend\Authentication\AuthenticationService');		if ($auth->hasIdentity()) {		}		$auth->clearIdentity();//-		$auth->getStorage()->session->getManager()->forgetMe(); // no way to get to the sessionManager from the storage		$sessionManager = new \Zend\Session\SessionManager();		$sessionManager->forgetMe();		unset($_SESSION['inbox']);		unset($_SESSION['administrationDashboard']);		unset($_SESSION['measure']);		unset($_SESSION['event']);		unset($_SESSION['news']);		unset($_SESSION['newsletter']);		unset($_SESSION['partnerDashboard']);		unset($_SESSION['proposal']);		unset($_SESSION['program']);		unset($_SESSION['banner']);        return $this->redirect()->toRoute('home', ['lang'=>$this->params('lang', 'en')]);	}		}