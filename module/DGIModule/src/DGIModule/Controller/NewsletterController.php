<?php/** * @link      https://github.com/demodyne/demodyne * @copyright Copyright (c) 2015-2016 Demodyne (https://www.demodyne.org) * @license   http://www.gnu.org/licenses/agpl.html GNU Affero General Public License */namespace DGIModule\Controller;use Zend\Mvc\Controller\AbstractActionController;use Zend\View\Model\ViewModel;use Zend\Session\Container;use Doctrine\Common\Collections\ArrayCollection;use DGIModule\Entity\Newsletter;use DGIModule\Form\AddEditNewsletterForm;use DGIModule\Entity\Inbox;class NewsletterController extends AbstractActionController{    public function addNewsletterAction() {        $user = $this->identity();        $publish = $this->params()->fromRoute('publish', false);        $entityManager = $this->getServiceLocator()->get('doctrine.entitymanager.orm_default');        $newsletter = new Newsletter();        $form = new AddEditNewsletterForm();        $form->setAttribute('action', $this->url()->fromRoute('administration/newsletter', array('action'=>'add-newsletter')));        $request = $this->getRequest();        if ($request->isPost()) {            $post = array_merge_recursive(                $request->getPost()->toArray(),                $request->getFiles()->toArray()                );            $form->bind($newsletter);            $form->setData($post);            $picture = $post["picture-file"]["name"];            // TODO verify file size            if ($form->isValid()) {                if ($picture!="") {                    $files   = $request->getFiles();                    $oldFilename = $user->getUsrPicture();                    $target = getcwd() . "/public/img/newsletters/nl.jpg";                    $filterR = new \Zend\Filter\File\Rename(array(                        "target"    => $target,                        "randomize" => true,                    ));                    $filename= $filterR->filter($files['picture-file']);                    chmod($filename["tmp_name"], 0644);                    $newsletter->setNlHeaderImage(str_replace(getcwd() . "/public", '', $filename["tmp_name"]));                }                $categories = $this->params()->fromPost('categories', []);                foreach ($categories as $categoryId) {                    $category = $entityManager->getRepository('DGIModule\Entity\Category')->findOneBy(['catId'=>$categoryId]);                    $newsletter->addCategory($category);                }                $newsletter->setAdmin($user->getAdmin())                           ->setCity($user->getAdmin()->getAdminCity());                $entityManager->persist($newsletter);                $entityManager->flush();                $entityManager->refresh($newsletter);                if ($publish) {                    $this->publishNewsletter($newsletter, $entityManager);                }                return new \Zend\View\Model\JsonModel(array('success' => true));            }        }        $mainCategories = $entityManager->getRepository('DGIModule\Entity\Category')->getMainCategories($user);        $viewModel = new ViewModel();        //disable layout if request by Ajax        $viewModel->setTerminal($this->getRequest()->isXmlHttpRequest());        $viewModel->setVariables([            'form'=>$form,            'user' => $user,            'mainCategories' => $mainCategories,        ]);	    return $viewModel;	}		public function editNewsletterAction() {	    $user = $this->identity();	    $publish = $this->params()->fromRoute('publish', false);	    $entityManager = $this->getServiceLocator()->get('doctrine.entitymanager.orm_default');	    $newsletterUUID = $this->params('id');	    // no parameter	    if (!$newsletterUUID)	        return $this->forward()->dispatch('DGIModule\Controller\Error', array('action' => 'access-denied'));        $newsletter = $entityManager->getRepository('DGIModule\Entity\Newsletter')->findOneBy(array('nlUUID' => $newsletterUUID));        // proposal doesn't exists or the logged user is not the owner         if (!$newsletter || !$user->isAdministration() || $newsletter->getAdmin()!=$user->getAdmin())            return $this->forward()->dispatch('DGIModule\Controller\Error', array('action' => 'access-denied'));	    $form = new AddEditNewsletterForm();	    $form->setAttribute('action', $this->url()->fromRoute('administration/newsletter', array('action'=>'edit-newsletter', 'id' => $newsletterUUID)));	    $form->get('nlSendTo')->setValue($newsletter->getNlSendTo());	    $form->get('nlName')->setValue($newsletter->getNlName());	    $form->get('nlDescription')->setValue($newsletter->getNlDescription());	    $form->get('nlContact')->setValue($newsletter->getNlContact());	    $form->get('nlUrl')->setValue($newsletter->getNlUrl());	    $form->get('nlReply')->setValue($newsletter->getNlReply());	    $form->get('nlSubject')->setValue($newsletter->getNlSubject());	    $form->get('nlMessage')->setValue($newsletter->getNlMessage());	    $oldFilename = $newsletter->getNlHeaderImage();	    $request = $this->getRequest();	    if ($request->isPost()) {	        $post = array_merge_recursive(	            $request->getPost()->toArray(),	            $request->getFiles()->toArray()	            );	        $form->bind($newsletter);	        $form->setData($post);	        $picture = $post["picture-file"]["name"];	        // TODO verify file size	        if ($form->isValid()) {    	        // verify if picture change	            if ($picture!="") {	                $files   = $request->getFiles();	                $target = getcwd() . "/public/img/newsletters/nl.jpg";	                $filterR = new \Zend\Filter\File\Rename(array(	                    "target"    => $target,	                    "randomize" => true,	                ));	                $filename= $filterR->filter($files['picture-file']);	                chmod($filename["tmp_name"], 0644);	                $newsletter->setNlHeaderImage(str_replace(getcwd() . "/public", '', $filename["tmp_name"]));	                if ($oldFilename && file_exists(getcwd() . '/public'.$oldFilename)) {	                    unlink(getcwd() . '/public'.$oldFilename);	                }	            }                $categories = $this->params()->fromPost('categories', []);                $newsletter->resetCategories();                foreach ($categories as $categoryId) {                    $category = $entityManager->getRepository('DGIModule\Entity\Category')->findOneBy(['catId'=>$categoryId]);                    $newsletter->addCategory($category);                }                $entityManager->merge($newsletter);                $entityManager->flush();                $entityManager->refresh($newsletter);                if ($publish) {                    $this->publishNewsletter($newsletter, $entityManager);                }                return new \Zend\View\Model\JsonModel(array('success' => true));            }        }        $mainCategories = $entityManager->getRepository('DGIModule\Entity\Category')->getMainCategories($user);        $viewModel = new ViewModel();        //disable layout if request by Ajax        $viewModel->setTerminal($this->getRequest()->isXmlHttpRequest());        $viewModel->setTemplate('dgi-module/newsletter/add-newsletter.phtml');        $viewModel->setVariables([            'form'=>$form,            'newsletter' => $newsletter,            'user' => $user,            'mainCategories' => $mainCategories,        ]);        return $viewModel;    }        private function publishNewsletter(Newsletter $newsletter, $entityManager) {        $user = $this->identity();        $nlSendTo = $newsletter->getNlSendTo();        $toUsers = new  ArrayCollection();        // send to contacts        if (($newsletter->getNlSendTo()>>3)&1) {            foreach ($user->getContacts() as $usr) $toUsers->add($usr);        }        $config = $this->getServiceLocator()->get('Config');        // send to all citizen        if (($newsletter->getNlSendTo()>>2)&1) {                        $citizens = $entityManager->getRepository('DGIModule\Entity\User')->findCitizens($user->getAdmin(), $config['demodyne']['level']);            foreach ($citizens as $usr)                if (!$toUsers->contains($usr))                    $toUsers->add($usr);        }        // send to partners        if (($newsletter->getNlSendTo()>>0)&1) {            $partners = $entityManager->getRepository('DGIModule\Entity\User')->findNewsletterPartners($newsletter);            foreach ($partners as $usr)                if (!$toUsers->contains($usr))                    $toUsers->add($usr);        }        $config = $this->getServiceLocator()->get('Config');        $group = uniqid('', true);        foreach ($toUsers as $toUsr) {            $message = new Inbox();            $message->setToUsr($toUsr)                    ->setFromUsr($user)                    ->setIbxTitle($newsletter->getNlSubject())                    ->setIbxText($newsletter->getNlMessage())                    ->setIbxType($config['demodyne']['inbox']['type']['newsletter'])                    ->setIbxGroup($group)                    ->setNewsletter($newsletter);            $entityManager->persist($message);        }        $newsletter->setNlSentDate(new \DateTime());        $entityManager->flush();    }    	public function myNewslettersAction() {	    $user = $this->identity();	    $session = new Container('newsletter');	    $page = $this->params()->fromRoute('page', null);	    if (!$page) {	        if (!$session->myNewslettersPage) {	            $page = 1;	        }	        else {	            $page = $session->myNewslettersPage;	        }	    }	    $session->myNewslettersPage = $page;	    $sort = $this->params()->fromRoute('sort', null);	    if (!$sort) {	        if (!$session->myNewslettersSort) {	            $sort = 'created_date';	        }	        else {	            $sort = $session->myNewslettersSort;	        }	    }	    $session->myNewslettersSort = $sort;	    $order = $this->params()->fromRoute('order', null);	    if (!$order) {	        if (!$session->myNewslettersOrder) {	            $order = 'desc';	        }	        else {	            $order = $session->myNewslettersOrder;	        }	    }	    $session->myNewslettersOrder = $order;	    $limit= $this->params()->fromRoute('results', null);	    if (!$limit) {	        if (!$session->myNewslettersResults) {	            $limit = 5;	        }	        else {	            $limit = $session->myNewslettersResults;	        }	    }	    $session->myNewslettersResults = $limit;	    $entityManager = $this->getServiceLocator()->get('doctrine.entitymanager.orm_default');	    $newslettersCount = $entityManager->getRepository('DGIModule\Entity\Newsletter')->countAdminNewsletters($user->getAdmin());	    $newslettersCount = $newslettersCount["total"];	    $offset = ($page == 0) ? 0 : ($page - 1) * $limit;	    	    $pagedNewsletters = $entityManager->getRepository('DGIModule\Entity\Newsletter')->getAdminPagedNewsletters($user->getAdmin(), $offset, $limit, $sort, $order);	    	    $viewModel = new ViewModel();	    $viewModel->setTerminal($this->getRequest()->isXmlHttpRequest());	    $viewModel->setVariables([	        'pagedNewsletters' => $pagedNewsletters,	        'limit' => $limit,	        'page' => $page,	        'sort' => $sort,	        'order' => $order,	        'user' => $user,	        'newslettersCount' => $newslettersCount	    ]);	    return $viewModel;	}		public function viewNewsletterAction()	{	    $user = $this->identity();	    $eventUUID = $this->params('id');	    // no parameter	    if (! $eventUUID)	        return $this->forward()->dispatch('DGIModule\Controller\Error', array(	            'action' => 'access-denied'	        ));	        $entityManager = $this->getServiceLocator()->get('doctrine.entitymanager.orm_default');	        $event = $entityManager->getRepository('DGIModule\Entity\Event')->findOneBy(array(	            'eventUUID' => $eventUUID	        ));	        if (! $event || ! $event->getEventPublishedDate()) {	            return $this->forward()->dispatch('DGIModule\Controller\Error', array(	                'action' => 'access-denied'	            ));	        }	         	        $viewmodel = new ViewModel();            // disable layout if request by Ajax            $viewmodel->setTerminal($this->getRequest()->isXmlHttpRequest());            $attendees = $this->forward()->dispatch('DGIModule\Controller\Event', array(                'action' => 'view-attendees',                'id' => $eventUUID            ));            $viewmodel->addChild($attendees, 'attendees');            $viewmodel->setVariables([                'event' => $event,                'user' => $user            ]);            return $viewmodel;	}}