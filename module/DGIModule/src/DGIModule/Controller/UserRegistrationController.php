<?php/** * @link      https://github.com/demodyne/demodyne * @copyright Copyright (c) 2015-2017 Demodyne (https://www.demodyne.org) * @license   http://www.gnu.org/licenses/agpl.html GNU Affero General Public License */namespace DGIModule\Controller;use DGIModule\Entity\UserDigest;use Facebook\Exceptions\FacebookResponseException;use Facebook\Exceptions\FacebookSDKException;use Zend\Authentication\AuthenticationService;use Zend\Mvc\Controller\AbstractActionController;use Zend\Session\SessionManager;use Zend\View\Model\JsonModel;use Zend\View\Model\ViewModel;use Zend\Session\Container;use DoctrineModule\Stdlib\Hydrator\DoctrineObject as DoctrineHydrator;use Doctrine\ORM\EntityManager;use Zend\Mvc\I18n\Translator;use DGIModule\Entity\Partner;use DGIModule\Entity\Administration;use DGIModule\Entity\Counters;use DGIModule\Entity\User;use DGIModule\Form\AddUserForm;use DGIModule\Form\AddUserFacebookForm;use DGIModule\Form\AddUserCityForm;use DGIModule\Form\AddUserNameForm;use DGIModule\Form\PartnerRegistrationForm;use DGIModule\Form\PartnerRegistrationFilter;use DGIModule\Form\RegisterAdministrationForm;use DGIModule\Form\AdministrationRegistrationFilter;use DGIModule\Form\ForgottenPasswordForm;use Facebook\Facebook;use Ramsey\Uuid\Uuid;class UserRegistrationController extends AbstractActionController{    protected $entityManager;    protected $translator;    protected $config;    protected $auth;    public function __construct(        array $config,        EntityManager $entityManager,        Translator $translator,        AuthenticationService $auth    )    {        $this->config = $config;        $this->entityManager = $entityManager;        $this->translator = $translator;        $this->auth = $auth;    }    public function userRegistrationAction()	{	    unset($_SESSION['guest']);        /** @var $request \Zend\Http\Request */        $request = $this->getRequest();	    $viewModel = new ViewModel();	    $terminal = $request->isXmlHttpRequest();	    $viewModel->setTerminal($terminal);	    	    if (!$this->config['demodyne']['registration']['user']['allow']) {            $viewModel->setTemplate('dgi-module/user-registration/'.$terminal?'registration-closed-dialog.phtml':'registration-closed.phtml');	        return $viewModel;	    }		$form = new AddUserForm($this->entityManager, $this->translator);		if ($request->isPost()) {		    $user = new User();		    $form->bind($user);					$form->setData($request->getPost());		    if ($form->isValid()) {				$this->prepareData($user);//				$this->flashMessenger()->addMessage($user->getUsrEmail());				$this->entityManager->persist($user);                $this->entityManager->flush();                $this->entityManager->refresh($user);                $this->forward()->dispatch('DGIModule\Controller\Email', ['action' => 'email-validation', 'id'=>$user->getUsrUUID(), 'email' => true]);                $viewModel->setTemplate('dgi-module/user-registration/user-registration-success.phtml');				return $viewModel;			}				}		$viewModel->setVariables([		        'form' => $form,		    ]);		return $viewModel;			}    /**     * @return ViewModel     */    public function administrationRegistrationAction()    {        /** @var $request \Zend\Http\Request */        $request = $this->getRequest();        $viewModel = new ViewModel();        $terminal = $request->isXmlHttpRequest();        $viewModel->setTerminal($terminal);                        if (!$this->config['demodyne']['registration']['administration']['allow']) {            $viewModel->setTemplate('dgi-module/user-registration/registration-closed.phtml');            return $viewModel;        }        $lang = $this->params('lang', 'en');        $languages = $this->entityManager->getRepository('DGIModule\Entity\Language')->getLanguages();        $currentLanguage = $this->entityManager->getRepository('DGIModule\Entity\Language')->findOneBy(['langId' => $this->translator->getLocale()]);        $user = new User();        $user->setAdmin(new Administration());        $form = new RegisterAdministrationForm($this->entityManager, $this->translator);        $form->setHydrator(new DoctrineHydrator($this->entityManager,'DGIModule\Entity\User'));        $form->bind($user);        $request = $this->getRequest();        if ($request->isPost()) {            $form->setInputFilter(new AdministrationRegistrationFilter($this->entityManager));            $form->setData($request->getPost());            if ($form->isValid()) {                $this->prepareData($user);                $user->setUsrlId($this->config['demodyne']['account']['type']['administration']);                if ($form->get('admin')->get('adminLevel')->getValue()==$this->config['demodyne']['level']['region']) {                }                $this->entityManager->persist($user);                $this->entityManager->flush();                $this->entityManager->refresh($user);                $this->forward()->dispatch('DGIModule\Controller\Email', ['action' => 'email-validation', 'id'=>$user->getUsrUUID(), 'email' => true]);                $viewModel->setTemplate('dgi-module/user-registration/user-registration-success.phtml');            }            else {                $postalcode = $form->get('usrPostalcode')->getValue();                $country = $form->get('country')->getValue();                $cities = $this->entityManager->getRepository('DGIModule\Entity\City')->findBy(['cityPostalcode'=>$postalcode, 'country' => $country]);                $cityList = [];                foreach ($cities as $city) {                    $cityList[$city->getCityId()] = $city->getCityName();                }                $form->get('city')->setValueOptions($cityList);                $form->get('city')->setEmptyOption(null);                if ($form->get('admin')->get('adminLevel')->getValue()==$this->config['demodyne']['level']['city']) {                    $postalcode = $form->get('admin')->get('adminPostalcode')->getValue();                    $country = $form->get('country')->getValue();                    $cities = $this->entityManager->getRepository('DGIModule\Entity\City')->findBy(['cityPostalcode'=>$postalcode, 'country' => $country]);                    $cityList = [];                    foreach ($cities as $city) {                        $cityList[$city->getCityId()] = $city->getCityName();                    }                    $form->get('admin')->get('adminCity')->setValueOptions($cityList);                    $form->get('admin')->get('adminCity')->setEmptyOption(null);                }            }        }        return new ViewModel(            array('form' => $form,                'lang' => $lang,                'languages' => $languages,                'currentLanguage' => $currentLanguage));    }    /**     * @return JsonModel|ViewModel     */    public function facebookRegistrationAction()	{	    unset($_SESSION['guest']);	    	    $fb = new Facebook([	        'app_id' => $this->config['facebook']['app_id'],	        'app_secret' => $this->config['facebook']['app_secret'],	        'default_graph_version' => 'v2.7',	    ]);	    	    $viewModel = new ViewModel();	    $terminal = $this->getRequest()->isXmlHttpRequest();	    $viewModel->setTerminal($terminal);	    	    if (!$this->config['demodyne']['registration']['user']['allow']) {            $viewModel->setTemplate('dgi-module/user-registration/'.$terminal?'registration-closed-dialog.phtml':'registration-closed.phtml');	        return $viewModel;	    }	    $form = new AddUserFacebookForm($this->entityManager, $this->translator);		    $form->setHydrator(new DoctrineHydrator($this->entityManager,'DGIModule\Entity\User'));	    $request = $this->getRequest();	    	    if (!$request->isPost()) {	        $helper = $fb->getJavaScriptHelper();	        	        try {	            $accessToken = $helper->getAccessToken();	            	            	            $extend_url = "https://graph.facebook.com/oauth/access_token?client_id=".$this->config['facebook']['app_id']	                         ."&client_secret=".$this->config['facebook']['app_secret']	                         ."&grant_type=fb_exchange_token&fb_exchange_token=".$accessToken;	            	            $resp = file_get_contents($extend_url);                $output = json_decode($resp, true);	            	            $accessToken = $output['access_token'];	            	        } catch(FacebookResponseException $e) {//	            echo 'Graph returned an error: ' . $e->getMessage();	            return $this->forward()->dispatch('DGIModule\Controller\Error',                    [                        'action' => 'error', 'dialog'=>true,                        'message' => $this->translator->translate('Error accessing your Facebook account. Please try again later.', 'DGIModule')]);	        } catch(FacebookSDKException $e) {	            /* When validation fails or other local issues*///	            echo 'Facebook SDK returned an error: ' . $e->getMessage();	            return $this->forward()->dispatch('DGIModule\Controller\Error',                    ['action' => 'error', 'dialog'=>true,                        'message' => $this->translator->translate('Error accessing your Facebook account. Please try again later.', 'DGIModule')]);	        } catch (\Exception $e) {	            return $this->forward()->dispatch('DGIModule\Controller\Error',                    ['action' => 'error', 'dialog'=>true,                    'message' => $this->translator->translate('Error accessing your Facebook account. Please try again later.', 'DGIModule')]);	        }	        	        if (! isset($accessToken)) {//	            echo 'No cookie set or no OAuth data could be obtained from cookie.';	            return $this->forward()->dispatch('DGIModule\Controller\Error',                    ['action' => 'error', 'dialog'=>true,                    'message' => $this->translator->translate('Error accessing your Facebook account. Please try again later.', 'DGIModule')]);	        }	                    $_SESSION['fb_access_token'] = (string) $accessToken;	        	    }	    	    try {	        $response = $fb->get('/me?fields=id,name,email', $_SESSION['fb_access_token']);	    } catch(FacebookResponseException $e) {            return $this->forward()->dispatch('DGIModule\Controller\Error',                ['action' => 'error', 'dialog'=>true,                'message' => $this->translator->translate('Error accessing your Facebook account. Please try again later.', 'DGIModule')]);	    } catch(FacebookSDKException $e) {            return $this->forward()->dispatch('DGIModule\Controller\Error',                ['action' => 'error', 'dialog'=>true,                'message' => $this->translator->translate('Error accessing your Facebook account. Please try again later.', 'DGIModule')]);	    }	    	    $fbUser = $response->getGraphUser();	    	    $form->get('usrEmail')->setValue($fbUser['email']);	     	    $viewModel->setVariables([	        'name' => $fbUser['name'],	        'fid' => $fbUser['id']	    ]);		    if ($request->isPost()) {	        $user = new User();	        $form->bind($user);	        $form->setData($request->getPost());	        if ($form->isValid()) {	            $user->setUsrPassword('')	                 ->setFbId($fbUser['id'])	                 ->setFbAccessToken($_SESSION['fb_access_token']);                 	            $this->prepareData($user);	            	            $user->setUsrActive(1);	            $user->setUsrEmailConfirmed(1);	            	            /* save user picture */	            $url = 'http://graph.facebook.com/'.$fbUser['id'].'/picture?type=normal';	            $data = file_get_contents($url);	            $avatar = '/img/avatar/'.$fbUser['id'].'.jpg';	            $fileName = getcwd() . '/public'.$avatar;	            $file = fopen($fileName, 'w+');	            fputs($file, $data);	            fclose($file);	            	            $user->setUsrPicture($avatar);	            	            $this->entityManager->persist($user);	            $this->entityManager->flush();	            return new JsonModel(array('success' => true));	        }	    }		    $viewModel->setVariables([	        'form' => $form,	    ]);	    return $viewModel;		}		public function userCityAction()	{	    	    $user = $this->identity();	    	    $viewModel = new ViewModel();	    $viewModel->setTerminal($this->getRequest()->isXmlHttpRequest());	     	    $form = new AddUserCityForm($this->entityManager, $this->translator);		    if ($user->getFbId()) { /*load city from facebook*/	        $fb = new Facebook([	            'app_id' => $this->config['facebook']['app_id'],	            'app_secret' => $this->config['facebook']['app_secret'],	            'default_graph_version' => 'v2.7',	        ]);	        	        $fbAccess = true;	        	        try {	            $response = $fb->get('/me?fields=location', $user->getFbAccessToken());	        } catch(FacebookResponseException $e) {	            $fbAccess = false;	        } catch(FacebookSDKException $e) {                $fbAccess = false;	        }	        	        $location = $response->getGraphPage()->getLocation();	        	        if ($fbAccess && $location) {    	            	        $location = explode(', ', $location['name']);    	            	        $form = new AddUserCityForm($this->entityManager, $this->translator, $location);    	            	        $city = $this->entityManager->getRepository('DGIModule\Entity\City')->searchCity($location[0], $location[1], $location[2]);    	            	        if ($city) {    	            $city = $city[0];    	            $form->get('usrPostalcode')->setValue($city->getCityPostalcode());    	            $viewModel->setVariables([    	                'facebookLocation' => true,    	            ]);    	        }	        }	    }	    	    $form->setHydrator(new DoctrineHydrator($this->entityManager,'DGIModule\Entity\User'));	    $request = $this->getRequest();		    if ($request->isPost()) {	        $form->bind($user);	        $form->setData($request->getPost());	        if ($form->isValid()) {	            $city = $this->params()->fromPost('city');	            $city = $this->entityManager->getRepository('DGIModule\Entity\City')->findOneBy(array('cityId' => $city));	            $user->setUsrCountry($city->getCountry()->getCountryCode());	            $user->setUsrCity($city->getCityName());	            $this->entityManager->merge($user);	            $this->entityManager->flush();	            return new JsonModel(array('success' => true));	        }	    }		    $viewModel->setVariables([	        'form' => $form,	    ]);	    return $viewModel;	}		public function userNameAction()	{	     	    $user = $this->identity();	     	    $viewModel = new ViewModel();	    $viewModel->setTerminal($this->getRequest()->isXmlHttpRequest());		    $form = new AddUserNameForm($this->translator);	    	    $form->get('usrBirthday')->setValueOptions($this->getBirthyear());	     		    if ($user->getFbId()) { /*load city from facebook*/	        $fb = new Facebook([	            'app_id' => $this->config['facebook']['app_id'],	            'app_secret' => $this->config['facebook']['app_secret'],	            'default_graph_version' => 'v2.7',	        ]);	        	        $fbAccess = true;	         	        try {	            $response = $fb->get('/me?fields=first_name,last_name,birthday', $user->getFbAccessToken());	        } catch(FacebookResponseException $e) {	           $fbAccess = false;	        } catch(FacebookSDKException $e) {	           $fbAccess = false;	        }	         	        if ($fbAccess) {    	        $fbUser = $response->getDecodedBody();    	             	        $form->get('usrFirstname')->setValue($fbUser['first_name']);    	        $form->get('usrLastname')->setValue($fbUser['last_name']);    	        $birthday = explode('/',$fbUser['birthday']);    	        if (isset($birthday[2])) {    	           $form->get('usrBirthday')->setValue($birthday[2]);    	        }	        }	    }	     	    $form->setHydrator(new DoctrineHydrator($this->entityManager,'DGIModule\Entity\User'));	    $request = $this->getRequest();		    if ($request->isPost()) {	        $form->bind($user);	        $form->setData($request->getPost());	        if ($form->isValid()) {	            $this->entityManager->merge($user);	            $this->entityManager->flush();	            return $this->redirect()->toRoute('home/user-register', array('action'=>'user-finish'));	        }	    }	    $viewModel->setVariables([	        'form' => $form,	        'user' => $user	    ]);	    return $viewModel;		}		public function userFinishAction()	{		    $user = $this->identity();		    $viewModel = new ViewModel();	    $viewModel->setTerminal($this->getRequest()->isXmlHttpRequest());	    $viewModel->setVariables([	        'user' => $user	    ]);	    return $viewModel;		}		private function getBirthyear() {	    $currentYear = (int)date('Y');	    $year_list = array();	    $year_list[0]=  $this->translator->translate("select birthyear", 'DGIModule');	    for ($year=$currentYear-15;$year>=$currentYear-100;$year--) { 	        $year_list[$year]=$year;	    }	    return $year_list;	}		public function pleaseRegisterAction()	{	    $viewModel = new ViewModel();	    $viewModel->setTerminal(true);	    return $viewModel;	}	public function pleaseRegisterUserAction()	{	    $viewModel = new ViewModel();	    $viewModel->setTerminal(true);	    return $viewModel;	}		public function partnerRegistrationAction()	{	    if (!$this->config['demodyne']['registration']['partner']['allow']) {	        $viewModel = new ViewModel();	        $viewModel->setTemplate('dgi-module/user-registration/registration-closed.phtml');	        return $viewModel;	    }	    $user = new User();	    $user->setPartner(new Partner());	    $form = new PartnerRegistrationForm($this->entityManager);	    	    $form->get('submit')->setValue('Register');	    $form->setHydrator(new DoctrineHydrator($this->entityManager,'DGIModule\Entity\User'));	    $france = $this->entityManager->getRepository('DGIModule\Entity\Country')->findOneBy(array('countryId' => 73)); 	    $form->get('country')->setValue($france);	    $form->bind($user);	    $request = $this->getRequest();	    if ($request->isPost()) {            $form->setInputFilter(new PartnerRegistrationFilter($this->entityManager));	        $form->setData($request->getPost());	        if ($form->isValid()) {	            $this->prepareData($user);	            $user->setUsrlId(3); /* partner type */                /// @todo send confirmation email	            $this->flashMessenger()->addMessage($user->getUsrEmail());	            $this->entityManager->persist($user);	            $this->entityManager->flush();	            return $this->redirect()->toRoute('home/user-register', array('action'=>'registration-success'));	        }	    }	    return new ViewModel(array('form' => $form));	}	/**	 * Shows the generated captcha image	 * 	 * @return \Zend\Stdlib\ResponseInterface     */	public function generateAction()	{	    $response = $this->getResponse();	    $response->getHeaders()->addHeaderLine('Content-Type', "image/png");	    $id = $this->params('id', false);	    if ($id) {	        $image = './public/img/captcha/' . $id;	        if (file_exists($image) !== false) {	            $imagegetcontent = @file_get_contents($image);	            $response->setStatusCode(200);	            $response->setContent($imagegetcontent);	            if (file_exists($image) == true) {	                unlink($image);	            }	        }	    }	    return $response;	}		/**	 * Show the registration success message 	 * 	 * @return \Zend\View\Model\ViewModel	 */	public function registrationSuccessAction()	{		$usr_email = null;		$flashMessenger = $this->flashMessenger();		if ($flashMessenger->hasMessages()) {			foreach($flashMessenger->getMessages() as $key => $value) {				$usr_email .=  $value;			}		}		return new ViewModel(array('usr_email' => $usr_email));	}			/**	 * Email confirmation. If administration account, two step account confirmation 	 * 	 * @return mixed|\Zend\View\Model\ViewModel	 */	public function confirmEmailAction()	{		$token = $this->params()->fromRoute('id');		$follow = $this->params()->fromRoute('follow', null);		$viewModel = new ViewModel(array('token' => $token));        $user = $this->entityManager->getRepository('DGIModule\Entity\User')->findOneBy(array('usrRegistrationToken' => $token));        if (!$user) {            return $this->forward()->dispatch('DGIModule\Controller\Error', array('action' => 'access-denied'));        }        $this->auth->clearIdentity();        $sessionManager = new SessionManager();        $sessionManager->forgetMe();        unset($_SESSION['level']);        unset($_SESSION['inbox']);        unset($_SESSION['administrationDashboard']);        unset($_SESSION['measure']);        unset($_SESSION['event']);        unset($_SESSION['news']);        unset($_SESSION['newsletter']);        unset($_SESSION['partnerDashboard']);        unset($_SESSION['proposal']);        unset($_SESSION['program']);        unset($_SESSION['banner']);        unset($_SESSION['session']);        unset($_SESSION['admin']);        unset($_SESSION['blog']);        unset($_SESSION['fb_access_token']);        $this->translator->setLocale($user->getLang()->getLangId());        if ($user->getUsrEmailConfirmed()) {            $viewModel->setTemplate('dgi-module/user-registration/confirm-email-past.phtml');        }        else {            $user->setUsrEmailConfirmed(1);            if (!$user->isAdministration()) {                $user->setUsrActive(1);            }            if ($user->isAdministration()) {                $this->forward()->dispatch('DGIModule\Controller\Email', ['action' => 'activate-administration-account', 'id' => $user->getUsrUUID(), 'email' => true]);                $viewModel->setTemplate('dgi-module/user-registration/confirm-email-administration.phtml');                $viewModel->setVariables([                    'user' => $user,                ]);            } else {                $this->auth->getStorage()->write($user);                $user->setUsrLastLoginDate($user->getUsrCurrentLoginDate())                    ->setUsrCurrentLoginDate(new \DateTime());                $session = new Container('language');                $session->language = $user->getLang()->getLangId();            }            $this->entityManager->persist($user);            $this->entityManager->flush();        }        if ($follow && $follow=='referendum') {            $viewModel->setTemplate('dgi-module/referendum/confirm-email.phtml');        }		return $viewModel;	}		/**	 * Second step administration account validation	 * 	 * @return \Zend\View\Model\ViewModel	 */	public function activateAdministrationAccountAction()	{        /** @var \DGIModule\Entity\User $user */        $user = $this->identity();        if (!$user || !$user->isDemodyneAdmin()) {            return $this->forward()->dispatch('DGIModule\Controller\Error', array('action' => 'access-denied'));        }	    $adminUUID = $this->params('id');	    if (!$adminUUID) {	        return $this->forward()->dispatch('DGIModule\Controller\Error', array('action' => 'access-denied'));	    }	    $admin = $this->entityManager->getRepository('DGIModule\Entity\User')->findOneBy(array('usrUUID' => $adminUUID));	    /* event not exists or user not owner */	    if (!$admin || !$admin->isAdministration()) {	        return $this->forward()->dispatch('DGIModule\Controller\Error', array('action' => 'access-denied'));	    }	    $viewModel = new ViewModel();	    $request = $this->getRequest();	    if ($request->isPost()){	        $admin->setUsrActive(1);			$this->entityManager->persist($admin);			$this->entityManager->flush();			// send email to administration            $this->forward()->dispatch('DGIModule\Controller\Email', ['action' => 'administration-account-activated', 'id'=>$admin->getUsrUUID(), 'email' => true]);            $this->layout('layout/layout');	        $viewModel->setVariables([	           'validated' => true,	       ]);	    }	   	    $viewModel->setTerminal($this->getRequest()->isXmlHttpRequest());	    $viewModel->setVariables([	        'admin' => $admin,	    ]);	    return $viewModel;	}		/**	 * Password reinitialisation 	 * 	 * @return \Zend\Http\Response|\Zend\View\Model\ViewModel	 */	public function forgottenPasswordAction()	{		$form = new ForgottenPasswordForm($this->entityManager, $this->translator);		$request = $this->getRequest();        if ($request->isPost()) {			$form->setData($request->getPost());			 if ($form->isValid()) {				$data = $form->getData();				$usrEmail = $data['usrEmail'];                 /** @var \DGIModule\Entity\User $user */                 $user = $this->entityManager->getRepository('DGIModule\Entity\User')->findOneBy(array('usrEmail' => $usrEmail, 'usrDeletedDate' => null));								if ($user) {                    $this->translator->setLocale($user->getLang()->getLangId());                    $password = $this->generatePassword();                    $passwordHash = $this->encriptPassword($this->getStaticSalt(), $password, $user->getUsrPasswordSalt());                    $this->flashMessenger()->addMessage($usrEmail);                    $user->setUsrPassword($passwordHash);                    $this->entityManager->persist($user);                    $this->entityManager->flush();                    $this->forward()->dispatch('DGIModule\Controller\Email', ['action' => 'change-password', 'id'=>$user->getUsrUUID(), 'msg' => $password, 'email' => true]);                }                return $this->redirect()->toRoute('home/user-register', array('controller'=>'registration', 'action'=>'password-change-success'));			}							}				return new ViewModel(array('form' => $form));				}		/**	 * Password reinitialisation success	 * 	 * @return \Zend\View\Model\ViewModel	 */	public function passwordChangeSuccessAction()	{        $usr_email = '';		$flashMessenger = $this->flashMessenger();		if ($flashMessenger->hasMessages()) {			foreach($flashMessenger->getMessages() as $key => $value) {				$usr_email .=  $value;			}		}		return new ViewModel(array('usr_email' => $usr_email));	}			/**	 * Prepare the data for user registration	 * 	 * @param \DGIModule\Entity\User $user	 * @return \DGIModule\Entity\User	 */	public function prepareData($user)	{		$user->setUsrActive(0);		$user->setUsrEmailConfirmed(0);		$user->setUsrPasswordSalt($this->generateDynamicSalt());						$user->setUsrPassword($this->encriptPassword(								$this->getStaticSalt(), 								$user->getUsrPassword(), 								$user->getUsrPasswordSalt()		));		$user->setUsrlId($this->config['demodyne']['account']['type']['member']);		$session = new Container('language');		$language = $this->entityManager->getRepository('DGIModule\Entity\Language')->findOneBy(['langId'=>$session->language]);		$user->setLang($language);        $now =  new \DateTime();		$user->setUsrPicture('/img/avatar/avatar.png');		$user->setUsrRegistrationDate($now);		$user->setUsrRegistrationToken(md5(uniqid(mt_rand(), true))); 		$user->setUsrCurrentLoginDate($now);		$user->setUsrUUID(Uuid::uuid4());				$cnt = new Counters();		$cnt->setCntUpdatedDate(new \DateTime());		$user->setCounters($cnt);		$digest = new UserDigest();		$user->setDigest($digest);				return $user;	}		/** 	 * Generate dynamic salt for password encryption 	 * 	 * @return string	 */    public function generateDynamicSalt()    {		$dynamicSalt = '';		for ($i = 0; $i < 50; $i++) {			$dynamicSalt .= chr(rand(33, 126));		}        return $dynamicSalt;    }        /**     * Get the static salt for password encryption from local configuration     *      * @return string     */    public function getStaticSalt()    {		$staticSalt = $this->config['demodyne']['registration']['password_static_salt'];        return $staticSalt;    }        /**     *  Password encryption     *       * @param string $staticSalt     * @param string $password     * @param string $dynamicSalt     * @return string     */    public function encriptPassword($staticSalt, $password, $dynamicSalt)    {		return $password = md5($staticSalt . $password . $dynamicSalt);    }        /**     * Generate a new password for password reset     *      * @param int $l     * @param int $c     * @param int $n     * @param int $s     * @return boolean|string     */	public function generatePassword($l = 8, $c = 0, $n = 0, $s = 0) {		 $count = $c + $n + $s;		 $out = '';		 if(!is_int($l) || !is_int($c) || !is_int($n) || !is_int($s)) {			  trigger_error('Argument(s) not an integer', E_USER_WARNING);			  return false;		 }		 elseif($l < 0 || $l > 20 || $c < 0 || $n < 0 || $s < 0) {			  trigger_error('Argument(s) out of range', E_USER_WARNING);			  return false;		 }		 elseif($c > $l) {			  trigger_error('Number of password capitals required exceeds password length', E_USER_WARNING);			  return false;		 }		 elseif($n > $l) {			  trigger_error('Number of password numerals exceeds password length', E_USER_WARNING);			  return false;		 }		 elseif($s > $l) {			  trigger_error('Number of password capitals exceeds password length', E_USER_WARNING);			  return false;		 }		 elseif($count > $l) {			  trigger_error('Number of password special characters exceeds specified password length', E_USER_WARNING);			  return false;		 }		 $chars = "abcdefghijklmnopqrstuvwxyz";		 $caps = strtoupper($chars);		 $nums = "0123456789";		 $syms = "!@#$%^&*()-+?";		 for($i = 0; $i < $l; $i++) {			  $out .= substr($chars, mt_rand(0, strlen($chars) - 1), 1);		 }		 if($count) {			  $tmp1 = str_split($out);			  $tmp2 = array();			  for($i = 0; $i < $c; $i++) {				   array_push($tmp2, substr($caps, mt_rand(0, strlen($caps) - 1), 1));			  }			  for($i = 0; $i < $n; $i++) {				   array_push($tmp2, substr($nums, mt_rand(0, strlen($nums) - 1), 1));			  }			  for($i = 0; $i < $s; $i++) {				   array_push($tmp2, substr($syms, mt_rand(0, strlen($syms) - 1), 1));			  }			  $tmp1 = array_slice($tmp1, 0, $l - $count);			  $tmp1 = array_merge($tmp1, $tmp2);			  shuffle($tmp1);			  $out = implode('', $tmp1);		 }		 return $out;	}		/**	 * Activation remainder for user accounts not activated within 5 days from registration	 */	public function activationRemainderAction() {	     	    if (!empty($_SERVER['HTTP_CLIENT_IP'])) {	        $ip = $_SERVER['HTTP_CLIENT_IP'];	    } elseif (!empty($_SERVER['HTTP_X_FORWARDED_FOR'])) {	        $ip = $_SERVER['HTTP_X_FORWARDED_FOR'];	    } else {	        $ip = $_SERVER['REMOTE_ADDR'];	    }	    if ($ip!=$this->config['demodyne']['cron']['ip']) {	        printf('You don\'t have access to this ressource');	        exit();	    }	    $users = $this->entityManager->getRepository('DGIModule\Entity\User')->findBy(array('usrActive' => 0, 'usrEmailConfirmed' => 0));	    $list = [];	    foreach ($users as $user) {	        	        $dDiff = $user->getUsrRegistrationDate()->diff(new \DateTime());	        if ($dDiff->days == 5) {                $this->forward()->dispatch('DGIModule\Controller\Email', ['action' => 'activation-remainder', 'id'=>$user->getUsrUUID(), 'email' => true]);    	        $list[] = [                    'username' => $user->getUsrName(),                    'email' => $user->getUsrEmail(),                    'registrationDate' => $user->getUsrRegistrationDate()->format('Y-m-d')                ];	        }	    }        return new JsonModel([            'count' => count($list),            'users' => $list        ]);	     	}}