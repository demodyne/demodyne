<?php/** * @link      https://github.com/demodyne/demodyne * @copyright Copyright (c) 2015-2016 Demodyne (https://www.demodyne.org) * @license   http://www.gnu.org/licenses/agpl.html GNU Affero General Public License */namespace DGIModule\Controller;use Zend\Mvc\Controller\AbstractActionController;use Zend\View\Model\ViewModel;use Zend\Session\Container;use DGIModule\Entity\User;use DoctrineModule\Stdlib\Hydrator\DoctrineObject as DoctrineHydrator;use DGIModule\Form\UserRegistrationForm;use DGIModule\Form\UserRegistrationFilter;use DGIModule\Form\PartnerRegistrationForm;use DGIModule\Form\PartnerRegistrationFilter;use DGIModule\Form\AdministrationRegistrationForm;use DGIModule\Form\AdministrationRegistrationFilter;use DGIModule\Form\ForgottenPasswordForm;use DGIModule\Form\ForgottenPasswordFilter;use Zend\Mail\Message;  use Zend\Mime\Message as MimeMessage;use Zend\Mime\Part as MimePart;use DGIModule\Entity\Partner;use DGIModule\Entity\Administration;use DGIModule\Entity\Counters;class UserRegistrationController extends AbstractActionController{    protected $translator;    protected $entityManager;        public function userRegistrationAction()	{	    unset($_SESSION['guest']);	    $config = $this->getServiceLocator()->get('Config');	    if (!$config['demodyne']['registration']['user']['allow']) {	        $viewmodel = new ViewModel();	        $viewmodel->setTemplate('dgi-module/user-registration/registration-closed.phtml');	        return $viewmodel;	    }	    $lang = $this->params('lang', 'en');		$this->entityManager = $this->getServiceLocator()->get('doctrine.entitymanager.orm_default');				$user = new User();		$form = new UserRegistrationForm($this->entityManager);		$form->get('submit')->setValue('Register');		$form->get('usrBirthday')->setValueOptions($this->getBirthyear());		$form->setHydrator(new DoctrineHydrator($this->entityManager,'DGIModule\Entity\User'));			$france = $this->entityManager->getRepository('DGIModule\Entity\Country')->findOneBy(array('countryId' => 73)); // france country by default  		$languages = $this->entityManager->getRepository('DGIModule\Entity\Language')->getLanguages();		$currentLanguage = $this->entityManager->getRepository('DGIModule\Entity\Language')->findOneBy(['langId' => $this->getServiceLocator()->get('translator')->getTranslator()->getLocale()]);		$form->get('country')->setValue($france);		$form->bind($user);						$request = $this->getRequest();                if ($request->isPost()) {			$form->setInputFilter(new UserRegistrationFilter($this->getServiceLocator()));			$form->setData($request->getPost());			 if ($form->isValid()) {				$this->prepareData($user);				$this->sendConfirmationEmail($user);				$this->flashMessenger()->addMessage($user->getUsrEmail());				$this->entityManager->persist($user);				$this->entityManager->flush();								return $this->redirect()->toRoute('home/user-register', array('action'=>'registration-success'));								}				}		return new ViewModel(		    array(		        'form' => $form,		        'lang' => $lang,		        'languages' => $languages,		        'currentLanguage' => $currentLanguage		    ));	}		private function getBirthyear() {	    $currentYear = (int)date('Y');	    $year_list = array();	    $year_list[0]=  _("select birthyear");	    for ($year=$currentYear-15;$year>=$currentYear-100;$year--) { 	        $year_list[$year]=$year;	    }	    return $year_list;	}		public function pleaseRegisterAction()	{	    $viewModel = new ViewModel();	    $viewModel->setTerminal($this->getRequest()->isXmlHttpRequest());	    return $viewModel;	}		public function partnerRegistrationAction()	{	    $config = $this->getServiceLocator()->get('Config');	    if (!$config['demodyne']['registration']['partner']['allow']) {	        $viewmodel = new ViewModel();	        $viewmodel->setTemplate('dgi-module/user-registration/registration-closed.phtml');	        return $viewmodel;	    }	    $this->entityManager = $this->getServiceLocator()->get('doctrine.entitymanager.orm_default');	    $user = new User();	    $user->setPartner(new Partner());	    $form = new PartnerRegistrationForm($this->entityManager);	    	    $form->get('submit')->setValue('Register');	    $form->setHydrator(new DoctrineHydrator($this->entityManager,'DGIModule\Entity\User'));	    $france = $this->entityManager->getRepository('DGIModule\Entity\Country')->findOneBy(array('countryId' => 73)); //	    $form->get('country')->setValue($france);	    $form->bind($user);	    $request = $this->getRequest();	    if ($request->isPost()) {            $form->setInputFilter(new PartnerRegistrationFilter($this->getServiceLocator()));	        $form->setData($request->getPost());	        if ($form->isValid()) {	            $this->prepareData($user);	            $user->setUsrlId(3); // partner type	            $this->sendConfirmationEmail($user);	            $this->flashMessenger()->addMessage($user->getUsrEmail());	            $this->entityManager->persist($user);	            $this->entityManager->flush();	            return $this->redirect()->toRoute('home/user-register', array('action'=>'registration-success'));	        }	    }	    return new ViewModel(array('form' => $form));	}	public function administrationRegistrationAction()	{	    $config = $this->getServiceLocator()->get('Config');	    if (!$config['demodyne']['registration']['administration']['allow']) {	        $viewmodel = new ViewModel();	        $viewmodel->setTemplate('dgi-module/user-registration/registration-closed.phtml');	        return $viewmodel;	    }	    $lang = $this->params('lang', 'en');	    $this->entityManager = $this->getServiceLocator()->get('doctrine.entitymanager.orm_default');	    $languages = $this->entityManager->getRepository('DGIModule\Entity\Language')->getLanguages();	    $currentLanguage = $this->entityManager->getRepository('DGIModule\Entity\Language')->findOneBy(['langId' => $this->getServiceLocator()->get('translator')->getTranslator()->getLocale()]);	    	    $user = new User();	    $user->setAdmin(new Administration());	    $form = new AdministrationRegistrationForm($this->entityManager);	    $form->setHydrator(new DoctrineHydrator($this->entityManager,'DGIModule\Entity\User'));	    $form->bind($user);	    $request = $this->getRequest();	    if ($request->isPost()) {	        $form->setInputFilter(new AdministrationRegistrationFilter($this->getServiceLocator()));	        $form->setData($request->getPost());	        if ($form->isValid()) {	            $this->prepareData($user);	            $user->setUsrlId(4); // administration type	            $this->sendConfirmationEmail($user);	            $this->flashMessenger()->addMessage($user->getUsrEmail());	            $this->entityManager->persist($user);	            $this->entityManager->flush();	            return $this->redirect()->toRoute('home/administration-register', array('action'=>'registration-success'));	        }	        else {	            $postalcode = $form->get('usrPostalcode')->getValue();	            $country = $form->get('country')->getValue();	            $cities = $this->entityManager->getRepository('DGIModule\Entity\City')->findBy(['cityPostalcode'=>$postalcode, 'country' => $country]);	            $cityList = [];	            foreach ($cities as $city) {	                $cityList[$city->getCityId()] = $city->getCityName();	            }	            $form->get('city')->setValueOptions($cityList);	            $form->get('city')->setEmptyOption(null);	            $config = $this->getServiceLocator()->get('Config');	            if ($form->get('admin')->get('adminLevel')->getValue()==$config['demodyne']['level']['city']) {	                $postalcode = $form->get('admin')->get('adminPostalcode')->getValue();	                $country = $form->get('country')->getValue();	                $cities = $this->entityManager->getRepository('DGIModule\Entity\City')->findBy(['cityPostalcode'=>$postalcode, 'country' => $country]);	                $cityList = [];	                foreach ($cities as $city) {	                    $cityList[$city->getCityId()] = $city->getCityName();	                }	                $form->get('admin')->get('adminCity')->setValueOptions($cityList);	                $form->get('admin')->get('adminCity')->setEmptyOption(null);	            }	        }	    }	    return new ViewModel(	           array('form' => $form, 	           'lang' => $lang, 	           'languages' => $languages,		       'currentLanguage' => $currentLanguage));	}		/**	 * Shows the generate captcha image 	 * 	 * @return image	 */	public function generateAction()	{	    $response = $this->getResponse();	    $response->getHeaders()->addHeaderLine('Content-Type', "image/png");	    $id = $this->params('id', false);	    if ($id) {	        $image = './public/img/captcha/' . $id;	        if (file_exists($image) !== false) {	            $imagegetcontent = @file_get_contents($image);	            $response->setStatusCode(200);	            $response->setContent($imagegetcontent);	            if (file_exists($image) == true) {	                unlink($image);	            }	        }	    }	    return $response;	}		/**	 * Show the registration success message 	 * 	 * @return \Zend\View\Model\ViewModel	 */	public function registrationSuccessAction()	{		$usr_email = null;		$flashMessenger = $this->flashMessenger();		if ($flashMessenger->hasMessages()) {			foreach($flashMessenger->getMessages() as $key => $value) {				$usr_email .=  $value;			}		}		return new ViewModel(array('usr_email' => $usr_email));	}			/**	 * Email confirmation. If administration account, two step account confirmation 	 * 	 * @return mixed|\Zend\View\Model\ViewModel	 */	public function confirmEmailAction()	{		$token = $this->params()->fromRoute('id');		$viewModel = new ViewModel(array('token' => $token));		try {			$this->entityManager = $this->getServiceLocator()->get('doctrine.entitymanager.orm_default');			$user = $this->entityManager->getRepository('DGIModule\Entity\User')->findOneBy(array('usrRegistrationToken' => $token)); // 			if (!$user) {			    return $this->forward()->dispatch('DGIModule\Controller\Error', array('action' => 'access-denied'));			}			$user->setUsrEmailConfirmed(1);			if (!$user->isAdministration()) {			     $user->setUsrActive(1);			}			$this->entityManager->persist($user);			$this->entityManager->flush();						if ($user->isAdministration()) {    			$transport = $this->getServiceLocator()->get('mail.transport');    			$message = new Message();    				    			$adminLevel = $user->getAdmin()->getAdminLevel();    			$config = $this->getServiceLocator()->get('Config');    			$adminLevelConfig = $config['demodyne']['level'];    				    			$htmlMessage = 'The Administration account <strong>'.$user->getUsrName().'</strong> for '.    			    ($adminLevel == $adminLevelConfig['country']?'Country '.$user->getCountry()->getCountryName():    			        ($adminLevel == $adminLevelConfig['region']?'Region '.$user->getAdmin()->getAdminRegion()->getRegionName():    			            'City '.$user->getAdmin()->getAdminCity()->getCityName())).    			            ' has validated his email! You can <a href="https://dev.demodyne.org'.$this->url()->fromRoute('home/user-register', array('action'=>'activate-administration-account', 'id' => $user->getUsrUUID())).'">validate this account</a> now . <br><br>Thank you,<br>The Demodyne Team';    	        	    	        $html = new MimePart($htmlMessage);    	        $html->type = "text/html";    	        	    	        $body = new MimeMessage();    	        $body->setParts(array($html));    	        	    	        $this->getRequest()->getServer();  //Server vars    	        $message->addTo('validation@demodyne.org')            	        ->addFrom('validation@demodyne.org')            	        ->setSubject('Administration account email validated')            	        ->setBody($body);    	        $transport->send($message);    	            	        $viewModel->setVariables([    	            'user' => $user,    	        ]);			}					}		catch(\Exception $e) {			$viewModel->setTemplate('dgimodule/registration/confirm-email-error.phtml');		}		return $viewModel;	}		/**	 * Second step administration account validation	 * 	 * @return \Zend\View\Model\ViewModel	 */	public function activateAdministrationAccountAction()	{	    $user = $this->identity();	    $adminUUID = $this->params('id');	    // no parameter	    if (!$adminUUID) {	        return $this->forward()->dispatch('DGIModule\Controller\Error', array('action' => 'access-denied'));	    }	    $entityManager = $this->getServiceLocator()->get('doctrine.entitymanager.orm_default');	    $admin = $entityManager->getRepository('DGIModule\Entity\User')->findOneBy(array('usrUUID' => $adminUUID));	    // event not exists or user not owner	    $config = $this->getServiceLocator()->get('Config');	    if (!$admin || !$admin->isAdministration()) {	        return $this->forward()->dispatch('DGIModule\Controller\Error', array('action' => 'access-denied'));	    }	    $viewmodel = new ViewModel();	    $request = $this->getRequest();	    if ($request->isPost()){	        $admin->setUsrActive(1);			$entityManager->persist($admin);			$entityManager->flush();			$transport = $this->getServiceLocator()->get('mail.transport');			$message = new Message();						$adminLevel = $admin->getAdmin()->getAdminLevel();			$adminLevelConfig = $config['demodyne']['level'];						$htmlMessage = 'Welcome to DEMODYNE!<br><br>Your Administration account for <strong>'. 			                 ($adminLevel == $adminLevelConfig['country']?'Country '.$admin->getCountry()->getCountryName():    			                 ($adminLevel == $adminLevelConfig['region']?'Region '.$admin->getAdmin()->getAdminRegion()->getRegionName():    			                     'City '.$admin->getAdmin()->getAdminCity()->getCityName())).			               '</strong> has been validated! You can <a href="https://dev.demodyne.org'.$this->url()->fromRoute('home/login', array('action'=>'login')).			                 '">login now</a> as <strong>'.$admin->getUsrName().'</strong>. <br><br>Thank you,<br>The Demodyne Team';						$html = new MimePart($htmlMessage);			$html->type = "text/html";						$body = new MimeMessage();			$body->setParts(array($html));						$this->getRequest()->getServer();  //Server vars			$message->addTo($admin->getUsrEmail())        			->addFrom('validation@demodyne.org')        			->setSubject('DEMODYNE account validated')        			->setBody($body);			$transport->send($message);				        $viewmodel->setVariables([	           'validated' => true,	       ]);	    }	   	    //disable layout if request by Ajax	    $viewmodel->setTerminal($this->getRequest()->isXmlHttpRequest());	    $viewmodel->setVariables([	        'admin' => $admin,	    ]);	    return $viewmodel;	}		/**	 * Password reinitialisation 	 * 	 * @return \Zend\Http\Response|\Zend\View\Model\ViewModel	 */	public function forgottenPasswordAction()	{		$form = new ForgottenPasswordForm();		$form->get('submit')->setValue('Send');		$request = $this->getRequest();        if ($request->isPost()) {			$form->setInputFilter(new ForgottenPasswordFilter($this->getServiceLocator()));			$form->setData($request->getPost());			 if ($form->isValid()) {				$data = $form->getData();				$usrEmail = $data['usrEmail'];				$this->entityManager = $this->getServiceLocator()->get('doctrine.entitymanager.orm_default');				$user = $this->entityManager->getRepository('DGIModule\Entity\User')->findOneBy(array('usrEmail' => $usrEmail)); // 				$password = $this->generatePassword();				$passwordHash = $this->encriptPassword($this->getStaticSalt(), $password, $user->getUsrPasswordSalt());				$this->sendPasswordByEmail($usrEmail, $password);				$this->flashMessenger()->addMessage($usrEmail);				$user->setUsrPassword($passwordHash);				$this->entityManager->persist($user);				$this->entityManager->flush();				                return $this->redirect()->toRoute('home/user-register', array('controller'=>'registration', 'action'=>'password-change-success'));			}							}				return new ViewModel(array('form' => $form));				}		/**	 * Password reinitialisation success	 * 	 * @return \Zend\View\Model\ViewModel	 */	public function passwordChangeSuccessAction()	{		$usr_email = null;		$flashMessenger = $this->flashMessenger();		if ($flashMessenger->hasMessages()) {			foreach($flashMessenger->getMessages() as $key => $value) {				$usr_email .=  $value;			}		}		return new ViewModel(array('usr_email' => $usr_email));	}			/**	 * Prepare the data for user registration	 * 	 * @param unknown $user	 * @return unknown	 */	public function prepareData($user)	{		$user->setUsrActive(0);		$user->setUsrPasswordSalt($this->generateDynamicSalt());						$user->setUsrPassword($this->encriptPassword(								$this->getStaticSalt(), 								$user->getUsrPassword(), 								$user->getUsrPasswordSalt()		));		$user->setUsrlId(2);		$session = new Container('language');		$language = $this->entityManager->getRepository('DGIModule\Entity\Language')->findOneBy(['langId'=>$session->language]);		$user->setLang($language);        $now =  new \DateTime();		$user->setUsrPicture('/img/avatar/avatar.png');		$user->setUsrRegistrationDate($now);		$user->setUsrRegistrationToken(md5(uniqid(mt_rand(), true))); 		$user->setUsrEmailConfirmed(0);		$user->setUsrChangeCityDate($now);		$user->setUsrCurrentLoginDate($now);				$user->setCounters(new Counters());				return $user;	}		/** 	 * Generate dynamic salt for password encryption 	 * 	 * @return string	 */    public function generateDynamicSalt()    {		$dynamicSalt = '';		for ($i = 0; $i < 50; $i++) {			$dynamicSalt .= chr(rand(33, 126));		}        return $dynamicSalt;    }        /**     * Get the static salt for password encryption from local configuration     *      * @return string     */    public function getStaticSalt()    {		$staticSalt = '';		$config = $this->getServiceLocator()->get('Config');		$staticSalt = $config['demodyne']['registration']['password_static_salt'];		        return $staticSalt;    }        /**     *  Password encryption     *       * @param unknown $staticSalt     * @param unknown $password     * @param unknown $dynamicSalt     * @return string     */    public function encriptPassword($staticSalt, $password, $dynamicSalt)    {		return $password = md5($staticSalt . $password . $dynamicSalt);    }        /**     * Generate a new password for password reset     *      * @param number $l     * @param number $c     * @param number $n     * @param number $s     * @return boolean|string     */	public function generatePassword($l = 8, $c = 0, $n = 0, $s = 0) {		 // get count of all required minimum special chars		 $count = $c + $n + $s;		 $out = '';		 // sanitize inputs; should be self-explanatory		 if(!is_int($l) || !is_int($c) || !is_int($n) || !is_int($s)) {			  trigger_error('Argument(s) not an integer', E_USER_WARNING);			  return false;		 }		 elseif($l < 0 || $l > 20 || $c < 0 || $n < 0 || $s < 0) {			  trigger_error('Argument(s) out of range', E_USER_WARNING);			  return false;		 }		 elseif($c > $l) {			  trigger_error('Number of password capitals required exceeds password length', E_USER_WARNING);			  return false;		 }		 elseif($n > $l) {			  trigger_error('Number of password numerals exceeds password length', E_USER_WARNING);			  return false;		 }		 elseif($s > $l) {			  trigger_error('Number of password capitals exceeds password length', E_USER_WARNING);			  return false;		 }		 elseif($count > $l) {			  trigger_error('Number of password special characters exceeds specified password length', E_USER_WARNING);			  return false;		 }		 // all inputs clean, proceed to build password		 // change these strings if you want to include or exclude possible password characters		 $chars = "abcdefghijklmnopqrstuvwxyz";		 $caps = strtoupper($chars);		 $nums = "0123456789";		 $syms = "!@#$%^&*()-+?";		 // build the base password of all lower-case letters		 for($i = 0; $i < $l; $i++) {			  $out .= substr($chars, mt_rand(0, strlen($chars) - 1), 1);		 }		 // create arrays if special character(s) required		 if($count) {			  // split base password to array; create special chars array			  $tmp1 = str_split($out);			  $tmp2 = array();			  // add required special character(s) to second array			  for($i = 0; $i < $c; $i++) {				   array_push($tmp2, substr($caps, mt_rand(0, strlen($caps) - 1), 1));			  }			  for($i = 0; $i < $n; $i++) {				   array_push($tmp2, substr($nums, mt_rand(0, strlen($nums) - 1), 1));			  }			  for($i = 0; $i < $s; $i++) {				   array_push($tmp2, substr($syms, mt_rand(0, strlen($syms) - 1), 1));			  }			  // hack off a chunk of the base password array that's as big as the special chars array			  $tmp1 = array_slice($tmp1, 0, $l - $count);			  // merge special character(s) array with base password array			  $tmp1 = array_merge($tmp1, $tmp2);			  // mix the characters up			  shuffle($tmp1);			  // convert to string for output			  $out = implode('', $tmp1);		 }		 return $out;	}    /**     * Send the registration confirmation email      *      * @param unknown $user     */    public function sendConfirmationEmail($user)	{		$transport = $this->getServiceLocator()->get('mail.transport');		$message = new Message();				$htmlMessage = '<p>&nbsp;</p><p>&nbsp;</p>'.                        '<table style="border-color: #b7b7b7 border-width: 1px; ; width: 670px;" border="1" cellspacing="0" cellpadding="20" align="center">'.                        '<tbody><tr><td>'.                        '<p><img style="vertical-align: top; display: block; margin-left: auto; margin-right: auto;" src="https://www.demodyne.org/img/demodyne-email-white.png" alt="'._('DEMODYNE- Shape your Society').'" /></p>'.                        '<p>&nbsp;</p>'.                        '<p><span>'._('Welcome to DEMODYNE!').'</span></p>'.                        '<p><span>'._('To validate your email and activate your account, please click on the following link:').'</span></p>'.                        '<p><span>'.                        '<a href="https://dev.demodyne.org'.$this->url()->fromRoute('home/user-register', array('action' => 'confirm-email','id' => $user->getUsrRegistrationToken())).'" target="_blank">'.                        'https://dev.demodyne.org'.$this->url()->fromRoute('home/user-register', array('action' => 'confirm-email','id' => $user->getUsrRegistrationToken())).'</a></span></p>'.                        '<p><span>'._('Best regards,<br>DEMODYNE Team').'</span></p>'.                        '</td></tr></tbody></table>'.                        '<p style="text-align: center;"><span style="color: #665c62;">'.                        '<a style="text-decoration: none;" title="'._('DEMODYNE - Shape your Society').'" href="https://www.demodyne.org/" target="_blank">'.                        '<span style="color: #665c62;">www.demodyne.org</span></a></span></p>'.                        '<p style="text-align: center;"><span style="color: #665c62;"><span style="color: #665c62;">'.                        '<a title="'._('DEMODYNE on Facebook').'" href="https://www.facebook.com/demodyne.official" target="_blank">'.                        '<img src="https://www.demodyne.org/img/fbk.png" alt="DEMODYNE on Facebook" width="32" height="32"/></a>&nbsp;'.                        '<a title="'._('DEMODYNE on Linkedin').'" href="https://www.linkedin.com/company/demodyne" target="_blank">'.                        '<img src="https://www.demodyne.org/img/lknd.png" alt="DEMODYNE on Linkedin" width="32" height="32" /></a>&nbsp;'.                        '<a title="'._('DEMODYNE on Twitter').'" href="https://twitter.com/demodyne" target="_blank">'.                        '<img src="https://www.demodyne.org/img/twt.png" alt="DEMODYNE on Twitter" width="32" height="32" /></a>'.                        '</span></span></p><p><span style="color: #665c62;">&nbsp;</span></p>'; 		    		          $html = new MimePart($htmlMessage);        $html->type = "text/html";        $body = new MimeMessage();        $body->setParts(array($html));		        $config = $this->getServiceLocator()->get('Config');        $email = $config['demodyne']['email']['validation'];				$this->getRequest()->getServer();  //Server vars		$message->addTo($user->getUsrEmail())				->addFrom($email)				->setSubject('Please, confirm your registration!')				->setBody($body);		$transport->send($message);	}		/**	 * Send password by email for reset	 * 	 * @param unknown $usr_email	 * @param unknown $password	 */	public function sendPasswordByEmail($usr_email, $password)	{		$transport = $this->getServiceLocator()->get('mail.transport');		$message = new Message();				$config = $this->getServiceLocator()->get('Config');		$email = $config['demodyne']['email']['validation'];				$this->getRequest()->getServer();  //Server vars		$message->addTo($usr_email)				->addFrom($email)				->setSubject('Your password has been changed!')				->setBody("Your password at https://www.demodyne.org " . 					' has been changed. Your new password is: ' .					$password				);		$transport->send($message);			}		private function translator() {	    if (!$this->translator) 	        $this->translator = $this->getServiceLocator()->get('MvcTranslator');	    return $this->translator;	}		/**	 * Activation remainder for user accounts not activated within 5 days from registration	 */	public function activationRemainderAction() {	     	    $id = $this->params('id', '0');	     	    $config = $this->getServiceLocator()->get('Config');	     	    if ($id!=$config['demodyne']['cron']['activation_remainder']) {	        printf('You don\'t have access to this ressource');	        exit();	    }	     	    if (!empty($_SERVER['HTTP_CLIENT_IP'])) {	        $ip = $_SERVER['HTTP_CLIENT_IP'];	    } elseif (!empty($_SERVER['HTTP_X_FORWARDED_FOR'])) {	        $ip = $_SERVER['HTTP_X_FORWARDED_FOR'];	    } else {	        $ip = $_SERVER['REMOTE_ADDR'];	    }	     	    if ($ip!=$config['demodyne']['cron']['ip']) {	        printf('You don\'t have access to this ressource');	        exit();	    }	     	    $entityManager = $this->getServiceLocator()->get('doctrine.entitymanager.orm_default');	    $users = $entityManager->getRepository('DGIModule\Entity\User')->findBy(array('usrActive' => 0, 'usrEmailConfirmed' => 0));	     	    $transport = $this->getServiceLocator()->get('mail.transport');	    $translator = $this->getServiceLocator()->get('MvcTranslator');	    	    $config = $this->getServiceLocator()->get('Config');	    $email = $config['demodyne']['email']['validation'];	    	    $this->getRequest()->getServer();  //Server vars	    	    foreach ($users as $user) {	        	        $dDiff = $user->getUsrRegistrationDate()->diff(new \DateTime());	        if ($dDiff->days == 5) {	            	        $translator->setLocale($user->getLang()->getLangId());    	            	        $message = new Message();    	            	        $htmlMessage = '<p>&nbsp;</p><p>&nbsp;</p>'.    	            '<table style="border-color: #b7b7b7 border-width: 1px; ; width: 670px;" border="1" cellspacing="0" cellpadding="20" align="center">'.    	            '<tbody><tr><td>'.    	            '<p><img style="vertical-align: top; display: block; margin-left: auto; margin-right: auto;" src="https://www.demodyne.org/img/demodyne-email-white.png" alt="'._('DEMODYNE- Shape your Society').'" /></p>'.    	            '<p>&nbsp;</p>'.    	            '<p><span>'._('Dear member of the Demodyne community,').'</span></p>'.    	            '<p><span>'._('To contribute and vote on the important matters for your city, region and country, you still have to activate your account.').'</span></p>'.    	            '<p><span>'._('Click the following link to activate your Demodyne account:').'</span></p>'.    	            '<p><span>'.    	            '<a href="https://dev.demodyne.org'.$this->url()->fromRoute('home/user-register', array('action' => 'confirm-email','id' => $user->getUsrRegistrationToken())).'" target="_blank">'.    	            'https://dev.demodyne.org'.$this->url()->fromRoute('home/user-register', array('action' => 'confirm-email','id' => $user->getUsrRegistrationToken())).'</a></span></p>'.    	            '<p><span>'._('We\'re looking forward to seeing you on Demodyne.').'</span></p>'.    	            '<p><span>'._('Should you need any help, please check out our Forum ou contact us at support@demodyne.org').'</span></p>'.    	            '<p><span>'._('Thank you !').'</span></p>'.    	            '<p><span>'._('The Demodyne Team').'</span></p>'.    	            '<p><span>'._('Note : It is possible that this reminder email or the original email validation message ended up in your spam/junk folder. If this is the case, please do not forget to mark these emails as legitimate / "not spam" to properly receive our communications in your inbox.').'</span></p>'.    	            '</td></tr></tbody></table>'.    	            '<p style="text-align: center;"><span style="color: #665c62;">'.    	            '<a style="text-decoration: none;" title="'._('DEMODYNE - Shape your Society').'" href="https://www.demodyne.org/" target="_blank">'.    	            '<span style="color: #665c62;">www.demodyne.org</span></a></span></p>'.    	            '<p style="text-align: center;"><span style="color: #665c62;"><span style="color: #665c62;">'.    	            '<a title="'._('DEMODYNE on Facebook').'" href="https://www.facebook.com/demodyne.official" target="_blank">'.    	            '<img src="https://www.demodyne.org/img/fbk.png" alt="DEMODYNE on Facebook" width="32" height="32"/></a>&nbsp;'.    	            '<a title="'._('DEMODYNE on Linkedin').'" href="https://www.linkedin.com/company/demodyne" target="_blank">'.    	            '<img src="https://www.demodyne.org/img/lknd.png" alt="DEMODYNE on Linkedin" width="32" height="32" /></a>&nbsp;'.    	            '<a title="'._('DEMODYNE on Twitter').'" href="https://twitter.com/demodyne" target="_blank">'.    	            '<img src="https://www.demodyne.org/img/twt.png" alt="DEMODYNE on Twitter" width="32" height="32" /></a>'.    	            '</span></span></p><p><span style="color: #665c62;">&nbsp;</span></p>';    	             	              	        $html = new MimePart($htmlMessage);    	        $html->type = "text/html";    	            	             	        $body = new MimeMessage();    	        $body->setParts(array($html));    	            	        $message->addTo($user->getUsrEmail())            	        ->addFrom($email)            	        ->setReplyTo($email)            	                    	        ->setSubject('Activation of your Demodyne account')            	        ->setBody($body);    	          	        $transport->send($message);    	            	        echo $user->getUsrName().' '.$user->getUsrRegistrationDate()->format('Y-m-d').'\n';	        }	    }	    exit();	     	}		}