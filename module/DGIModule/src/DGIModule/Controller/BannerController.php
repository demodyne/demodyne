<?php/** * @link      https://github.com/demodyne/demodyne * @copyright Copyright (c) 2015-2017 Demodyne (https://www.demodyne.org) * @license   http://www.gnu.org/licenses/agpl.html GNU Affero General Public License */namespace DGIModule\Controller;use Zend\Filter\File\Rename;use Zend\Mvc\Controller\AbstractActionController;use Zend\View\Model\JsonModel;use Zend\View\Model\ViewModel;use Zend\Session\Container;use DGIModule\Form\AddEditBannerForm;use DGIModule\Entity\Banner;use DGIModule\Entity\User;use Ramsey\Uuid\Uuid;use Doctrine\ORM\EntityManager;use Zend\Mvc\I18n\Translator;class BannerController extends AbstractActionController{    protected $entityManager;    protected $translator;    protected $config;    public function __construct(        array $config,        EntityManager $entityManager,        Translator $translator    )    {        $this->config = $config;        $this->entityManager = $entityManager;        $this->translator = $translator;    }        public function myBannersAction() {        $user = $this->identity();        $viewModel = new ViewModel();        // inactive banner section        $inactiveBannersSection = $this->forward()->dispatch('DGIModule\Controller\Banner', array('action' => 'inactive-banners'));        $viewModel->addChild($inactiveBannersSection, 'inactiveBannersSection');        $activeBannersSection = $this->forward()->dispatch('DGIModule\Controller\Banner', array('action' => 'active-banners'));        $viewModel->addChild($activeBannersSection, 'activeBannersSection');        $viewModel->setVariables([            'user' => $user        ]);        return $viewModel;    }        public function addBannerAction() {         $user = $this->identity();                $publish = $this->params()->fromRoute('publish', false);                $session = new Container('level');        $level = $session->level;                $bannersCount = $this->entityManager->getRepository('DGIModule\Entity\Banner')->countActiveBanners($user->getAdmin());        $bannersCount = $bannersCount["total"];        /** @var \DGIModule\Entity\Banner $banner */        $banner = new Banner();        $form = new AddEditBannerForm($this->translator);        $form->setAttribute('action', $this->url()->fromRoute('administration/banner', array('action'=>'add-banner')));        /** @var $request \Zend\Http\Request */        $request = $this->getRequest();        if ($request->isPost()) {            $post = array_merge_recursive(                $request->getPost()->toArray(),                $request->getFiles()->toArray()                );            $form->bind($banner);            $form->setData($post);                        if ($form->isValid()) {                //verify if picture change                $picture = $post["bannerImage"]["name"];                if ($picture!="") {                    $files   = $request->getFiles();                    $target = getcwd() . "/public/img/banners/banner.jpg";                    $filterR = new Rename(array(                        "target"    => $target,                        "randomize" => true,                    ));                    $filename= $filterR->filter($files['bannerImage']);                    chmod($filename["tmp_name"], 0644);                    $banner->setBannerImage(str_replace(getcwd() . "/public", '', $filename["tmp_name"]));                }                else {                    $banner->setBannerImage(null);                }                                $banner->setAdmin($user->getAdmin())                       ->setBannerLevel($user->getAdmin()->getAdminLevel())                       ->setBannerCreatedDate(new \DateTime())                       ->setBannerUUID( Uuid::uuid4());                ;                if ($level=='city' && $user->getAdmin()->getAdminCity()) {                    $banner->setCity($user->getAdmin()->getAdminCity());                }                else {                    $banner->setCity($user->getCity());                }                if ($publish) {                    $banner->setBannerPublished(1)                           ->setBannerPosition(count($user->getAdmin()->getActiveBanners()) + 1);                }                $this->entityManager->persist($banner);                $this->entityManager->flush();                return new JsonModel(array('success' => true));            }        }        $viewModel = new ViewModel();        $viewModel->setTerminal($request->isXmlHttpRequest());        $viewModel->setVariables([            'form'=>$form,            'user' => $user,            'bannersCount' => $bannersCount        ]);	    return $viewModel;	}	public function editBannerAction() {	    $user = $this->identity();	    $publish = $this->params()->fromRoute('publish', false);	    $bannersCount = $this->entityManager->getRepository('DGIModule\Entity\Banner')->countActiveBanners($user->getAdmin());	    $bannersCount = $bannersCount["total"];	    $bannerUUID = $this->params('id');	    // no parameter	    if (!$bannerUUID)	        return $this->forward()->dispatch('DGIModule\Controller\Error', array('action' => 'access-denied'));        $banner = $this->entityManager->getRepository('DGIModule\Entity\Banner')->findOneBy(array('bannerUUID' => $bannerUUID));        if (!$banner || !$user->isAdministration() || $banner->getAdmin()!=$user->getAdmin())            return $this->forward()->dispatch('DGIModule\Controller\Error', array('action' => 'access-denied'));	    $form = new AddEditBannerForm($this->translator);	    $form->setAttribute('action', $this->url()->fromRoute('administration/banner', array('action'=>'edit-banner', 'id'=>$bannerUUID)));	    $form->get('bannerName')->setValue($banner->getBannerName());	    $form->get('bannerDescription')->setValue($banner->getBannerDescription());	    $form->get('bannerUrl')->setValue($banner->getBannerUrl());	    $oldFilename = $banner->getBannerImage();        /** @var $request \Zend\Http\Request */        $request = $this->getRequest();	    if ($request->isPost()) {	        $post = array_merge_recursive(	            $request->getPost()->toArray(),	            $request->getFiles()->toArray()	            );	        $form->bind($banner);	        $form->setData($post);	        //verify if picture change	        $picture = $post["bannerImage"]["name"];	        if ($picture == "") { // if no new image                $form->getInputFilter()->remove('bannerImage');            }	        if ($form->isValid()) {	            if ($picture!="") {	                $files   = $request->getFiles();	                $target = getcwd() . "/public/img/banners/banner.jpg";	                $filterR = new Rename(array(	                    "target"    => $target,	                    "randomize" => true,	                ));	                $filename= $filterR->filter($files['bannerImage']);	                chmod($filename["tmp_name"], 0644);	                $banner->setBannerImage(str_replace(getcwd() . "/public", '', $filename["tmp_name"]));	                if ($oldFilename && file_exists(getcwd() . '/public' . $oldFilename)) {	                    unlink(getcwd() . '/public' . $oldFilename);	                }                }                else {                    $banner->setBannerImage($oldFilename);                }                if ($publish) {                    $banner->setBannerPublished(1)                            ->setBannerPosition(count($user->getAdmin()->getActiveBanners()) + 1);                }                $this->entityManager->persist($banner);                $this->entityManager->flush();                return new JsonModel(array('success' => true));            }        }        $viewModel = new ViewModel();        $viewModel->setTerminal($request->isXmlHttpRequest());        $viewModel->setTemplate('dgi-module/banner/add-banner.phtml');        $viewModel->setVariables([            'form'=>$form,            'user' => $user,            'banner' => $banner,            'bannersCount' => $bannersCount        ]);        return $viewModel;    }    public function deleteBannerAction()    {        $user = $this->identity();        $bannerUUID = $this->params('id');        // no parameter        if (!$bannerUUID) {            return $this->forward()->dispatch('DGIModule\Controller\Error', array('action' => 'access-denied', 'dialog'=>true));        }        $banner = $this->entityManager->getRepository('DGIModule\Entity\Banner')->findOneBy(array('bannerUUID' => $bannerUUID));        // banner not exists or user not owner        if (!$banner || $banner->getAdmin()!=$user->getAdmin()) {            return $this->forward()->dispatch('DGIModule\Controller\Error', array('action' => 'access-denied', 'dialog'=>true));        }        /** @var $request \Zend\Http\Request */        $request = $this->getRequest();        if ($request->isPost()){            // if already deleted            $oldFilename = $banner->getBannerImage();            if ($oldFilename && file_exists(getcwd() . '/public' . $oldFilename)) {                unlink(getcwd() . '/public' . $oldFilename);            }            $this->entityManager->remove($banner);            $this->entityManager->flush();            return new JsonModel(array('success' => true));        }        $viewModel = new ViewModel();        $viewModel->setTerminal($request->isXmlHttpRequest());        $viewModel->setVariables([            'banner' => $banner,        ]);        return $viewModel;    }	public function inactiveBannersAction() {	    $user = $this->identity();	    $session = new Container('banner');	    $page = $this->params()->fromRoute('page', null);	    if (!$page) {	        if (!$session->myInactiveBannersPage) {	            $page = 1;	        }	        else {	            $page = $session->myInactiveBannersPage;	        }	    }	    $session->myInactiveBannersPage = $page;	    $sort = $this->params()->fromRoute('sort', null);	    if (!$sort) {	        if (!$session->myInactiveBannersSort) {	            $sort = 'name';	        }	        else {	            $sort = $session->myInactiveBannersSort;	        }	    }	    $session->myInactiveBannersSort = $sort;	    $order = $this->params()->fromRoute('order', null);	    if (!$order) {	        if (!$session->myInactiveBannersOrder) {	            $order = 'asc';	        }	        else {	            $order = $session->myInactiveBannersOrder;	        }	    }	    $session->myInactiveBannersOrder = $order;	    $limit= $this->params()->fromRoute('results', null);	    if (!$limit) {	        if (!$session->myInactiveBannersResults) {	            $limit = 5;	        }	        else {	            $limit = $session->myInactiveBannersResults;	        }	    }	    $session->myInactiveBannersResults = $limit;	    $bannersCount = $this->entityManager->getRepository('DGIModule\Entity\Banner')->countInactiveBanners($user->getAdmin());	    $bannersCount = $bannersCount["total"];	    $offset = ($page == 0) ? 0 : ($page - 1) * $limit;	    $pagedInactiveBanners = $this->entityManager->getRepository('DGIModule\Entity\Banner')->getAdminInactiveBanners($user->getAdmin(), $offset, $limit, $sort, $order);	    $viewModel = new ViewModel();	    $terminal = $this->getRequest()->isXmlHttpRequest();	    $viewModel->setTerminal($terminal);	    $viewModel->setVariables([	        'pagedInactiveBanners' => $pagedInactiveBanners,	        'limit' => $limit,	        'page' => $page,	        'sort' => $sort,	        'order' => $order,	        'user' => $user,	        'bannersCount' => $bannersCount,	        'terminal' => $terminal	    ]);	    return $viewModel;	}	public function activeBannersAction() {	    $user = $this->identity();	    $bannersCount = $this->entityManager->getRepository('DGIModule\Entity\Banner')->countActiveBanners($user->getAdmin());	    $bannersCount = $bannersCount["total"];	    $activeBanners = $this->entityManager->getRepository('DGIModule\Entity\Banner')->getAdminActiveBanners($user->getAdmin());	    $viewModel = new ViewModel();	    $terminal = $this->getRequest()->isXmlHttpRequest();	    $viewModel->setTerminal($terminal);	    $viewModel->setVariables([	        'activeBanners' => $activeBanners,	        'user' => $user,	        'bannersCount' => $bannersCount	    ]);	    return $viewModel;	}	public function carouselBannersAction() {	    $user = $this->identity();        $session = new Container('level');        $city = $session->city;        if (!$user && !$city) {            return $this->forward()->dispatch('DGIModule\Controller\Error', array('action' => 'access-denied'));        }        if (!$user) {            $user = new User();            $user->setUsrId(0);        }        $city = $this->entityManager->getRepository('DGIModule\Entity\City')->findOneBy(['cityId' => $city]);                if ($city && $city!=$user->getCity()) {            $user->setUsrId(0);            $user->setCountry($city->getCountry());            $user->setCity($city);        }	    $session = new Container('level');	    $level = $session->level;	            $activeBanners = $this->entityManager->getRepository('DGIModule\Entity\Banner')->getActiveBanners($user, $level, $this->config['demodyne']['level']);	    $viewModel = new ViewModel();	    $terminal = $this->getRequest()->isXmlHttpRequest();	    $viewModel->setTerminal($terminal);	    $viewModel->setVariables([	        'activeBanners' => $activeBanners,	        'user' => $user,	    ]);	    return $viewModel;	}	public function sortActiveBannersAction() {	    $user = $this->identity();	    $request = $this->getRequest();	    if ($request->isPost()){	        $sortedBanners = $this->params()->fromPost('banners');	        foreach ($sortedBanners as $index => $bannerUUID) {	            $banner = $this->entityManager->getRepository('DGIModule\Entity\Banner')->findOneBy(array('bannerUUID' => $bannerUUID));	            $banner->setBannerPosition($index+1);	            $this->entityManager->merge($banner);	        }	        $this->entityManager->flush();	        return new JsonModel(array('success' => true));	    }	    return new JsonModel(array('success' => false));	}	public function publishBannerAction()	{	    $user = $this->identity();	    $bannerUUID = $this->params('id');	    // no parameter	    if (!$bannerUUID) {            return $this->forward()->dispatch('DGIModule\Controller\Error', array('action' => 'access-denied'));        }        $banner = $this->entityManager->getRepository('DGIModule\Entity\Banner')->findOneBy(array('bannerUUID' => $bannerUUID));        if (!$banner || $banner->getAdmin()!=$user->getAdmin())            return $this->forward()->dispatch('DGIModule\Controller\Error', array('action' => 'access-denied'));        $request = $this->getRequest();        $added = false;        $removed = false;        if ($request->isPost()){            // if already published            if ($banner->getBannerPublished()) {                $banner->setBannerPublished(0)                       ->setBannerPosition(-1);                $removed = true;            }            else {                $banner->setBannerPublished(1)                       ->setBannerPosition(count($user->getAdmin()->getActiveBanners()) + 1);            }            $this->entityManager->merge($banner);            $this->entityManager->flush();            $this->sortActiveBanners($user);            return new JsonModel(array('added' => $added, 'removed'=>$removed));        }        $viewModel = new ViewModel();        //disable layout if request by Ajax        $viewModel->setTerminal($request->isXmlHttpRequest());        if ($banner->getBannerPublished()) {            $viewModel->setTemplate('dgi-module/banner/unpublish-banner.phtml');        }        $viewModel->setVariables([            'banner' => $banner,            'user' => $user        ]);        return $viewModel;	}	private function sortActiveBanners($user) {	    $session = new Container('level');	    $level = $session->level;	     	    $banners = $this->entityManager->getRepository('DGIModule\Entity\Banner')->getActiveBanners($user, $level, $this->config['demodyne']['proposal']['level']);	    foreach ($banners as $index => $banner) {	        $banner->setBannerPosition($index+1);	        $this->entityManager->merge($banner); 	    }	    $this->entityManager->flush();	}}