<?php/** * @link      https://github.com/demodyne/demodyne * @copyright Copyright (c) 2015-2017 Demodyne (https://www.demodyne.org) * @license   http://www.gnu.org/licenses/agpl.html GNU Affero General Public License */namespace DGIModule\Controller;use DGIModule\Entity\Idea;use Zend\Mvc\Controller\AbstractActionController;use Zend\View\Model\JsonModel;use Zend\View\Model\ViewModel;use Zend\Session\Container;use DGIModule\Entity\Proposal;use DGIModule\Entity\Favorite;use DGIModule\Form\AddEditProposalForm;use DGIModule\Entity\User;use Ramsey\Uuid\Uuid;use Doctrine\ORM\EntityManager;use Zend\Mvc\I18n\Translator;class ProposalController extends AbstractActionController{    protected $entityManager;    protected $translator;    protected $config;    public function __construct(        array $config,        EntityManager $entityManager,        Translator $translator    )    {        $this->config = $config;        $this->entityManager = $entityManager;        $this->translator = $translator;    }	private function newFile($path, $prefix='', $suffix='')	{	    do	    {	        $file = $path."/".$prefix.mt_rand().$suffix;	        $fp = @fopen($file, 'x');	    }	    while(!$fp);		    fclose($fp);	    return $file;	}		private function saveImageFromPost($image) {	    $propImage = $this->params()->fromPost($image);	    if ($propImage && $propImage!='null') {	        $imgData = str_replace(' ','+',$propImage);	        $imgData =  substr($imgData,strpos($imgData,",")+1);	        $imgData = base64_decode($imgData);	        // Path where the image is going to be saved	        $filePath = $this->newFile(getcwd() . "/public/img/proposals", "proposal", ".jpg");	        // Write $imgData into the image file	        $file = fopen($filePath, 'w');	        fwrite($file, $imgData);	        fclose($file);	        $filename = str_replace(getcwd() . "/public", '', $filePath);	        return $filename;	    }	    else {	        return $propImage;	    }	}	    /**     *      * @todo Change TRIGGER if publish      *      */    public function addProposalAction()    {        $user = $this->identity();        $publish = $this->params('publish');        $idea = $this->params()->fromRoute('idea');        /** @var \DGIModule\Entity\Idea $idea */        if ($idea) {            $idea = $this->entityManager->getRepository('DGIModule\Entity\Idea')->findOneBy(array('ideaUUID' => $idea));        }                $session = new Container('level');        $level = $this->params()->fromPost('level');        $level = $level?$level:$session->level;        $proposal = new Proposal();        $form = new AddEditProposalForm($this->entityManager, $this->translator);        $routeLevel = $this->params()->fromRoute('level');        $form->setAttribute('action', $this->url()->fromRoute('proposal', array('action'=>'add-proposal', 'level'=> $routeLevel?$routeLevel:null, 'idea' => $idea?$idea->getIdeaUUID():null)));                if (!$idea) {            $categoryList = $this->getMainCategoriesList(null,$level);        }        else {            $categoryList = $this->getMainCategoriesList(null,$level, $idea);        }        $form->add($this->getSubCategoryElement($categoryList['subCat']));        $propCity = $this->params()->fromPost('propCity');        $propDescription = $this->params()->fromPost('propDescription');        /** @var $request \Zend\Http\Request */        $request = $this->getRequest();        if ($request->isPost()){            $form->bind($proposal);            $form->setData($request->getPost());            $linksError = true;            $links = $this->params()->fromPost('links');            if ($links) {                foreach ($links as $link) {                    if (trim($link)!='') {                        $linksError = false;                        break;                    }                }            }            $categoryId = $this->params()->fromPost('sub_category');            $propName = $this->params()->fromPost('propSavedName');            if ($form->isValid()) {                                // check if unicity constraint match for user proposals (propSavedName, usr)                $proposalExists = $this->entityManager->getRepository('DGIModule\Entity\Proposal')->findProposals($user, $propName, $level, $this->config['demodyne']['level']);                if ($proposalExists) {                    $form->get('propSavedName')->setMessages([$this->translator->translate('There is already a proposal with this name. Please change the name.', 'DGIModule')]);                }                else {                    if ($img = $this->saveImageFromPost('propHiddenImage1')) $proposal->setPropImage1($img);                    if ($img = $this->saveImageFromPost('propHiddenImage2')) $proposal->setPropImage2($img);                    if ($img = $this->saveImageFromPost('propHiddenImage3')) $proposal->setPropImage3($img);                    $category =  $this->entityManager->getRepository('DGIModule\Entity\Category')->findOneBy(array('catId' => $categoryId));                    $now = new \DateTime();                    $uuid = Uuid::uuid4();                    // prepare data                    $proposal->setPropCreatedDate($now)                                ->setPropSavedDate($now)                                ->setPropStatus($this->config['demodyne']['proposal']['status']['draft'])                                ->setPropPublished(0)                                ->setUsr($user)                                ->setCat($category)                                ->setPropLevel($this->config['demodyne']['level'][$level])                                ->setCity($user->getCity())                                ->setPropUUID($uuid)                                ->setPropName($uuid)                    ;                    if (!$linksError) {                        foreach ($links as $link) {                            $proposal->addLink($link);                        }                    }                    // save to all city if district                    if ($propCity) {                        $proposal->setPropFullCity($propCity);                    }                    // Publish proposal                    if ($publish) {                        $proposal->setPropPublished(1)                                 ->setPropPublishedDate($now)                                 ->setPropName($propName)                                 ->setPropStatus($this->config['demodyne']['proposal']['status']['debate']);                        /** @var \DGIModule\Entity\Counters $counters */                        $counters = $user->getCounters();                        if ($counters->getCntProp()<5) {                            $counters->setCntTotal($counters->getCntTotal()+3)                                     ->setCntProp($counters->getCntProp()+1);                            $this->entityManager->merge($counters);                        }                    }                    $this->entityManager->persist($proposal);                    if ($idea) {                        $idea->addProposal($proposal);                        $this->entityManager->merge($idea);                    }                    $this->entityManager->flush();                    $this->entityManager->refresh($proposal);                    if ($proposal->getPropPublished()) {                        $this->forward()->dispatch('DGIModule\Controller\News', array('action' => 'create-news', 'id' => $proposal->getPropId(), 'type' => 'new_proposal'));                    }                    return new JsonModel(array('success' => true, 'level' => $level, 'measure'=>0));                }            }            else {                $mainCategoryId = $this->params()->fromPost('main_category');                if ($idea) {                    $categoryList = $this->getMainCategoriesList(null,$level);                    $form->add($this->getSubCategoryElement($categoryList['subCat']));                }                $categoryList['selected'] = $this->entityManager->getRepository('DGIModule\Entity\Category')->findOneBy(array('catId' => $mainCategoryId));                $categories = $this->entityManager->getRepository('DGIModule\Entity\Category')->getSubCategories($mainCategoryId, $level);                $cat = array();                /** @var \DGIModule\Entity\Category $category */                foreach ($categories as $category) {                    $cat[$category->getCatId()]=$category->getCatName();                }                $form->get('sub_category')->setOptions(['value_options' => $cat]);            }        }        else {            if ($idea) {                $form->get('propSavedName')->setValue($idea->getIdeaName());                $form->get('propDescription')->setValue($idea->getIdeaDescription());                $propDescription =$idea->getIdeaDescription();                $level = array_search($idea->getEvent()->getEventLevel(), $this->config['demodyne']['level']) ;                $links= [$this->url()->fromRoute('session', array('action'=>'view-session', 'id'=>$idea->getIdeaUUID()), array('force_canonical' => true))];            }            else {                $links = [''];            }            $linksError = false;        }        $errorMessages = [];        $viewModel = new ViewModel();        //disable layout if request by Ajax        $viewModel->setTerminal($request->isXmlHttpRequest());        $viewModel->setTemplate('dgi-module/proposal/add-edit-proposal.phtml');        $viewModel->setVariables([            'form'=>$form,            'subcat' => key($categoryList['subCat']),            'proposition' => $proposal,            'categoryList' => $categoryList,            'errorMessages'=> $errorMessages,            'save' => 1,            'user' => $user,            'propCity' => $propCity,            'level' => $level,            'proposal' => null,            'propDescription' => $propDescription,            'idea' => $idea,            'links' => $links,            'linksError' => $linksError,        ]);        return $viewModel;    }    public function editProposalAction()    {        $user = $this->identity();        $propUUID = $this->params('id');        $publish = $this->params('publish');        if (!$propUUID)  {            return $this->forward()->dispatch('DGIModule\Controller\Error', array('action' => 'access-denied'));        }        /** @var \DGIModule\Entity\Proposal $proposal */        $proposal = $this->entityManager->getRepository('DGIModule\Entity\Proposal')->findOneBy(array('propUUID' => $propUUID, 'propDeletedDate' => null));        if (!$proposal || $proposal->getUsr()!=$user) {            return $this->forward()->dispatch('DGIModule\Controller\Error', array('action' => 'access-denied'));        }        if ($proposal->getPropStatus() > $this->config['demodyne']['proposal']['status']['debate'] || $proposal->getUsr()!=$user) {            return $this->forward()->dispatch('DGIModule\Controller\Proposal', array('action' => 'view', 'id' => $propUUID));        }        $proposal->setPropSavedName(str_replace('&rdquo;', '"', $proposal->getPropSavedName()));        /** @var \DGIModule\Entity\Proposal $oldProposal */        $oldProposal = clone($proposal);        $form = new AddEditProposalForm($this->entityManager, $this->translator, $proposal);        $form->setAttribute('action', $this->url()->fromRoute('proposal', array('action'=>'edit-proposal', 'id'=>$proposal->getPropUUID())));        $propCity = $proposal->getPropFullCity();                $level = $this->params()->fromPost('level');        $level = $level?$level:array_search($proposal->getPropLevel(), $this->config['demodyne']['level']);                $propName = $this->params()->fromPost('propSavedName', $proposal->getPropSavedName());        $propDescription = $this->params()->fromPost('propDescription');        /** @var $request \Zend\Http\Request */        $request = $this->getRequest();        $proposalExists = $this->entityManager->getRepository('DGIModule\Entity\Proposal')->findProposals($user, $propName, array_search($proposal->getPropLevel(), $this->config['demodyne']['level']), $this->config['demodyne']['level']);        if ($proposalExists && $proposalExists!=$proposal) {            $form->get('propSavedName')->setMessages([$this->translator->translate('There is already a proposal with this name. Please change the name.', 'DGIModule')]);        }        elseif ($request->isPost()){            $form->bind($proposal);            $form->setData($request->getPost());            $propCity = $this->params()->fromPost('propCity');            $links = $this->params()->fromPost('links');            if ($form->isValid()){                if ($proposalExists && $proposalExists!=$proposal && $proposal->getPropPublished()) {//                     $form->get('propSavedName')->setMessages(['There is alredy a proposal with this name. Please change the name and try again.']);                }                else {                    $now = new \DateTime();                    $update = false;                                        $img = $this->saveImageFromPost('propHiddenImage1');                    if (!$img || $img!='null') {                        $oldFilename = $proposal->getPropImage1();                        if ($oldFilename && file_exists(getcwd() . '/public' . $oldFilename)) {                            unlink(getcwd() . '/public' . $oldFilename);                        }                        if (!$img) {                            $proposal->setPropImage1(null);                        }                        else {                            $proposal->setPropImage1($img);                        }                        $update = true;                    }                    $img = $this->saveImageFromPost('propHiddenImage2');                    if (!$img || $img!='null') {                        $oldFilename = $proposal->getPropImage2();                        if ($oldFilename && file_exists(getcwd() . '/public' . $oldFilename)) {                            unlink(getcwd() . '/public' . $oldFilename);                        }                        if (!$img) {                            $proposal->setPropImage2(null);                        }                        else {                            $proposal->setPropImage2($img);                        }                        $update = true;                    }                    $img = $this->saveImageFromPost('propHiddenImage3');                    if (!$img || $img!='null') {                        $oldFilename = $proposal->getPropImage3();                        if ($oldFilename && file_exists(getcwd() . '/public' . $oldFilename)) {                            unlink(getcwd() . '/public' . $oldFilename);                        }                        if (!$img) {                            $proposal->setPropImage3(null);                        }                        else {                            $proposal->setPropImage3($img);                        }                        $update = true;                    }                    $categoryId = $this->params()->fromPost('sub_category');                    $category =  $this->entityManager->getRepository('DGIModule\Entity\Category')->findOneBy(array('catId' => $categoryId));                    // prepare data                    $proposal->setPropLevel($this->config['demodyne']['level'][$level])                             ->setCat($category);                     // save to all city if district                    if ($propCity) {                        $proposal->setPropFullCity($propCity);                    }                    if ($proposal->getPropPublished()) {                        $proposal->setPropName($proposal->getPropSavedName());                    }                    else {                        // Publish proposal                        if ($publish) {                            $proposal->setPropPublished(1)                                    ->setPropPublishedDate($now)                                    ->setPropName($proposal->getPropSavedName())                                    ->setPropStatus($this->config['demodyne']['proposal']['status']['debate'])                                    ->setPropSavedDate($now);                            $counters = $user->getCounters();                            if ($counters->getCntProp()<5) {                                $counters->setCntTotal($counters->getCntTotal()+3)                                         ->setCntProp($counters->getCntProp()+1);                                $this->entityManager->merge($counters);                            }                        }                    }                    if ($oldProposal->getPropSavedName()!=$propName ||                        $oldProposal->getPropDescription()!=$propDescription ||                        $oldProposal->getPropLevel() != $this->config['demodyne']['level'][$level] ||                        $oldProposal->getPropFullCity() != $propCity ||                        $oldProposal->getCat() != $category                    ) {                        $update = true;                    }                    $proposal->clearLinks();                    if ($links) {                        foreach ($links as $link) {                            if (trim($link)!='') {                                $proposal->addLink(trim($link));                            }                        }                    }                    try {                        if ($update) {                            $proposal->setPropSavedDate($now);                            $this->entityManager->merge($proposal);                            $this->entityManager->flush();                            $this->forward()->dispatch('DGIModule\Controller\Email', array(                                'action' => 'proposal-has-been-modified',                                'id' => $proposal->getPropUUID(),                                'email' => 'true'                            ));                        }                        return new JsonModel(['success' => true, 'level' => 'edit', 'measure'=>0]);                    }                    catch( \Doctrine\DBAL\Exception\UniqueConstraintViolationException $e )                    {                        $form->get('propSavedName')->setMessages([$this->translator->translate('There is already a proposal with this name. Please change the name.', 'DGIModule')]);                    }                }            }        }        {            $links = $proposal->getLinks();        }        $categoryList = $this->getMainCategoriesList($proposal, $level);        // add sub_category select list        $form->add($this->getSubCategoryElement($categoryList['subCat']));        $form->get('sub_category')->setValue($proposal->getCat()->getCatId());        $viewModel = new ViewModel();                if ($proposal->getPropPublished()) {            $commentListSection = $this->forward()->dispatch('DGIModule\Controller\Comment', array('action' => 'list', 'type' =>'proposal',  'id' => $propUUID, 'ajax'=>false, 'actions' => 'false'));            $viewModel->addChild($commentListSection, 'commentListSection');        }        $viewModel->setTerminal($request->isXmlHttpRequest());        $form->get('propHiddenImage1')->setValue('null');        $form->get('propHiddenImage2')->setValue('null');        $form->get('propHiddenImage3')->setValue('null');                $viewModel->setTemplate('dgi-module/proposal/add-edit-proposal.phtml');                $viewModel->setVariables([            'form'=>$form,            'proposal' => $proposal,            'categoryList' => $categoryList,            'user' => $user,            'propCity' => $propCity,            'level' => $level,            'propDescription' => $propDescription,            'links' => $links,            'linksError' => false,        ]);        return $viewModel;    }    /**     *  This action deletes a proposal permanently if proposal not published or marking as deleted if published     *      * @return JsonModel|\Zend\View\Model\ViewModel     */    public function deleteAction()    {         $user = $this->identity();        $propUUID = $this->params('id', '0');        // no parameter        if (!$propUUID) {            return $this->forward()->dispatch('DGIModule\Controller\Error', array('action' => 'access-denied'));        }        $proposal = $this->entityManager->getRepository('DGIModule\Entity\Proposal')->findOneBy(array('propUUID' => $propUUID, 'propDeletedDate' => null));        // @todo Create moderation system based on points        if (!$proposal || ($proposal->getUsr()!=$user && $user->getUsrlId()!=$this->config['demodyne']['account']['type']['admin'])) {            return $this->forward()->dispatch('DGIModule\Controller\Error', array('action' => 'access-denied'));        }        $request = $this->getRequest();        // check if unicity constraint match for user proposals (propSavedName, usr)        $error = null;        // verify status        $status = $this->config['demodyne']['proposal']['status'];        if ($proposal->getPropStatus() > $status['debate']) {            $error = 'This proposal has passed the debate phase.';        }        if (!$error && $request->isPost()){            // if already deleted            if ($proposal->getPropDeletedDate()) {                return new JsonModel(array('success' => true));            }            if ($proposal->getPropPublished()) {                $proposal->setPropDeletedDate(new \DateTime())                               ->setDeletedUsr($user)                               ->setPropName($proposal->getPropUUID());                $this->entityManager->merge($proposal);            }            else {                $this->entityManager->remove($proposal);            }            $this->entityManager->flush();            if ($proposal->getPropPublished()) {                $this->forward()->dispatch('DGIModule\Controller\News', array('action' => 'create-news', 'id' => $proposal->getPropId(), 'type' => 'deleted_proposal'));            }            return new JsonModel(array('success' => true));        }        $viewModel = new ViewModel();        //disable layout if request by Ajax        $viewModel->setTerminal($request->isXmlHttpRequest());        $viewModel->setVariables([            'proposal' => $proposal,            'error' => $error        ]);        return $viewModel;    }    /**     * View action to see details about a proposal. If the proposal is in draft or debate state then edit action is called     *     * @return ViewModel     */    public function viewAction()    {        $user = $this->identity();        $propUUID = $this->params('id');        if (!$propUUID) {            return $this->forward()->dispatch('DGIModule\Controller\Error', array('action' => 'access-denied'));        }        /** @var \DGIModule\Entity\Proposal $proposal */        $proposal = $this->entityManager->getRepository('DGIModule\Entity\Proposal')->findOneBy(array('propUUID' => $propUUID, 'propDeletedDate' => null));        if ( !$proposal || (!$proposal->getPropPublished() && $proposal->getUsr()!=$user) ) {            return $this->forward()->dispatch('DGIModule\Controller\Error', array('action' => 'access-denied'));        }        $levelSession = new Container('level');        if ($user && ($proposal->getCity()==$user->getCity() && $proposal->getPropLevel()==$this->config['demodyne']['level']['city'] ||                $proposal->getCity()->getRegion()==$user->getCity()->getRegion() && $proposal->getPropLevel()==$this->config['demodyne']['level']['region'] ||                $proposal->getCity()->getCountry()==$user->getCountry() && $proposal->getPropLevel()==$this->config['demodyne']['level']['country'])) {            $levelSession->city = $user->getCity()->getCityId();        }        else {            $levelSession->city = $proposal->getCity()->getCityId();        }        $levelSession->levelValue = $proposal->getPropLevel();        $levelSession->level = array_search($levelSession->levelValue, $this->config['demodyne']['level']);        $viewModel = new ViewModel();        $viewModel->setTerminal($this->getRequest()->isXmlHttpRequest());        if ($proposal->getPropPublished()) {            if ($user!=$proposal->getUsr()) {                $proposal->setPropViews($proposal->getPropViews()+1);                $this->entityManager->merge($proposal);                $this->entityManager->flush();            }            $commentsSection = $this->forward()->dispatch('DGIModule\Controller\Comment', array('action'=>'add-comment', 'type' =>'proposal',  'id' => $propUUID, 'ajax' => false));            $viewModel->addChild($commentsSection, 'commentsSection');            $voteSection = $this->forward()->dispatch('DGIModule\Controller\Vote', array('action'=>'add', 'id' => $propUUID, 'terminal'=>false));            $viewModel->addChild($voteSection, 'voteSection');        }        if (isset($_SESSION['mobile']) && $_SESSION['mobile']) {            $viewModel->setTemplate('dgi-module/proposal/view.mobile.phtml');        }        $viewModel->setVariables([            'proposal'   => $proposal,            'mainCategoryImage' => $proposal->getCat()->getCatImage(),            'mainCategoryName' => $proposal->getCat()->getCatCat()->getCatName(),            'subCategoryName' => $proposal->getCat()->getCatName(),            'user'          => $user        ]);        return $viewModel;    }    public function statusDetailsAction()    {        $user = $this->identity();        $propUUID = $this->params('id');        if (!$propUUID) {            return $this->forward()->dispatch('DGIModule\Controller\Error', array('action' => 'access-denied'));        }        $proposal = $this->entityManager->getRepository('DGIModule\Entity\Proposal')->findOneBy(array('propUUID' => $propUUID));        if ( !$proposal || (!$proposal->getPropPublished() && $proposal->getUsr()!=$user) ) {            return $this->forward()->dispatch('DGIModule\Controller\Error', array('action' => 'access-denied'));        }        $viewModel = new ViewModel();        $status = $this->config['demodyne']['proposal']['status'];        if ($proposal->isMeasure()) {            $voteSection = $this->forward()->dispatch('DGIModule\Controller\Vote', array('action'=>'view', 'id' => $proposal->getPropUUID(), 'terminal' => false, 'text'=> false));            $viewModel->addChild($voteSection, 'voteSection');        }        else {            if ($proposal->getPropStatus() >= $status['vote']) {                $voteSection = $this->forward()->dispatch('DGIModule\Controller\Vote', array('action'=>'view', 'id' => $propUUID, 'terminal' => false, 'text'=> false));                $viewModel->addChild($voteSection, 'voteSection');            }        }        $viewModel->setVariables([            'proposal'   => $proposal,            'status' => $status        ]);        return $viewModel;    }    public function publishProposalAction()    {        $user = $this->identity();        $propUUID = $this->params('id');        if (!$propUUID) {            return $this->forward()->dispatch('DGIModule\Controller\Error', array('action' => 'access-denied'));        }        /** @var \DGIModule\Entity\Proposal $proposal */        $proposal = $this->entityManager->getRepository('DGIModule\Entity\Proposal')->findOneBy(array('propUUID' => $propUUID));        if (!$proposal || $proposal->getUsr()!=$user) {            return $this->forward()->dispatch('DGIModule\Controller\Error', array('action' => 'access-denied'));        }                // check if unicity constraint match for user proposals (propSavedName, usr)        $error = null;        $proposalExists = $this->entityManager->getRepository('DGIModule\Entity\Proposal')->findProposals($user, $proposal->getPropSavedName(), array_search($proposal->getPropLevel(), $this->config['demodyne']['level']), $this->config['demodyne']['level']);        if ($proposalExists && $proposalExists!=$proposal) {            $error = $this->translator->translate('There is already a proposal with this name. Please change the name and try again.', 'DGIModule');        }        /** @var $request \Zend\Http\Request */        $request = $this->getRequest();        if ($request->isPost() && !$error){            // if already published            if ($proposal->getPropPublished()) {                return new JsonModel(array('success' => true));            }            $proposal->setPropPublished(1)                        ->setPropSavedDate(new \DateTime())                        ->setPropName($proposal->getPropSavedName())                        ->setPropPublishedDate(new \DateTime())                        ->setPropStatus($this->config['demodyne']['proposal']['status']['debate']);             $this->entityManager->merge($proposal);            /** @var \DGIModule\Entity\Counters $counters */            $counters = $user->getCounters();            if ($counters->getCntProp()<5) {                $counters->setCntTotal($counters->getCntTotal()+3)                         ->setCntProp($counters->getCntProp()+1);                $this->entityManager->merge($counters);            }            try {                $this->entityManager->flush();                $this->forward()->dispatch('DGIModule\Controller\News', array('action' => 'create-news', 'id' => $proposal->getPropId(), 'type' => 'new_proposal'));                return new JsonModel(array('success' => true));            }            catch( \Doctrine\DBAL\Exception\UniqueConstraintViolationException $e )            {                return new JsonModel(array('success' => false));            }        }                $viewModel = new ViewModel();        $viewModel->setTerminal($request->isXmlHttpRequest());        $viewModel->setVariables([            'proposal' => $proposal,           'error' => $error        ]);        return $viewModel;    }        public function prolongDebateAction()    {        $user = $this->identity();                $propUUID = $this->params('id');        if (!$propUUID) {            return $this->forward()->dispatch('DGIModule\Controller\Error', array('action' => 'access-denied'));        }                /** @var \DGIModule\Entity\Proposal $proposal */        $proposal = $this->entityManager->getRepository('DGIModule\Entity\Proposal')->findOneBy(array('propUUID' => $propUUID));        if (!$proposal || !$proposal->getPropPublished() || $proposal->getUsr()!=$user) {            return $this->forward()->dispatch('DGIModule\Controller\Error', array('action' => 'access-denied'));        }        /** @var $request \Zend\Http\Request */        $request = $this->getRequest();        if ($request->isPost()){            $proposal->setPropDebatePeriod($proposal->getPropDebatePeriod() + 14)                     ->setPropSavedDate(new \DateTime());            $this->entityManager->merge($proposal);            $this->entityManager->flush();            $this->forward()->dispatch('DGIModule\Controller\Email', array(                'action' => 'proposal-debate-phase-prolonged',                'id' => $proposal->getPropUUID(),                'email' => 'true'            ));            return new JsonModel(array('success' => true, 'debate' => $proposal->getPropDebatePeriod()));        }        $viewModel = new ViewModel();        $viewModel->setTerminal($request->isXmlHttpRequest());        $viewModel->setVariables([            'proposal' => $proposal,        ]);        return $viewModel;    }        /**     * Shows the list of all proposals for the given level     */    public function allProposalsAction() {        $user = $this->identity();        $session = new Container('level');        $city = $session->city;        if (!$user && !$city) {            return $this->forward()->dispatch('DGIModule\Controller\Error', array('action' => 'access-denied'));        }        if (!$user) {            $user = new User();            $user->setUsrId(0);        }        else {            $user = clone($user);        }        if ($city) {            $city = $this->entityManager->getRepository('DGIModule\Entity\City')->findOneBy(['cityId' => $city]);            if ($city && $city!==$user->getCity()) {                $user->setUsrId(0);                $user->setCountry($city->getCountry());                $user->setCity($city);            }        }                $session = new Container('proposal');        $page = $this->params()->fromRoute('page', null);        if (!$page) {            if (!$session->allProposalsPage) {                $page = 1;            }            else {                $page = $session->allProposalsPage;            }        }        $session->allProposalsPage = $page;        $sort = $this->params()->fromRoute('sort', null);        if (!$sort) {            if (!$session->allProposalsSort) {                $sort = 'published';            }            else {                $sort = $session->allProposalsSort;            }        }        $session->allProposalsSort = $sort;        $order = $this->params()->fromRoute('order', null);        if (!$order) {            if (!$session->allProposalsOrder) {                $order = 'desc';            }            else {                $order = $session->allProposalsOrder;            }        }        $session->allProposalsOrder = $order;        $limit= $this->params()->fromRoute('results', null);        if (!$limit) {            if (!$session->allProposalsResults) {                $limit = 10;            }            else {                $limit = $session->allProposalsResults;            }        }        $session->allProposalsResults = $limit;        $proposalCount = $this->entityManager->getRepository('DGIModule\Entity\Proposal')->countProposals($user);        $proposalCount = $proposalCount["totalProposals"];        $viewModel = new ViewModel();        $page =  ceil((float)$proposalCount/$limit) < $page ? ceil((float)$proposalCount/$limit) : $page; // Goto last page if page > last page        $offset = $page>0?($page - 1) * $limit:0;        $pagedProposals = $this->entityManager->getRepository('DGIModule\Entity\Proposal')->getPagedProposals($user, $offset, $limit, $sort, $order, false, null);        foreach ($pagedProposals as $index => $proposal) {            $statusDetails =  $this->forward()->dispatch('DGIModule\Controller\Proposal', array('action'=>'status-details', 'id' => $proposal->getPropUUID()));            $viewModel->addChild($statusDetails, 'status-details-'.$index);        }        $viewModel->setTerminal($this->getRequest()->isXmlHttpRequest());        if (isset($_SESSION['mobile']) && $_SESSION['mobile']) {            $viewModel->setTemplate('dgi-module/proposal/all-proposals.mobile.phtml');        }        $viewModel->setVariables([            'pagedProposals' => $pagedProposals,            'limit' => $limit,            'page' => $page,            'sort' => $sort,            'order' => $order,            'user' => $user,            'proposalCount' => $proposalCount,        ]);        return $viewModel;    }        public function myProposalsAction() {        $user = $this->identity();        $viewModel = new ViewModel();        $viewModel->setTerminal($this->getRequest()->isXmlHttpRequest());        $session = new Container('proposal');        $page = $this->params()->fromRoute('page', null);        if (!$page) {            if (!$session->myProposalsPage) {                $page = 1;            }            else {                $page = $session->myProposalsPage;            }        }        $session->myProposalsPage = $page;        $sort = $this->params()->fromRoute('sort', null);        if (!$sort) {            if (!$session->myProposalsSort) {                $sort = 'created-date';            }            else {                $sort = $session->myProposalsSort;            }        }        $session->myProposalsSort = $sort;        $order = $this->params()->fromRoute('order', null);        if (!$order) {            if (!$session->myProposalsOrder) {                $order = 'desc';            }            else {                $order = $session->myProposalsOrder;            }        }        $session->myProposalsOrder = $order;        $limit= $this->params()->fromRoute('results', null);        if (!$limit) {            if (!$session->myProposalsResults) {                $limit = 10;            }            else {                $limit = $session->myProposalsResults;            }        }        $session->myProposalsResults = $limit;        $filter= $this->params()->fromRoute('filter', null);        if (!$filter) {            if (!$session->myProposalsFilter) {                $filter = 'none';            }            else {                $filter = $session->myProposalsFilter;            }        }        $session->myProposalsFilter = $filter;        if (!$user) {            $viewModel->setVariables([                'pagedProposals' => [],                'limit' => $limit,                'page' => $page,                'sort' => $sort,                'order' => $order,                'filter' => $filter,                'user' => $user,                'totalProposals' => 0,                'cityProposals' => 0,                'regionProposals' => 0,                'countryProposals' => 0,            ]);            return $viewModel;        }        // get number of user proposals        $noProposals = $this->entityManager->getRepository('DGIModule\Entity\Proposal')->countUserProposals($user, $this->config['demodyne']['level'], false);        $totalProposals = $noProposals['totalProposals'];        $cityProposals = $noProposals['cityProposals'];        $regionProposals = $noProposals['regionProposals'];        $countryProposals = $noProposals['countryProposals'];        $page =  ceil((float)$totalProposals/$limit) < $page ? ceil((float)$totalProposals/$limit) : $page; // Goto last page if page > last page        $offset = $page>0?($page - 1) * $limit:0;        $pagedProposals = $this->entityManager->getRepository('DGIModule\Entity\Proposal')->getUserPagedProposals($user, $offset, $limit, $sort, $order, false, $this->config['demodyne']['level'][$filter]);        foreach ($pagedProposals as $index => $proposal) {            $statusDetails =  $this->forward()->dispatch('DGIModule\Controller\Proposal', array('action'=>'status-details', 'id' => $proposal->getPropUUID()));            $viewModel->addChild($statusDetails, 'status-details-'.$index);        }        if (isset($_SESSION['mobile']) && $_SESSION['mobile']) {            $viewModel->setTemplate('dgi-module/proposal/my-proposals.mobile.phtml');        }        $viewModel->setVariables([            'pagedProposals' => $pagedProposals,            'limit' => $limit,            'page' => $page,            'sort' => $sort,            'order' => $order,            'filter' => $filter,            'user' => $user,            'totalProposals' => $totalProposals,            'cityProposals' => $cityProposals,            'regionProposals' => $regionProposals,            'countryProposals' => $countryProposals,        ]);        return $viewModel;    }    public function myFavoritesAction() {        $user = $this->identity();        $viewModel = new ViewModel();        $viewModel->setTerminal($this->getRequest()->isXmlHttpRequest());        $session = new Container('proposal');        $page = $this->params()->fromRoute('page', null);        if (!$page) {            if (!$session->myFavoritesPage) {                $page = 1;            }            else {                $page = $session->myFavoritesPage;            }        }        $session->myFavoritesPage = $page;        $sort = $this->params()->fromRoute('sort', null);        if (!$sort) {            if (!$session->myFavoritesSort) {                $sort = 'name';            }            else {                $sort = $session->myFavoritesSort;            }        }        $session->myFavoritesSort = $sort;        $order = $this->params()->fromRoute('order', null);        if (!$order) {            if (!$session->myFavoritesOrder) {                $order = 'asc';            }            else {                $order = $session->myFavoritesOrder;            }        }        $session->myFavoritesOrder = $order;        $limit= $this->params()->fromRoute('results', null);        if (!$limit) {            if (!$session->myFavoritesResults) {                $limit = 10;            }            else {                $limit = $session->myFavoritesResults;            }        }        $session->myFavoritesResults = $limit;        if (!$user) {            $viewModel->setVariables([                'pagedProposals' => [],                'limit' => $limit,                'page' => $page,                'sort' => $sort,                'order' => $order,                'user' => $user,                'totalFavorites' => 0            ]);            return $viewModel;        }        // get number of user favorites        $totalFavorites = $this->entityManager->getRepository('DGIModule\Entity\Proposal')->countUserFavorites($user);        $totalFavorites = $totalFavorites['totalFavorites'];        $page =  ceil((float)$totalFavorites/$limit) < $page ? ceil((float)$totalFavorites/$limit) : $page; // Goto last page if page > last page        $offset = ($page == 0) ? 0 : ($page - 1) * $limit;        $pagedProposals = $this->entityManager->getRepository('DGIModule\Entity\Proposal')->getUserPagedFavorites($user, $offset, $limit, $sort, $order);        foreach ($pagedProposals as $index => $proposal) {            $statusDetails =  $this->forward()->dispatch('DGIModule\Controller\Proposal', array('action'=>'status-details', 'id' => $proposal->getPropUUID()));            $viewModel->addChild($statusDetails, 'status-details-'.$index);        }        if (isset($_SESSION['mobile']) && $_SESSION['mobile']) {            $viewModel->setTemplate('dgi-module/proposal/my-favorites.mobile.phtml');        }        $viewModel->setVariables([            'pagedProposals' => $pagedProposals,            'limit' => $limit,            'page' => $page,            'sort' => $sort,            'order' => $order,            'user' => $user,            'totalFavorites' => $totalFavorites        ]);        return $viewModel;    }    public function favoriteAction() {        $user = $this->identity();        $propUUID = $this->params('id');        $proposal = $this->entityManager->getRepository('DGIModule\Entity\Proposal')->findOneBy(array('propUUID' => $propUUID, 'propDeletedDate'=>null, 'propPublished'=>1));        // proposition doesn't exists        if (!$proposal) {            return new JsonModel(['success'=> 0]);        }        $favorite = $this->entityManager->getRepository('DGIModule\Entity\Favorite')->findOneBy(array('prop' => $proposal, 'usr' => $user));        if ($favorite) {            $this->entityManager->remove($favorite);            $success = 1;        }        else {            $favorite = new Favorite();            $favorite->setProp($proposal)                     ->setUsr($user)                     ->setFavLastCheckDate(new \DateTime());            $this->entityManager->persist($favorite);            $success = 2;        }        $this->entityManager->flush();        return new JsonModel(['success'=> $success]);    }            private static function cmp($a, $b) {        if ($a['score'] == $b['score']) {            return 0;        }        return ($a['score'] > $b['score']) ? -1 : 1;    }            /***     *      * TODO: combine top score in proposal list     *      * @return \Zend\View\Model\ViewModel     */    public function topProposalsAction()    {        $user = $this->identity();        $session = new Container('level');        $city = $session->city;                if (!$user &&  !$city) {            return $this->forward()->dispatch('DGIModule\Controller\Error', array('action' => 'access-denied'));        }        if (!$user) {            $user = new User();            $user->setUsrId(0);        }        else {            $user = clone($user);        }                if ($city) {            $city = $this->entityManager->getRepository('DGIModule\Entity\City')->findOneBy(['cityId' => $city]);            if ($city) {                $user->setUsrId(0);                $user->setCountry($city->getCountry());                $user->setCity($city);            }        }                $level = $session->level;        $limit = 5; // how many top proposal to show        $topProposals = $this->entityManager->getRepository('DGIModule\Entity\Proposal')->getTopProposals($user, $limit);                $viewModel = new ViewModel();$proposals = [];        foreach ($topProposals as $index => $proposal) {            $proposals[$index]['proposal'] = $proposal;            $topScore = $this->entityManager->getRepository('DGIModule\Entity\Vote')->getTopValue($proposal, $this->config['demodyne']['level']);            $proposals[$index]['score'] = $topScore['toppoints'];        }        usort($proposals, array('\DGIModule\Controller\ProposalController','cmp'));                foreach ($proposals as $index => $proposal) {            $voteSection = $this->forward()->dispatch('DGIModule\Controller\Vote', array('action'=>'view', 'id' => $proposal['proposal']->getPropUUID(), 'terminal' => false, 'text'=> true));            $viewModel->addChild($voteSection,  'vote-'.$index);            if ($index==4) break;        }                $viewModel->setTerminal($this->getRequest()->isXmlHttpRequest());        $viewModel->setVariables([            'topProposals' => $proposals        ]);        return $viewModel;    }    /**     *     * @return ViewModel     */    public function userProposalsAction() {                $usrUUID = $this->params('id', '0');        $user = $this->entityManager->getRepository('DGIModule\Entity\User')->findOneBy(array('usrUUID' => $usrUUID, 'usrDeletedDate'=>null));        if (!$user) {            return $this->forward()->dispatch('DGIModule\Controller\Error', array('action' => 'access-denied'));        }                $me = $this->identity();        if (!$me) {            $me = new User();            $me->setUsrId(0);        }        else {            $me = clone($me);        }        $session = new Container('proposal');        $sessionUserProposals = $session->userProposals;        $page = $this->params()->fromRoute('page', null);        if (!$page) {            if (!isset($sessionUserProposals[$usrUUID]['page'])) {                $page = 1;            }            else {                $page = $sessionUserProposals[$usrUUID]['page'];            }        }        $sessionUserProposals[$usrUUID]['page'] = $page;        $sort = $this->params()->fromRoute('sort', null);        if (!$sort) {            if (!isset($sessionUserProposals[$usrUUID]['sort'])) {                $sort = 'published';            }            else {                $sort = $sessionUserProposals[$usrUUID]['sort'];            }        }        $sessionUserProposals[$usrUUID]['sort'] = $sort;        $order = $this->params()->fromRoute('order', null);        if (!$order) {            if (!isset($sessionUserProposals[$usrUUID]['order'])) {                $order = 'desc';            }            else {                $order = $sessionUserProposals[$usrUUID]['order'];            }        }        $sessionUserProposals[$usrUUID]['order'] = $order;        $limit= $this->params()->fromRoute('results', null);        if (!$limit) {            if (!isset($sessionUserProposals[$usrUUID]['results'])) {                $limit = 10;            }            else {                $limit = $sessionUserProposals[$usrUUID]['results'];            }        }        $sessionUserProposals[$usrUUID]['results'] = $limit;                $filter= $this->params()->fromRoute('filter', null);        if (!$filter) {            if (!isset($sessionUserProposals[$usrUUID]['filter'])) {                $filter = 'none';            }            else {                $filter = $sessionUserProposals[$usrUUID]['filter'];            }        }        $sessionUserProposals[$usrUUID]['filter'] = $filter;        $session->userProposals = $sessionUserProposals;                // get number of user proposals        $noProposals = $this->entityManager->getRepository('DGIModule\Entity\Proposal')->countUserProposals($user, $this->config['demodyne']['level'], true);        $totalProposals = $noProposals['totalProposals'];        $cityProposals = $noProposals['cityProposals'];        $regionProposals = $noProposals['regionProposals'];        $countryProposals = $noProposals['countryProposals'];        $page = $limit!='all'? (ceil($totalProposals/$limit) < $page ? ceil($totalProposals/$limit) : $page) : $page; // @todo Goto last page if page > last page        $viewModel = new ViewModel();        $offset = ($page == 0) ? 0 : ($page - 1) * $limit;        $pagedProposals = $this->entityManager->getRepository('DGIModule\Entity\Proposal')->getUserPagedProposals($user, $offset, $limit, $sort, $order, true, $this->config['demodyne']['level'][$filter]);        /** @var \DGIModule\Entity\Proposal $proposal */        foreach ($pagedProposals as $index => $proposal) {            $statusDetails =  $this->forward()->dispatch('DGIModule\Controller\Proposal', array('action'=>'status-details', 'id' => $proposal->getPropUUID()));            $viewModel->addChild($statusDetails, 'status-details-'.$index);        }        $viewModel->setTerminal($this->getRequest()->isXmlHttpRequest());        if (isset($_SESSION['mobile']) && $_SESSION['mobile']) {            $viewModel->setTemplate('dgi-module/proposal/user-proposals.mobile.phtml');        }        $viewModel->setVariables([            'pagedProposals' => $pagedProposals,            'limit' => $limit,            'page' => $page,            'sort' => $sort,            'order' => $order,            'filter' => $filter,            'user' => $user,            'me' => $me,            'noProposals' => $totalProposals,            'cityProposals' => $cityProposals,            'regionProposals' => $regionProposals,            'countryProposals' => $countryProposals,        ]);        return $viewModel;    }    private function getMainCategoriesList(Proposal $proposal=null, $level='city', Idea $idea = null) {        $categories = $this->entityManager->getRepository('DGIModule\Entity\Category')->getMainCategories($this->identity(), $level);        $categoryList = [];        $categoryList['list1'] = $categories;//array_slice($categories, 0, $size);        $categoryList['selected'] = $proposal?$proposal->getCat()->getCatCat():($idea?$idea->getCat():$categories[0]);        $subCategories = $this->entityManager->getRepository('DGIModule\Entity\Category')->getSubCategories($categoryList['selected']->getCatId(), $level);        $cat = array();        /** @var \DGIModule\Entity\Category $category */        foreach ($subCategories as $category) {            $cat[$category->getCatId()]=$category->getCatName();        }        $categoryList['subCat'] = $cat;        return $categoryList;    }    private function getSubCategoryElement(array $value_options=[]) {        return [            'type' => 'Zend\Form\Element\Select',            'name' => 'sub_category',            'value' => null,            'required' => false,            'attributes' => array(                'id' => 'sub_category',                'class'=>'form-control text-change'            ),            'options' => [                'label' => 'Subcategory: ',                'disable_inarray_validator' => true,                'value_options' => $value_options            ]        ];    }            /**     * Checks implementation level      */    public function checkProposalsAction() {        $id = $this->params('id', '0');                if ($id != $this->config['demodyne']['cron']['check_proposals_id']) exit();                if (!empty($_SERVER['HTTP_CLIENT_IP'])) {            $ip = $_SERVER['HTTP_CLIENT_IP'];        } elseif (!empty($_SERVER['HTTP_X_FORWARDED_FOR'])) {            $ip = $_SERVER['HTTP_X_FORWARDED_FOR'];        } else {            $ip = $_SERVER['REMOTE_ADDR'];        }        if ($ip!=$this->config['demodyne']['cron']['ip']) {            printf('You don\'t have access to this ressource');            exit();        }        $status = $this->config['demodyne']['proposal']['status'];        $proposals = $this->entityManager->getRepository('DGIModule\Entity\Proposal')->getProposalsInStatus($status['debate']);        $now = new \DateTime();        $flush = false;        $voteProposals = [];        /** @var \DGIModule\Entity\Proposal $proposal */        foreach ($proposals as $proposal) {            if ($now->diff($proposal->getPropPublishedDate())->days >= $proposal->getPropDebatePeriod() /*days*/) {                $proposal->setPropStatus($status['vote'])                         ->setPropStatusChangeDate($now);                $this->entityManager->merge($proposal);                // send private message to users                $this->forward()->dispatch('DGIModule\Controller\Email', array(                    'action' => 'proposal-status-changed',                    'id' => $proposal->getPropUUID(),                    'email' => 'true'                ));                $flush = true;                $voteProposals[] = [                    'name'=> $proposal->getPropName(),                    'url' => $this->url()->fromRoute('proposal', array('action'=>'view', 'id'=>$proposal->getPropUUID()), ['force_canonical' => true])                ];            }        }        if ($flush) {            $this->entityManager->flush();        }        $proposals = $this->entityManager->getRepository('DGIModule\Entity\Proposal')->getProposalsCheck1();        $execProposals= [];        foreach ($proposals as $proposal) {            $proposal->setPropCheck(1);            $activeVotes = $this->entityManager->getRepository('DGIModule\Entity\Vote')->getProposalsCheck2($proposal);            $totalVotes = count($proposal->getVotes());            if ((count($activeVotes)/$totalVotes)*100 >= 20) {                $proposal->setPropCheck(2);                $voteAverage = $proposal->getVotesAverage();                if ($voteAverage >= 2) {                    $proposal->setPropCheck(3);                    if ($proposal->getPropCheckTimer()) {                        $dDiff = $proposal->getPropCheckTimer()->diff(new \DateTime());                        $dDiff->format('%R'); // use for point out relation: smaller/greater                        if ($dDiff->days >= 14) {                            $proposal->setPropExecution(1)                                     ->setPropStatus($status['demodyne']['proposal']['status']['plan'])                                     ->setPropStatusChangeDate($now);                            $this->forward()->dispatch('DGIModule\Controller\Email', array(                                'action' => 'proposal-status-changed',                                'id' => $proposal->getPropUUID(),                                'email' => 'true'                            ));                            $execProposals[] = [                                'name'=> $proposal->getPropName(),                                'url' => $this->url()->fromRoute('proposal', array('action'=>'view', 'id'=>$proposal->getPropUUID()), ['force_canonical' => true])                            ];                        }                    }                    else {                        $proposal->setPropCheckTimer(new \DateTime());                    }                }                else {                    $proposal->setPropCheckTimer(null);                }            }            $this->entityManager->merge($proposal);        }        $this->entityManager->flush();        return new JsonModel(            array(                'voteProposals' => [                    'total'=>count($voteProposals),                    'proposals'=>$voteProposals                ],                'execProposals' => [                    'total' => count($execProposals),                    'proposals' => $execProposals                ]            )        );    }        public function ideaImportedProposalsAction() {        $user = $this->identity();                $ideaUUID = $this->params('id');        // no parameter        if (! $ideaUUID) {            return $this->forward()->dispatch('DGIModule\Controller\Error', array(                'action' => 'access-denied',                'dialog' => true            ));        }        $idea = $this->entityManager->getRepository('DGIModule\Entity\Idea')->findOneBy(['ideaUUID' => $ideaUUID]);        if (! $idea) {            return $this->forward()->dispatch('DGIModule\Controller\Error', array(                'action' => 'access-denied',                'dialog' => true            ));        }                $page = $this->params()->fromRoute('page', null);        if (!$page) {            $page = 1;        }        $sort = $this->params()->fromRoute('sort', null);        if (!$sort) {            $sort = 'created-date';        }        $order = $this->params()->fromRoute('order', null);        if (!$order) {            $order = 'desc';        }        $limit= $this->params()->fromRoute('results', null);        if (!$limit) {            $limit = 10;        }        $filter= $this->params()->fromRoute('filter', null);        if (!$filter) {            $filter = 'none';        }        $noProposals = count($idea->getProposals());            $viewModel = new ViewModel();        $page =  ceil((float)$noProposals/$limit) < $page ? ceil((float)$noProposals/$limit) : $page; // Goto last page if page > last page        $offset = $page>0?($page - 1) * $limit:0;        $pagedProposals = $this->entityManager->getRepository('DGIModule\Entity\Proposal')->getIdeaPagedProposals($idea, $offset, $limit, $sort, $order/*, true, $this->config['demodyne']['level'][$filter]*/);        foreach ($pagedProposals as $index => $proposal) {            $statusDetails =  $this->forward()->dispatch('DGIModule\Controller\Proposal', array('action'=>'status-details', 'id' => $proposal->getPropUUID()));            $viewModel->addChild($statusDetails, 'status-details-'.$index);        }        $viewModel->setTerminal($this->getRequest()->isXmlHttpRequest());        $viewModel->setVariables([            'pagedProposals' => $pagedProposals,            'limit' => $limit,            'page' => $page,            'sort' => $sort,            'order' => $order,            'user' => $user,            'noProposals' => $noProposals,            'idea' => $idea        ]);        return $viewModel;    }    /**     * Test action     *     * @return JsonModel     */    public function jsonProposalsAction() {        $user = $this->identity();        if (!$user) {            $user = new User();            $user->setUsrId(0);        }        else {            $user = clone($user);        }        $city = $this->entityManager->getRepository('DGIModule\Entity\City')->findOneBy(['cityId' => 26241]);        if ($city) {            $user->setUsrId(0);            $user->setCountry($city->getCountry());            $user->setCity($city);        }        $session = new Container('proposal');        $page = $this->params()->fromRoute('page', null);        if (!$page) {            if (!$session->allProposalsPage) {                $page = 1;            }            else {                $page = $session->allProposalsPage;            }        }        $session->allProposalsPage = $page;        $sort = $this->params()->fromRoute('sort', null);        if (!$sort) {            if (!$session->allProposalsSort) {                $sort = 'published';            }            else {                $sort = $session->allProposalsSort;            }        }        $session->allProposalsSort = $sort;        $order = $this->params()->fromRoute('order', null);        if (!$order) {            if (!$session->allProposalsOrder) {                $order = 'desc';            }            else {                $order = $session->allProposalsOrder;            }        }        $session->allProposalsOrder = $order;        $limit= $this->params()->fromRoute('results', null);        if (!$limit) {            if (!$session->allProposalsResults) {                $limit = 10;            }            else {                $limit = $session->allProposalsResults;            }        }        $session->allProposalsResults = $limit;        $proposalCount = $this->entityManager->getRepository('DGIModule\Entity\Proposal')->countProposals($user);        $proposalCount = $proposalCount["totalProposals"];        $viewModel = new ViewModel();        $page =  ceil((float)$proposalCount/$limit) < $page ? ceil((float)$proposalCount/$limit) : $page; // Goto last page if page > last page        $offset = $page>0?($page - 1) * $limit:0;        $pagedProposals = $this->entityManager->getRepository('DGIModule\Entity\Proposal')->getPagedProposals($user, $offset, $limit, $sort, $order, false, null);        $viewModel->setTerminal($this->getRequest()->isXmlHttpRequest());        $proposals = [];        foreach ($pagedProposals as $proposal) {            $proposals[] = [                'name' => $proposal->getPropSavedName(),                'description' => $proposal->getPropDescription(),                'uuid' => $proposal->getPropUUID(),                'category' => [                    'main' => $proposal->getCat()->getCatCat()->getCatName(),                    'sub' => $proposal->getCat()->getCatName(),                    'img' => 'https://dev.demodyne.org/files/'.$proposal->getCat()->getCatImage(),                ],                'user' => [                    'name' => $proposal->getUsr()->getUsrName(),                    'avatar' => 'https://dev.demodyne.org'.$proposal->getUsr()->getUsrPicture(),                    'uuid' => $proposal->getUsr()->getUsrUUID()                ]            ];        }        return new JsonModel(array('results' => $proposals));    }        }