<?php/** * @link      https://github.com/demodyne/demodyne * @copyright Copyright (c) 2015-2016 Demodyne (https://www.demodyne.org) * @license   http://www.gnu.org/licenses/agpl.html GNU Affero General Public License */namespace DGIModule\Controller;use Zend\Mvc\Controller\AbstractActionController;use Zend\View\Model\ViewModel;use Zend\Session\Container;use DGIModule\Entity\Proposal;use DGIModule\Entity\Vote;use DGIModule\Entity\Comment;use DGIModule\Entity\Favorite;use DGIModule\Entity\News;use DGIModule\Form\AddEditProposalForm;use DGIModule\Entity\User;class ProposalController extends AbstractActionController{		private function newFile($path, $prefix='', $suffix='')	{	    do	    {	        $file = $path."/".$prefix.mt_rand().$suffix;	        $fp = @fopen($file, 'x');	    }	    while(!$fp);		    fclose($fp);	    return $file;	}		private function saveImageFromPost($image) {	    $propImage = $this->params()->fromPost($image);	    if ($propImage && $propImage!='null') {	        $imgData = str_replace(' ','+',$propImage);	        $imgData =  substr($imgData,strpos($imgData,",")+1);	        $imgData = base64_decode($imgData);	        // Path where the image is going to be saved	        $filePath = $this->newFile(getcwd() . "/public/img/proposals", "proposal", ".jpg");	        // Write $imgData into the image file	        $file = fopen($filePath, 'w');	        fwrite($file, $imgData);	        fclose($file);	        $filename = str_replace(getcwd() . "/public", '', $filePath);	        return $filename;	    }	    else {	        return $propImage;	    }	}	    /**     *      * @todo Change TRIGGER if publish      *      */    public function addProposalAction()    {        $user = $this->identity();        $publish = $this->params('publish');        $session = new Container('level');        $level = $this->params()->fromPost('level');        $level = $level?$level:$session->level;        $entityManager = $this->getServiceLocator()->get('doctrine.entitymanager.orm_default');        $config = $this->getServiceLocator()->get('Config');                $proposal = new Proposal();        $form = new AddEditProposalForm();                $routeLevel = $this->params()->fromRoute('level');        $form->setAttribute('action', $this->url()->fromRoute('proposal', array('action'=>'add-proposal', 'level'=> $routeLevel?$routeLevel:null)));        $categoryList = $this->getMainCategoriesList(null,$level);        $form->add($this->getSubCategoryElement($categoryList['subCat']));                $request = $this->getRequest();        $propCity = $this->params()->fromPost('propCity');                $propDescription = $this->params()->fromPost('propDescription');        if ($request->isPost()){            $form->bind($proposal);            $form->setData($request->getPost());                        $categoryId = $this->params()->fromPost('sub_category');            $propName = $this->params()->fromPost('propSavedName');            if ($form->isValid()) {                                // check if unicity constraint match for user proposals (propSavedName, usr)                $proposalExists = $entityManager->getRepository('DGIModule\Entity\Proposal')->findProposals($user, $propName, $level, $config['demodyne']['level']);                if ($proposalExists) {                    $form->get('propSavedName')->setMessages(['There is alredy a proposal with this name. Please change the name and try again.']);                }                else {                                        $img = $this->saveImageFromPost('propHiddenImage1');                    if ($img) $proposal->setPropImage1($img);                                                            $img = $this->saveImageFromPost('propHiddenImage2');                    if ($img) $proposal->setPropImage2($img);                                                            $img = $this->saveImageFromPost('propHiddenImage3');                    if ($img) $proposal->setPropImage3($img);                                        $category =  $entityManager->getRepository('DGIModule\Entity\Category')->findOneBy(array('catId' => $categoryId));                                        $status = $config['demodyne']['proposal']['status']['type'];                    $now = new \DateTime();                    // prepare data                    $proposal->setPropCreatedDate($now)                                ->setPropSavedDate($now)                                ->setPropStatus($status['draft'])                                ->setPropPublished(0)                                ->setUsr($user)                                ->setCat($category)                                ->setPropLevel($config['demodyne']['level'][$level])                                ->setCity($user->getCity());                                                    // save to all city if district                    if ($propCity) {                        $proposal->setPropFullCity($propCity);                    }                                        $entityManager->persist($proposal);                    $entityManager->flush();                                        // Publish proposal                     if ($publish) {                        $proposal->setPropPublished(1)                                 ->setPropPublishedDate($now)                                 ->setPropName($propName)                                 ->setPropStatus($status['debate']);                        $counters = $user->getCounters();                        if ($counters->getCntProp()<5) {                            $counters->setCntTotal($counters->getCntTotal()+3)                                     ->setCntProp($counters->getCntProp()+1);                            $entityManager->merge($counters);                        }                        $entityManager->merge($proposal);                        $entityManager->flush();                    }                                                            $entityManager->refresh($proposal);                                        if ($proposal->getPropPublished()) {                        $this->forward()->dispatch('DGIModule\Controller\News', array('action' => 'create-news', 'id' => $proposal->getPropId(), 'type' => 'new_proposal'));                    }                    return new \Zend\View\Model\JsonModel(array('success' => true, 'level' => $level));                }            }            else {                $mainCategoryId = $this->params()->fromPost('main_category');                $categoryList['selected'] = $entityManager->getRepository('DGIModule\Entity\Category')->findOneBy(array('catId' => $mainCategoryId));                $categories = $entityManager->getRepository('DGIModule\Entity\Category')->getSubCategories($mainCategoryId, $level);                $cat = array();                foreach ($categories as $category) {                    $cat[$category->getCatId()]=$category->getCatName();                }                $cat[$categoryList['selected']->getCatId()] = 'Other';                $form->get('sub_category')->setOptions(['value_options' => $cat]);            }        }        $errorMessages = [];        $viewModel = new ViewModel();        //disable layout if request by Ajax        $viewModel->setTerminal($this->getRequest()->isXmlHttpRequest());        $viewModel->setTemplate('dgi-module/proposal/add-edit-proposal.phtml');                $viewModel->setVariables([            'form'=>$form,            'subcat' => key($categoryList['subCat']),            'proposition' => $proposal,            'categoryList' => $categoryList,            'errorMessages'=> $errorMessages,            'save' => 1,            'user' => $user,            'propCity' => $propCity,            'level' => $level,            'proposal' => null,            'propDescription' => $propDescription        ]);        return $viewModel;    }        public function editProposalAction()    {        $user = $this->identity();        $propUUID = $this->params('id');        $publish = $this->params('publish');        if (!$propUUID)  {            return $this->forward()->dispatch('DGIModule\Controller\Error', array('action' => 'access-denied'));        }        $session = new Container('level');        $level = $session->level;        $entityManager = $this->getServiceLocator()->get('doctrine.entitymanager.orm_default');        $proposal = $entityManager->getRepository('DGIModule\Entity\Proposal')->findOneBy(array('propUUID' => $propUUID, 'propDeletedDate' => null));        if (!$proposal || $proposal->getUsr()!=$user) {            return $this->forward()->dispatch('DGIModule\Controller\Error', array('action' => 'access-denied'));        }                $config = $this->getServiceLocator()->get('Config');                // verify status        $status = $config['demodyne']['proposal']['status']['type'];        if ($proposal->getPropStatus() > $status['debate'] || $proposal->getUsr()!=$user) {            return $this->forward()->dispatch('DGIModule\Controller\Proposal', array('action' => 'view', 'id' => $propUUID));        }                $unicityConstraint = false;                $form = new AddEditProposalForm();        $proposal->setPropSavedName(str_replace('&rdquo;', '"', $proposal->getPropSavedName()) );        $form->get('propSavedName')->setValue($proposal->getPropSavedName());        $form->get('propDescription')->setValue($proposal->getPropDescription());        $form->setAttribute('action', $this->url()->fromRoute('proposal', array('action'=>'edit-proposal', 'id'=>$proposal->getPropUUID())));                $propCity = $proposal->getPropFullCity();                   $level = $this->params()->fromPost('level');        $propLevel = array_search($proposal->getPropLevel(), $config['demodyne']['level']);        $level = $level?$level:$propLevel;                $propName = $this->params()->fromPost('propSavedName');        if (!$propName) {            $propName = $proposal->getPropSavedName();        }                $propDescription = $this->params()->fromPost('propDescription');                $request = $this->getRequest();                $proposalExists = $entityManager->getRepository('DGIModule\Entity\Proposal')->findProposals($user, $propName, array_search($proposal->getPropLevel(), $config['demodyne']['level']), $config['demodyne']['level']);        if ($proposalExists && $proposalExists!=$proposal) {            $form->get('propSavedName')->setMessages([_('There is alredy a proposal with this name. Please change the name.')]);        }        elseif ($request->isPost()){            $form->bind($proposal);            $form->setData($request->getPost());            $propCity = $this->params()->fromPost('propCity');            if ($form->isValid()){                $img = $this->saveImageFromPost('propHiddenImage1');                if (!$img || $img!='null') {                    $oldFilename = $proposal->getPropImage1();                    if ($oldFilename && file_exists(getcwd() . '/public' . $oldFilename)) {                        unlink(getcwd() . '/public' . $oldFilename);                    }                    if (!$img) {                        $proposal->setPropImage1(null);                    }                    else {                        $proposal->setPropImage1($img);                    }                }                                $img = $this->saveImageFromPost('propHiddenImage2');                                if (!$img || $img!='null') {                        $oldFilename = $proposal->getPropImage2();                        if ($oldFilename && file_exists(getcwd() . '/public' . $oldFilename)) {                            unlink(getcwd() . '/public' . $oldFilename);                        }                        if (!$img) {                            $proposal->setPropImage2(null);                        }                        else {                            $proposal->setPropImage2($img);                        }                    }                                                $img = $this->saveImageFromPost('propHiddenImage3');                if (!$img || $img!='null') {                    $oldFilename = $proposal->getPropImage3();                    if ($oldFilename && file_exists(getcwd() . '/public' . $oldFilename)) {                        unlink(getcwd() . '/public' . $oldFilename);                    }                    if (!$img) {                        $proposal->setPropImage3(null);                    }                    else {                        $proposal->setPropImage3($img);                    }                }                                $categoryId = $this->params()->fromPost('sub_category');                $category =  $entityManager->getRepository('DGIModule\Entity\Category')->findOneBy(array('catId' => $categoryId));                // prepare data                $proposal->setPropSavedDate(new \DateTime())                         ->setPropLevel($config['demodyne']['level'][$level])                         ->setCat($category);                 // save to all city if district                 if ($propCity) {                     $proposal->setPropFullCity($propCity);                 }                               if ($proposal->getPropPublished()) {                    $proposal->setPropName($proposal->getPropSavedName());                }                else {                    // Publish proposal                    if ($publish) {                        $proposal->setPropPublished(1)                                ->setPropPublishedDate(new \DateTime())                                ->setPropName($proposal->getPropSavedName())                                ->setPropStatus($status['debate']);                        $counters = $user->getCounters();                        if ($counters->getCntProp()<5) {                            $counters->setCntTotal($counters->getCntTotal()+3)                                     ->setCntProp($counters->getCntProp()+1);                            $entityManager->merge($counters);                        }                        $entityManager->merge($proposal);                        $entityManager->flush();                    }                }                $entityManager->merge($proposal);                try {                    $entityManager->flush();                    return new \Zend\View\Model\JsonModel(array('success' => true, 'level' => 'edit'));                }                catch( \Doctrine\DBAL\Exception\UniqueConstraintViolationException $e )                {                    $form->get('propSavedName')->setMessages(['There is alredy a proposal with this name published in your city']);                    $unicityConstraint = true;                }            }        }        $categoryList = $this->getMainCategoriesList($proposal, $level);        // add sub_category select list        $form->add($this->getSubCategoryElement($categoryList['subCat']));        $form->get('sub_category')->setValue($proposal->getCat()->getCatId());        $viewModel = new ViewModel();                if ($proposal->getPropPublished()) {            $commentListSection = $this->forward()->dispatch('DGIModule\Controller\Comment', array('action' => 'list', 'type' =>'proposal',  'id' => $propUUID, 'ajax'=>false, 'actions' => 'false'));            $viewModel->addChild($commentListSection, 'commentListSection');        }        //disable layout if request by Ajax        $viewModel->setTerminal($this->getRequest()->isXmlHttpRequest());        $form->get('propHiddenImage1')->setValue('null');        $form->get('propHiddenImage2')->setValue('null');        $form->get('propHiddenImage3')->setValue('null');                $viewModel->setTemplate('dgi-module/proposal/add-edit-proposal.phtml');                $viewModel->setVariables([            'form'=>$form,            'proposal' => $proposal,            'categoryList' => $categoryList,            'user' => $user,            'propCity' => $propCity,            'level' => $level,            'propDescription' => $propDescription        ]);        return $viewModel;    }        /**     *  This action deletes a proposal permanently if proposal not published or marking as deleted if published     *      * @return \Zend\View\Model\JsonModel|\Zend\View\Model\ViewModel     */    public function deleteAction()    {         $user = $this->identity();        $propUUID = $this->params('id', '0');        // no parameter        if (!$propUUID) {            return $this->forward()->dispatch('DGIModule\Controller\Error', array('action' => 'access-denied'));        }        $entityManager = $this->getServiceLocator()->get('doctrine.entitymanager.orm_default');        $config = $this->getServiceLocator()->get('Config');        $proposal = $entityManager->getRepository('DGIModule\Entity\Proposal')->findOneBy(array('propUUID' => $propUUID, 'propDeletedDate' => null));        // proposal doesn't exists or the logged user is not the owner and user not admin        // @todo Create moderation system based on points         if (!$proposal || ($proposal->getUsr()!=$user && $user->getUsrlId()!=$config['demodyne']['account']['type']['admin'])) {            return $this->forward()->dispatch('DGIModule\Controller\Error', array('action' => 'access-denied'));        }        $request = $this->getRequest();        $error = null;         // verify status        $config = $this->getServiceLocator()->get('Config');        $status = $config['demodyne']['proposal']['status']['type'];        if ($proposal->getPropStatus() > $status['debate']) {            $error = 'This proposal has passed the debate phase.';        }        if (!$error && $request->isPost()){            // if already deleted            if ($proposal->getPropDeletedDate()) {                return new \Zend\View\Model\JsonModel(array('success' => true));            }            if ($proposal->getPropPublished()) {                $proposal->setPropDeletedDate(new \DateTime())                               ->setDeletedUsr($user)                               ->setPropName($proposal->getPropUUID());                $entityManager->merge($proposal);            }            else {                $entityManager->remove($proposal);            }            $entityManager->flush();            if ($proposal->getPropPublished()) {                $this->forward()->dispatch('DGIModule\Controller\News', array('action' => 'create-news', 'id' => $proposal->getPropId(), 'type' => 'deleted_proposal'));            }            return new \Zend\View\Model\JsonModel(array('success' => true));        }        $viewModel = new ViewModel();        //disable layout if request by Ajax        $viewModel->setTerminal($this->getRequest()->isXmlHttpRequest());        $viewModel->setVariables([            'proposal' => $proposal,            'error' => $error        ]);        return $viewModel;    }        /**     * View action to see details about a proposal     *      */    public function viewAction()    {        $user = $this->identity();        $propUUID = $this->params('id');        if (!$propUUID) {            return $this->forward()->dispatch('DGIModule\Controller\Error', array('action' => 'access-denied'));        }        $entityManager = $this->getServiceLocator()->get('doctrine.entitymanager.orm_default');        $proposal = $entityManager->getRepository('DGIModule\Entity\Proposal')->findOneBy(array('propUUID' => $propUUID, 'propDeletedDate' => null));        if ( !$proposal || (!$proposal->getPropPublished() && $proposal->getUsr()!=$user) ) {            return $this->forward()->dispatch('DGIModule\Controller\Error', array('action' => 'access-denied'));        }        $guestSession = new Container('guest');        if (!$user && !$guestSession->country) {                        $guestSession->country = $proposal->getCity()->getCountry()->getCountryId();            $guestSession->countryName = $proposal->getCity()->getCountry()->getCountryName();            $levelSession = new Container('level');            $config = $this->getServiceLocator()->get('Config');            if ($proposal->getPropLevel()==$config['demodyne']['level']['country']) {                $levelSession->level = 'country';                $levelSession->levelValue = $config['demodyne']['level']['country'];                $guestSession->level = 'country';            }             else {                $guestSession->city = $proposal->getCity()->getCityId();                $guestSession->cityName = $proposal->getCity()->getCityName();                $guestSession->postalCode = $proposal->getCity()->getCityPostalcode();                                // TODO : change level to city                                $guestSession->level = 'country';                $levelSession->level = 'country';                $levelSession->levelValue = $config['demodyne']['level']['country'];            }        }                $status = $this->getServiceLocator()->get('Config');        $status = $status['demodyne']['proposal']['status']['type'];                $viewModel = new ViewModel();        $viewModel->setTerminal($this->getRequest()->isXmlHttpRequest());                $statusSection = $this->forward()->dispatch('DGIModule\Controller\Proposal', array('action'=>'status', 'id' => $propUUID));        $viewModel->addChild($statusSection, 'statusSection');                if ($proposal->getPropPublished()) {            $commentsSection = $this->forward()->dispatch('DGIModule\Controller\Comment', array('action'=>'add-comment', 'type' =>'proposal',  'id' => $propUUID, 'ajax' => false));            $viewModel->addChild($commentsSection, 'commentsSection');            $voteSection = $this->forward()->dispatch('DGIModule\Controller\Vote', array('action'=>'add', 'id' => $propUUID, 'terminal'=>false));            $viewModel->addChild($voteSection, 'voteSection');        }                $viewModel->setVariables([            'proposal'   => $proposal,            'mainCategoryImage' => $proposal->getCat()->getCatImage(),            'mainCategoryName' => $proposal->getCat()->getCatCat()->getCatName(),            'subCategoryName' => $proposal->getCat()->getCatName(),            'user'          => $user        ]);        return $viewModel;    }        /**     * This action shows the status of a proposal : draft, debate, vote, plan, execute, followup     *      * @todo Add behaviour to advance the status     */    public function statusAction()    {        $propUUID = $this->params('id');        if (!$propUUID) {            return $this->forward()->dispatch('DGIModule\Controller\Error', array('action' => 'access-denied'));        }        $entityManager = $this->getServiceLocator()->get('doctrine.entitymanager.orm_default');        $proposal = $entityManager->getRepository('DGIModule\Entity\Proposal')->findOneBy(array('propUUID' => $propUUID));        if (!$proposal) {            return $this->forward()->dispatch('DGIModule\Controller\Error', array('action' => 'access-denied'));        }        $config = $this->getServiceLocator()->get('Config');        $status = $config['demodyne']['proposal']['status']['type'];        if ($proposal->getPropPublished()) {            $now = new \DateTime();            $flush = false;            if ($proposal->getPropStatus() == $status['debate'] && $now->diff($proposal->getPropPublishedDate())->days >= $proposal->getPropDebatePeriod() /*days*/) {                $proposal->setPropStatus($status['vote']);                $flush = true;            }            if ($flush) {                $entityManager->merge($proposal);                $entityManager->flush();            }        }        return [            'proposal'   => $proposal,        ];    }        public function statusDetailsAction()    {        $user = $this->identity();        $propUUID = $this->params('id');        if (!$propUUID) {            return $this->forward()->dispatch('DGIModule\Controller\Error', array('action' => 'access-denied'));        }        $entityManager = $this->getServiceLocator()->get('doctrine.entitymanager.orm_default');        $proposal = $entityManager->getRepository('DGIModule\Entity\Proposal')->findOneBy(array('propUUID' => $propUUID));        if ( !$proposal || (!$proposal->getPropPublished() && $proposal->getUsr()!=$user) ) {            return $this->forward()->dispatch('DGIModule\Controller\Error', array('action' => 'access-denied'));        }        $viewModel = new ViewModel();        $status = $this->getServiceLocator()->get('Config');        $status = $status['demodyne']['proposal']['status']['type'];        if ($proposal->isMeasure()) {            $voteSection = $this->forward()->dispatch('DGIModule\Controller\Vote', array('action'=>'view', 'id' => $proposal->getPropUUID(), 'terminal' => false, 'text'=> false));            $viewModel->addChild($voteSection, 'voteSection');        }        else {                        if ($proposal->getPropPublished()) {                $now = new \DateTime();                $flush = false;                if ($proposal->getPropStatus() == $status['debate'] && $now->diff($proposal->getPropPublishedDate())->days >= $proposal->getPropDebatePeriod() /*days*/) {                    $proposal->setPropStatus($status['vote']);                    $flush = true;                }                if ($flush) {                    $entityManager->merge($proposal);                    $entityManager->flush();                }            }                        if ($proposal->getPropStatus() >= $status['vote']) {                $voteSection = $this->forward()->dispatch('DGIModule\Controller\Vote', array('action'=>'view', 'id' => $propUUID, 'terminal' => false, 'text'=> false));                $viewModel->addChild($voteSection, 'voteSection');            }        }        $viewModel->setVariables([            'proposal'   => $proposal,            'status' => $status        ]);        return $viewModel;    }        public function publishProposalAction()    {        $user = $this->identity();        $propUUID = $this->params('id');        // no parameter        if (!$propUUID) {              return $this->forward()->dispatch('DGIModule\Controller\Error', array('action' => 'access-denied'));        }                $entityManager = $this->getServiceLocator()->get('doctrine.entitymanager.orm_default');        $config = $this->getServiceLocator()->get('Config');        $proposal = $entityManager->getRepository('DGIModule\Entity\Proposal')->findOneBy(array('propUUID' => $propUUID));        // proposal doesn't exists or the logged user is not the owner         if (!$proposal || $proposal->getUsr()!=$user) {             return $this->forward()->dispatch('DGIModule\Controller\Error', array('action' => 'access-denied'));        }                // check if unicity constraint match for user proposals (propSavedName, usr)        $error = null;        $config = $this->getServiceLocator()->get('Config');        $proposalExists = $entityManager->getRepository('DGIModule\Entity\Proposal')->findProposals($user, $proposal->getPropSavedName(), array_search($proposal->getPropLevel(), $config['demodyne']['level']), $config['demodyne']['level']);        if ($proposalExists && $proposalExists!=$proposal) {            $error = _('There is alredy a proposal with this name. Please change the name and try again.');        }                $request = $this->getRequest();        if ($request->isPost() && !$error){            // if already published            if ($proposal->getPropPublished()) {                return new \Zend\View\Model\JsonModel(array('success' => true));            }            $proposal->setPropPublished(1)                        ->setPropSavedDate(new \DateTime())                        ->setPropName($proposal->getPropSavedName())                        ->setPropPublishedDate(new \DateTime())                        ->setPropStatus($config['demodyne']['proposal']['status']['type']['debate']);             $entityManager->merge($proposal);            $counters = $user->getCounters();            if ($counters->getCntProp()<5) {                $counters->setCntTotal($counters->getCntTotal()+3)                         ->setCntProp($counters->getCntProp()+1);                $entityManager->merge($counters);            }            try {                $entityManager->flush();                $this->forward()->dispatch('DGIModule\Controller\News', array('action' => 'create-news', 'id' => $proposal->getPropId(), 'type' => 'new_proposal'));                return new \Zend\View\Model\JsonModel(array('success' => true));            }            catch( \Doctrine\DBAL\Exception\UniqueConstraintViolationException $e )            {                return new \Zend\View\Model\JsonModel(array('success' => false));                 // @todo Show error message: same name proposal already published            }        }                $viewModel = new ViewModel();        //disable layout if request by Ajax        $viewModel->setTerminal($this->getRequest()->isXmlHttpRequest());        $viewModel->setVariables([            'proposal' => $proposal,           'error' => $error        ]);        return $viewModel;    }        public function prolongDebateAction()    {        $user = $this->identity();                $propUUID = $this->params('id');        // no parameter        if (!$propUUID) {            return $this->forward()->dispatch('DGIModule\Controller\Error', array('action' => 'access-denied'));        }                $entityManager = $this->getServiceLocator()->get('doctrine.entitymanager.orm_default');        $proposal = $entityManager->getRepository('DGIModule\Entity\Proposal')->findOneBy(array('propUUID' => $propUUID));        // proposal doesn't exists OR the logged user is not the owner of the proposal OR the proposal is not published        if (!$proposal || !$proposal->getPropPublished() || $proposal->getUsr()!=$user) {            return $this->forward()->dispatch('DGIModule\Controller\Error', array('action' => 'access-denied'));        }        $request = $this->getRequest();        if ($request->isPost()){            $proposal->setPropDebatePeriod($proposal->getPropDebatePeriod() + 14);            $entityManager->merge($proposal);            $entityManager->flush();            return new \Zend\View\Model\JsonModel(array('success' => true, 'debate' => $proposal->getPropDebatePeriod()));        }        $viewModel = new ViewModel();        //disable layout if request by Ajax        $viewModel->setTerminal($this->getRequest()->isXmlHttpRequest());        $viewModel->setVariables([            'proposal' => $proposal,                    ]);        return $viewModel;    }        /**     * Shows the list of proposals for the viewed level     */    public function allProposalsAction() {        $user = $this->identity();                $guestSession = new Container('guest');        if (!$user &&  !$guestSession->country) {            return $this->forward()->dispatch('DGIModule\Controller\Error', array('action' => 'access-denied'));        }        $entityManager = $this->getServiceLocator()->get('doctrine.entitymanager.orm_default');                if (!$user) {            $user = new User();            $user->setUsrId(0);                    }        else {            $user = clone($user);        }                if ($guestSession->country) {            $user->setCountry($entityManager->getRepository('DGIModule\Entity\Country')->findOneBy(['countryId' => $guestSession->country]));            if ($guestSession->city) {                $user->setCity($entityManager->getRepository('DGIModule\Entity\City')->findOneBy(['cityId' => $guestSession->city]));            }        }                $session = new Container('proposal');        $page = $this->params()->fromRoute('page', null);        if (!$page) {            if (!$session->allProposalsPage) {                $page = 1;            }            else {                $page = $session->allProposalsPage;            }        }        $session->allProposalsPage = $page;        $sort = $this->params()->fromRoute('sort', null);        if (!$sort) {            if (!$session->allProposalsSort) {                $sort = 'published';            }            else {                $sort = $session->allProposalsSort;            }        }        $session->allProposalsSort = $sort;        $order = $this->params()->fromRoute('order', null);        if (!$order) {            if (!$session->allProposalsOrder) {                $order = 'desc';            }            else {                $order = $session->allProposalsOrder;            }        }        $session->allProposalsOrder = $order;        $limit= $this->params()->fromRoute('results', null);        if (!$limit) {            if (!$session->allProposalsResults) {                $limit = 5;            }            else {                $limit = $session->allProposalsResults;            }        }        $session->allProposalsResults = $limit;        $config = $this->getServiceLocator()->get('Config');        $proposalCount = $entityManager->getRepository('DGIModule\Entity\Proposal')->countProposals($user);        $proposalCount = $proposalCount["totalProposals"];        $viewModel = new ViewModel();        $page =  ceil((float)$proposalCount/$limit) < $page ? ceil((float)$proposalCount/$limit) : $page; // Goto last page if page > last page        $offset = $page>0?($page - 1) * $limit:0;        $pagedProposals = $entityManager->getRepository('DGIModule\Entity\Proposal')->getPagedProposals($user, $offset, $limit, $sort, $order);        foreach ($pagedProposals as $index => $proposal) {            $status =  $this->forward()->dispatch('DGIModule\Controller\Proposal', array('action'=>'status', 'id' => $proposal->getPropUUID()));            $viewModel->addChild($status, 'status-'.$index);                        $statusDetails =  $this->forward()->dispatch('DGIModule\Controller\Proposal', array('action'=>'status-details', 'id' => $proposal->getPropUUID()));            $viewModel->addChild($statusDetails, 'status-details-'.$index);        }        $viewModel->setTerminal($this->getRequest()->isXmlHttpRequest());        $viewModel->setVariables([            'pagedProposals' => $pagedProposals,            'limit' => $limit,            'page' => $page,            'sort' => $sort,            'order' => $order,            'user' => $user,            'proposalCount' => $proposalCount,            //'statusList' => $statusList        ]);        return $viewModel;    }        public function myProposalsAction() {        $user = $this->identity();        $session = new Container('proposal');        $page = $this->params()->fromRoute('page', null);        if (!$page) {            if (!$session->myProposalsPage) {                $page = 1;            }            else {                $page = $session->myProposalsPage;            }        }        $session->myProposalsPage = $page;        $sort = $this->params()->fromRoute('sort', null);        if (!$sort) {            if (!$session->myProposalsSort) {                $sort = 'created-date';            }            else {                $sort = $session->myProposalsSort;            }        }        $session->myProposalsSort = $sort;        $order = $this->params()->fromRoute('order', null);        if (!$order) {            if (!$session->myProposalsOrder) {                $order = 'desc';            }            else {                $order = $session->myProposalsOrder;            }        }        $session->myProposalsOrder = $order;        $limit= $this->params()->fromRoute('results', null);        if (!$limit) {            if (!$session->myProposalsResults) {                $limit = 5;            }            else {                $limit = $session->myProposalsResults;            }        }        $session->myProposalsResults = $limit;        $filter= $this->params()->fromRoute('filter', null);        if (!$filter) {            if (!$session->myProposalsFilter) {                $filter = 'none';            }            else {                $filter = $session->myProposalsFilter;            }        }        $session->myProposalsFilter = $filter;                $entityManager = $this->getServiceLocator()->get('doctrine.entitymanager.orm_default');        // get number of user proposals         $query = $entityManager->createQuery('SELECT COUNT(distinct p.propId) as noProposals                                               FROM DGIModule\Entity\Proposal p                                               WHERE p.usr=:user AND p.propDeletedDate IS NULL AND p.measure IS NULL')                               ->setParameter('user', $user);        $noProposals = $query->getOneOrNullResult();        $noProposals = $noProposals['noProposals'];                $config = $this->getServiceLocator()->get('Config');               $query = $entityManager->createQuery('SELECT COUNT(distinct p.propId) as cityProposals                                                FROM DGIModule\Entity\Proposal p                                                WHERE p.usr=:user AND p.propDeletedDate IS NULL AND p.measure IS NULL AND p.propLevel=:level')                              ->setParameter('user', $user)->setParameter('level', $config['demodyne']['level']['city']);       $cityProposals = $query->getOneOrNullResult();       $cityProposals = $cityProposals['cityProposals'];                                                             $query = $entityManager->createQuery('SELECT COUNT(distinct p.propId) as regionProposals                                                FROM DGIModule\Entity\Proposal p                                                WHERE p.usr=:user AND p.propDeletedDate IS NULL AND p.measure IS NULL AND p.propLevel=:level')                                                       ->setParameter('user', $user)->setParameter('level', $config['demodyne']['level']['region']);       $regionProposals = $query->getOneOrNullResult();       $regionProposals = $regionProposals['regionProposals'];       $query = $entityManager->createQuery('SELECT COUNT(distinct p.propId) as countryProposals                                                FROM DGIModule\Entity\Proposal p                                                WHERE p.usr=:user AND p.propDeletedDate IS NULL AND p.measure IS NULL AND p.propLevel=:level')                                                       ->setParameter('user', $user)->setParameter('level', $config['demodyne']['level']['country']);       $countryProposals = $query->getOneOrNullResult();       $countryProposals = $countryProposals['countryProposals'];        $viewModel = new ViewModel();               $page =  ceil((float)$noProposals/$limit) < $page ? ceil((float)$noProposals/$limit) : $page; // Goto last page if page > last page        $offset = $page>0?($page - 1) * $limit:0;                $pagedProposals = $entityManager->getRepository('DGIModule\Entity\Proposal')->getUserPagedProposals($user, $offset, $limit, $sort, $order, false, $config['demodyne']['level'][$filter]);                foreach ($pagedProposals as $index => $proposal) {            $status =  $this->forward()->dispatch('DGIModule\Controller\Proposal', array('action'=>'status', 'id' => $proposal->getPropUUID()));            $viewModel->addChild($status, 'status-'.$index);            $statusDetails =  $this->forward()->dispatch('DGIModule\Controller\Proposal', array('action'=>'status-details', 'id' => $proposal->getPropUUID()));            $viewModel->addChild($statusDetails, 'status-details-'.$index);        }                $viewModel->setTerminal($this->getRequest()->isXmlHttpRequest());        $viewModel->setVariables([            'pagedProposals' => $pagedProposals,            'limit' => $limit,            'page' => $page,            'sort' => $sort,            'order' => $order,            'filter' => $filter,            'user' => $user,            'noProposals' => $noProposals,             'cityProposals' => $cityProposals,            'regionProposals' => $regionProposals,            'countryProposals' => $countryProposals,        ]);        return $viewModel;    }        public function myFavoritesAction() {        $user = $this->identity();        $session = new Container('proposal');        $page = $this->params()->fromRoute('page', null);        if (!$page) {            if (!$session->myFavoritesPage) {                $page = 1;            }            else {                $page = $session->myFavoritesPage;            }        }        $session->myFavoritesPage = $page;        $sort = $this->params()->fromRoute('sort', null);        if (!$sort) {            if (!$session->myFavoritesSort) {                $sort = 'name';            }            else {                $sort = $session->myFavoritesSort;            }        }        $session->myFavoritesSort = $sort;        $order = $this->params()->fromRoute('order', null);        if (!$order) {            if (!$session->myFavoritesOrder) {                $order = 'asc';            }            else {                $order = $session->myFavoritesOrder;            }        }        $session->myFavoritesOrder = $order;        $limit= $this->params()->fromRoute('results', null);        if (!$limit) {            if (!$session->myFavoritesResults) {                $limit = 5;            }            else {                $limit = $session->myFavoritesResults;            }        }        $session->myFavoritesResults = $limit;        $entityManager = $this->getServiceLocator()->get('doctrine.entitymanager.orm_default');        // get number of user favorites        $query = $entityManager->createQuery('SELECT COUNT(distinct f.favId) as noFavorites                                               FROM DGIModule\Entity\Favorite f LEFT JOIN DGIModule\Entity\Proposal p WITH  f.prop=p                                               WHERE f.usr=:user AND p.propDeletedDate IS NULL')                               ->setParameter('user', $user);        $noFavorites = $query->getOneOrNullResult();        $noFavorites = $noFavorites['noFavorites'];        $viewModel = new ViewModel();        $page =  ceil((float)$noFavorites/$limit) < $page ? ceil((float)$noFavorites/$limit) : $page; // Goto last page if page > last page        $offset = ($page == 0) ? 0 : ($page - 1) * $limit;                $pagedProposals = $entityManager->getRepository('DGIModule\Entity\Proposal')->getUserPagedFavorites($user, $offset, $limit, $sort, $order);                foreach ($pagedProposals as $index => $proposal) {            $status =  $this->forward()->dispatch('DGIModule\Controller\Proposal', array('action'=>'status', 'id' => $proposal->getPropUUID()));            $viewModel->addChild($status, 'status-'.$index);            $statusDetails =  $this->forward()->dispatch('DGIModule\Controller\Proposal', array('action'=>'status-details', 'id' => $proposal->getPropUUID()));            $viewModel->addChild($statusDetails, 'status-details-'.$index);        }                $viewModel->setTerminal($this->getRequest()->isXmlHttpRequest());        $viewModel->setVariables([            'pagedProposals' => $pagedProposals,            'limit' => $limit,            'page' => $page,            'sort' => $sort,            'order' => $order,            'user' => $user,            'noFavorites' => $noFavorites        ]);        return $viewModel;    }        public function favoriteAction() {        $request = $this->getRequest();        $response = $this->getResponse();        $user = $this->identity();        $propUUID = $this->params('id');        $entityManager = $this->getServiceLocator()->get('doctrine.entitymanager.orm_default');        $proposal = $entityManager->getRepository('DGIModule\Entity\Proposal')->findOneBy(array('propUUID' => $propUUID, 'propDeletedDate'=>null, 'propPublished'=>1));        // proposition doesn't exists        if (!$proposal) {            $response->setContent(\Zend\Json\Json::encode(array('success'=> 0)));            return $response;        }        $favorite = $entityManager->getRepository('DGIModule\Entity\Favorite')->findOneBy(array('prop' => $proposal, 'usr' => $user));            if ($favorite) {            $entityManager->remove($favorite);            $success = 1;        }        else {            $favorite = new Favorite();            $favorite->setProp($proposal)                     ->setUsr($user);            $entityManager->persist($favorite);            $success = 2;        }        $entityManager->flush();        $response->setContent(\Zend\Json\Json::encode(array('success'=> $success)));        return $response;    }        private static function cmp($a, $b) {        if ($a['score'] == $b['score']) {            return 0;        }        return ($a['score'] > $b['score']) ? -1 : 1;    }        /***     *      * TODO: Partner : get top proposition for regions     *      * @return \Zend\View\Model\ViewModel     */    public function topProposalsAction()    {        $user = $this->identity();                $guestSession = new Container('guest');        if (!$user &&  !$guestSession->country) {            return $this->forward()->dispatch('DGIModule\Controller\Error', array('action' => 'access-denied'));        }        $entityManager = $this->getServiceLocator()->get('doctrine.entitymanager.orm_default');                if (!$user) {            $user = new User();            $user->setUsrId(0);            $user->setCountry($entityManager->getRepository('DGIModule\Entity\Country')->findOneBy(['countryId' => $guestSession->country]));            if ($guestSession->city) {                $user->setCity($entityManager->getRepository('DGIModule\Entity\City')->findOneBy(['cityId' => $guestSession->city]));            }        }                $session = new Container('level');        $level = $session->level;        $config = $this->getServiceLocator()->get('Config');        $entityManager = $this->getServiceLocator()->get('doctrine.entitymanager.orm_default');                $limit = 5; // how many top proposal to show        $topProposals = $entityManager->getRepository('DGIModule\Entity\Proposal')->getTopProposals($user, $level, $config['demodyne']['level'], $limit);                $viewModel = new ViewModel();$proposals = [];        foreach ($topProposals as $index => $proposal) {            $proposals[$index]['proposal'] = $proposal;            $topScore = $entityManager->getRepository('DGIModule\Entity\Vote')->getTopValue($proposal, $config['demodyne']['level']);            $proposals[$index]['score'] = $topScore['toppoints'];        }        usort($proposals, array('\DGIModule\Controller\ProposalController','cmp'));                foreach ($proposals as $index => $proposal) {            $voteSection = $this->forward()->dispatch('DGIModule\Controller\Vote', array('action'=>'view', 'id' => $proposal['proposal']->getPropUUID(), 'terminal' => false, 'text'=> true));            $viewModel->addChild($voteSection,  'vote-'.$index);            if ($index==$limit-1) break;        }                $viewModel->setTerminal($this->getRequest()->isXmlHttpRequest());        $viewModel->setVariables([            'topProposals' => $proposals        ]);        return $viewModel;    }        /**     * @todo     *     * @return \Zend\View\Model\ViewModel     */    public function userProposalsAction() {                $usrUUID = $this->params('id', '0');        $entityManager = $this->getServiceLocator()->get('doctrine.entitymanager.orm_default');        $user = $entityManager->getRepository('DGIModule\Entity\User')->findOneBy(array('usrUUID' => $usrUUID, 'usrDeletedDate'=>null));        if (!$user) {            return $this->forward()->dispatch('DGIModule\Controller\Error', array('action' => 'access-denied'));        }                $me = $this->identity();                $guestSession = new Container('guest');        if (!$user && !$guestSession->country) {                    $guestSession->country = $user->getCountry()->getCountryId();            $guestSession->countryName = $user->getCountry()->getCountryName();            $levelSession = new Container('level');            $config = $this->getServiceLocator()->get('Config');            $levelSession->level = 'country';            $levelSession->levelValue = $config['demodyne']['level']['country'];            $guestSession->level = 'country';                    }                $session = new Container('proposal');        $sessionId = 'userProposal'.str_replace('-', '', $usrUUID);        $sessionUserProposals = $session->userProposals;        $page = $this->params()->fromRoute('page', null);        if (!$page) {            if (!isset($sessionUserProposals[$usrUUID]['page'])) {                $page = 1;            }            else {                $page = $sessionUserProposals[$usrUUID]['page'];            }        }        $sessionUserProposals[$usrUUID]['page'] = $page;        $sort = $this->params()->fromRoute('sort', null);        if (!$sort) {            if (!isset($sessionUserProposals[$usrUUID]['sort'])) {                $sort = 'published';            }            else {                $sort = $sessionUserProposals[$usrUUID]['sort'];            }        }        $sessionUserProposals[$usrUUID]['sort'] = $sort;        $order = $this->params()->fromRoute('order', null);        if (!$order) {            if (!isset($sessionUserProposals[$usrUUID]['order'])) {                $order = 'desc';            }            else {                $order = $sessionUserProposals[$usrUUID]['order'];            }        }        $sessionUserProposals[$usrUUID]['order'] = $order;        $limit= $this->params()->fromRoute('results', null);        if (!$limit) {            if (!isset($sessionUserProposals[$usrUUID]['results'])) {                $limit = 5;            }            else {                $limit = $sessionUserProposals[$usrUUID]['results'];            }        }        $sessionUserProposals[$usrUUID]['results'] = $limit;                $filter= $this->params()->fromRoute('filter', null);        if (!$filter) {            if (!isset($sessionUserProposals[$usrUUID]['filter'])) {                $filter = 'none';            }            else {                $filter = $sessionUserProposals[$usrUUID]['filter'];            }        }        $sessionUserProposals[$usrUUID]['filter'] = $filter;                        $session->userProposals = $sessionUserProposals;                $ajax = $this->params()->fromRoute('ajax', true);        $entityManager = $this->getServiceLocator()->get('doctrine.entitymanager.orm_default');        $query = $entityManager->createQuery('SELECT COUNT(distinct p.propId) as noProposals                                               FROM DGIModule\Entity\Proposal p                                               WHERE p.usr=:user AND p.propDeletedDate IS NULL AND p.propPublished=1')                               ->setParameter('user', $user);       $noProposals = $query->getOneOrNullResult();       $totalResults =  $noProposals['noProposals'];              $page = $limit!='all'? (ceil($totalResults/$limit) < $page ? ceil($totalResults/$limit) : $page) : $page; // @todo Goto last page if page > last page              $config = $this->getServiceLocator()->get('Config');              $query = $entityManager->createQuery('SELECT COUNT(distinct p.propId) as cityProposals                                                FROM DGIModule\Entity\Proposal p                                                WHERE p.usr=:user AND p.propDeletedDate IS NULL AND p.propPublished=1 AND p.measure IS NULL AND p.propLevel=:level')                                                       ->setParameter('user', $user)->setParameter('level', $config['demodyne']['level']['city']);       $cityProposals = $query->getOneOrNullResult();       $cityProposals = $cityProposals['cityProposals'];       $query = $entityManager->createQuery('SELECT COUNT(distinct p.propId) as regionProposals                                            FROM DGIModule\Entity\Proposal p                                            WHERE p.usr=:user AND p.propDeletedDate IS NULL AND p.propPublished=1 AND p.measure IS NULL AND p.propLevel=:level')                                ->setParameter('user', $user)->setParameter('level', $config['demodyne']['level']['region']);       $regionProposals = $query->getOneOrNullResult();       $regionProposals = $regionProposals['regionProposals'];       $query = $entityManager->createQuery('SELECT COUNT(distinct p.propId) as countryProposals                                            FROM DGIModule\Entity\Proposal p                                            WHERE p.usr=:user AND p.propDeletedDate IS NULL AND p.propPublished=1 AND p.measure IS NULL AND p.propLevel=:level')                                                   ->setParameter('user', $user)->setParameter('level', $config['demodyne']['level']['country']);       $countryProposals = $query->getOneOrNullResult();       $countryProposals = $countryProposals['countryProposals'];       $viewModel = new ViewModel();       $offset = ($page == 0) ? 0 : ($page - 1) * $limit;              $pagedProposals = $entityManager->getRepository('DGIModule\Entity\Proposal')->getUserPagedProposals($user, $offset, $limit, $sort, $order, true, $config['demodyne']['level'][$filter]);              foreach ($pagedProposals as $index => $proposal) {           $status =  $this->forward()->dispatch('DGIModule\Controller\Proposal', array('action'=>'status', 'id' => $proposal->getPropUUID()));           $viewModel->addChild($status, 'status-'.$index);           $statusDetails =  $this->forward()->dispatch('DGIModule\Controller\Proposal', array('action'=>'status-details', 'id' => $proposal->getPropUUID()));           $viewModel->addChild($statusDetails, 'status-details-'.$index);       }              $viewModel->setTerminal($this->getRequest()->isXmlHttpRequest());       $viewModel->setVariables([           'pagedProposals' => $pagedProposals,           'limit' => $limit,           'page' => $page,           'sort' => $sort,           'order' => $order,           'filter' => $filter,           'user' => $user,           'me' => $me,           'noProposals' => $noProposals['noProposals'],             'cityProposals' => $cityProposals,            'regionProposals' => $regionProposals,            'countryProposals' => $countryProposals,       ]);       return $viewModel;    }        private function getMainCategoriesList(\DGIModule\Entity\Proposal $proposal=null, $level='city') {        $entityManager = $this->getServiceLocator()->get('doctrine.entitymanager.orm_default');        $categories = $entityManager->getRepository('DGIModule\Entity\Category')->getMainCategories($this->identity(), $level);        $size = ceil(count($categories)/2);        $categoryList = [];        $categoryList['list1'] = $categories;        $categoryList['selected'] = $proposal?$proposal->getCat()->getCatCat():$categories[0];        $subCategories = $entityManager->getRepository('DGIModule\Entity\Category')->getSubCategories($categoryList['selected']->getCatId(), $level);        $cat = array();        foreach ($subCategories as $category) {            $cat[$category->getCatId()]=$category->getCatName();        }        $categoryList['subCat'] = $cat;        return $categoryList;    }    private function getSubCategoryElement(array $value_options=[]) {        return [            'type' => 'Zend\Form\Element\Select',            'name' => 'sub_category',            'value' => null,            'required' => false,            'attributes' => array(                'id' => 'sub_category',                'class'=>'form-control text-change'            ),            'options' => [                'label' => 'Subcategory: ',                'disable_inarray_validator' => true,                'value_options' => $value_options            ]        ];    }        /**     * Checks implementation conditions      */    public function checkProposalsAction() {        $user = $this->identity();                $id = $this->params('id', '0');                $config = $this->getServiceLocator()->get('Config');                        if ($id != $config['demodyne']['cron']['check_proposals_id']) exit();                if (!empty($_SERVER['HTTP_CLIENT_IP'])) {            $ip = $_SERVER['HTTP_CLIENT_IP'];        } elseif (!empty($_SERVER['HTTP_X_FORWARDED_FOR'])) {            $ip = $_SERVER['HTTP_X_FORWARDED_FOR'];        } else {            $ip = $_SERVER['REMOTE_ADDR'];        }                if ($ip!=$config['demodyne']['cron']['ip']) {            printf('You don\'t have access to this ressource');            exit();        }        $entityManager = $this->getServiceLocator()->get('doctrine.entitymanager.orm_default');                $proposals = $entityManager->getRepository('DGIModule\Entity\Proposal')->getProposalsCheck1();        echo 'Total Proposals >= 30 votes : '.count($proposals);                foreach ($proposals as $proposal) {            $proposal->setPropCheck(1);            echo '<br>'.$proposal->getPropName();            $activeVotes = $entityManager->getRepository('DGIModule\Entity\Vote')->getProposalsCheck2($proposal);            $totalVotes = count($proposal->getVotes());            if ((count($activeVotes)/$totalVotes)*100 >= 20) {                $proposal->setPropCheck(2);                $voteAverage = $proposal->getVotesAverage();                if ($voteAverage >= 2) {                    $proposal->setPropCheck(3);                    if ($proposal->getPropCheckTimer()) {                        $dDiff = $proposal->getPropCheckTimer()->diff(new \DateTime());                        $dDiff->format('%R');                         if ($dDiff->days >= 14) {                            $proposal->setPropExecution(1);                            $status = $this->getServiceLocator()->get('Config');                            $proposal->setPropStatus($status['demodyne']['proposal']['status']['type']['plan']);                        }                    }                    else {                        $proposal->setPropCheckTimer(new \DateTime());                    }                }                else {                    $proposal->setPropCheckTimer(null);                }            }            $entityManager->merge($proposal);        }        $entityManager->flush();                exit();    }        }