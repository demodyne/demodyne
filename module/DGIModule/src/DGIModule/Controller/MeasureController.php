<?php/** * @link      https://github.com/demodyne/demodyne * @copyright Copyright (c) 2015-2017 Demodyne (https://www.demodyne.org) * @license   http://www.gnu.org/licenses/agpl.html GNU Affero General Public License */namespace DGIModule\Controller;use Doctrine\DBAL\Exception\UniqueConstraintViolationException;use Zend\Mvc\Controller\AbstractActionController;use Zend\View\Model\JsonModel;use Zend\View\Model\ViewModel;use Zend\Session\Container;use DGIModule\Entity\Proposal;use DGIModule\Form\AddEditMeasureForm;use DGIModule\Entity\Measure;use DGIModule\Entity\History;use DGIModule\Entity\User;use Ramsey\Uuid\Uuid;use Doctrine\ORM\EntityManager;use Zend\Mvc\I18n\Translator;class MeasureController extends AbstractActionController{    protected $entityManager;    protected $translator;    protected $config;    public function __construct(        array $config,        EntityManager $entityManager,        Translator $translator    )    {        $this->config = $config['demodyne'];        $this->entityManager = $entityManager;        $this->translator = $translator;    }    private function newFile($path, $prefix='', $suffix='')    {        do        {            $file = $path."/".$prefix.mt_rand().$suffix;            $fp = @fopen($file, 'x');        }        while(!$fp);        fclose($fp);        return $file;    }    private function saveImageFromPost($image) {        $propImage = $this->params()->fromPost($image);        if ($propImage && $propImage!='null') {            $imgData = str_replace(' ','+',$propImage);            $imgData =  substr($imgData,strpos($imgData,",")+1);            $imgData = base64_decode($imgData);            // Path where the image is going to be saved            $filePath = $this->newFile(getcwd() . "/public/img/proposals", "proposal", ".jpg");            // Write $imgData into the image file            $file = fopen($filePath, 'w');            fwrite($file, $imgData);            fclose($file);            $filename = str_replace(getcwd() . "/public", '', $filePath);            return $filename;        }        else {            return $propImage;        }    }    public function addMeasureAction()    {        $user = $this->identity();        $publish = $this->params('publish');                $session = new Container('level');        $level = $session->level;                $proposal = new Proposal();        $proposal->setMeasure(new Measure());        $form = new AddEditMeasureForm($this->entityManager);        $form->setAttribute('action', $this->url()->fromRoute('measure', array('action'=>'add-measure')));        $categoryList = $this->getMainCategoriesList(null, $level);        $linksError = true;        $propCity = $this->params()->fromPost('propCity');        $propDescription = $this->params()->fromPost('propDescription');        /** @var $request \Zend\Http\Request */        $request = $this->getRequest();        if ($request->isPost()){            $form->bind($proposal);            $form->setData($request->getPost());            $links = $this->params()->fromPost('links');            if ($links) {                foreach ($links as $link) {                    if (trim($link)!='') {                        $linksError = false;                        break;                    }                }            }            if ($form->isValid() && (!$linksError || $user->isAdministration())) {                $categoryId = $this->params()->fromPost('sub_category');                $propName = $this->params()->fromPost('propSavedName');                // check if unicity constraint match for user proposals (propSavedName, usr)                $proposalExists = $this->entityManager->getRepository('DGIModule\Entity\Proposal')->findProposals($user, $propName, $level, $this->config['proposal']['level']);                                if ($proposalExists) {                    $form->get('propSavedName')->setMessages(['There is alredy a proposal with this name. Please change the name and try again.']);                }                else {                    if ($img = $this->saveImageFromPost('propHiddenImage1')) $proposal->setPropImage1($img);                    if ($img = $this->saveImageFromPost('propHiddenImage2')) $proposal->setPropImage2($img);                    if ($img = $this->saveImageFromPost('propHiddenImage3')) $proposal->setPropImage3($img);                                    $category =  $this->entityManager->getRepository('DGIModule\Entity\Category')->findOneBy(array('catId' => $categoryId));                    $status = $this->config['proposal']['status'];                        $now = new \DateTime();                    $uuid = Uuid::uuid4();                    // prepare data                    $proposal->setPropCreatedDate($now)                             ->setPropSavedDate($now)                            ->setPropSavedName($propName)                            ->setPropPublished(0)                            ->setUsr($user)                            ->setCat($category)                            ->setPropLevel($this->config['proposal']['level'][$level])                            ->setCity($user->getCity())                            ->setPropUUID($uuid)                            ->setPropName($uuid)                    ;                    if ($user->isAdministration()) {                        $proposal->setPropStatus($status['draft']);                    }                    else {                        $proposal->setPropStatus($status['unvalidated']);                    }                    if (!$linksError) {                        foreach ($links as $link) {                            $proposal->addLink($link);                        }                    }                                        // save to all city if district                    if ($propCity) {                        $proposal->setPropFullCity(1);                    }                                        $this->entityManager->persist($proposal);                    $this->entityManager->flush();                                        // Publish proposal                     if ($publish) {                        $proposal->setPropPublished(1)                            ->setPropPublishedDate($now)                            ->setPropName($propName);                        if ($user->isAdministration()) {                            $proposal->setPropStatus($status['plan']);                        }                    }                    $history = new History();                    $history->setHisCreatedDate(new \DateTime())                            ->setHisType(0)                            ->setHisName($proposal->getPropName())                            ->setHisDescription($proposal->getPropDescription())                            ->setHisStartDate($proposal->getMeasure()->getMesStartDate())                            ->setHisEndDate($proposal->getMeasure()->getMesEndDate())                            ->setHisCost($proposal->getMeasure()->getMesCost())                            ->setCategory($proposal->getCat())                            ->setUsr($user)                            ->setHisCreatedDate(new \DateTime());                    foreach ($proposal->getLinks() as $url) {                        $history->addLink($url);                    }                    $proposal->getMeasure()->addHistory($history);                    $this->entityManager->merge($proposal);                    $this->entityManager->flush();                    // set news for city                    if ($publish) {                        if ($user->isAdministration()) {                            $this->forward()->dispatch('DGIModule\Controller\News', array('action' => 'create-news', 'id' => $proposal->getPropId(), 'type' => 'new_measure'));                        } else {                            $this->forward()->dispatch('DGIModule\Controller\News', array('action' => 'create-news', 'id' => $proposal->getPropId(), 'type' => 'new_measure_citizen'));                        }                    }                    return new JsonModel(array('success' => true, 'measure'=>1));                }            }            else {                $mainCategoryId = $this->params()->fromPost('main_category');                $subCategoryId = $this->params()->fromPost('sub_category');                /** @var \DGIModule\Entity\Category $category */                foreach ($categoryList['mainCategories'] as $category) {                    if ($category->getCatId() == $mainCategoryId) {                        $categoryList['selectedCategory'] = $category;                        break;                    }                }                $categoryList['subCategories'] = $this->entityManager->getRepository('DGIModule\Entity\Category')->getSubCategories($mainCategoryId, 'City');                foreach ($categoryList['subCategories'] as $category) {                    if ($category->getCatId() == $subCategoryId) {                        $categoryList['selectedSubCategory'] = $category;                        break;                    }                }            }        }        else {            $links = [''];$linksError = false;        }        $showDisclaimer = false;        if (!$user->isAdministration()) {            $showDisclaimer = true;        }        $viewModel = new ViewModel();        //disable layout if request by Ajax        $viewModel->setTerminal($request->isXmlHttpRequest());        $viewModel->setVariables([            'user' => $user,            'form'=>$form,            'categoryList' => $categoryList,            'links' => $links,            'linksError' => $linksError,            'showDisclaimer' => $showDisclaimer,            'proposal' => null,            'propCity' => $propCity,            'level' => $level,            'propDescription' => $propDescription        ]);        return $viewModel;    }        public function editMeasureAction()    {        /** @var \DGIModule\Entity\User $user */        $user = $this->identity();        $propUUID = $this->params()->fromRoute('id');        $publish = $this->params()->fromRoute('publish', false);        if (!$propUUID)  {            return $this->forward()->dispatch('DGIModule\Controller\Error', array('action' => 'access-denied'));        }        $session = new Container('level');        $level = $session->level;        /** @var \DGIModule\Entity\Proposal $proposal */        $proposal = $this->entityManager->getRepository('DGIModule\Entity\Proposal')->findOneBy(array('propUUID' => $propUUID));        // check if same level        $propCity = $proposal->getCity();        $userCity = $user->getCity();        $sameLevel = false;        if (($proposal->getPropLevel()==$this->config['level']['city'] &&                (($proposal->getPropFullCity() && ($propCity==$userCity || $userCity->getFullCity()==$propCity || $userCity==$propCity->getFullCity()) || $propCity==$userCity))) ||            ($proposal->getPropLevel()==$this->config['level']['region'] && $propCity->getRegion()==$userCity->getRegion()) ||            ($proposal->getPropLevel()==$this->config['level']['country'] && $propCity->getCountry()==$userCity->getCountry())) {            $sameLevel = true;            }        /** @todo check by level and not by city */        if (!$proposal || !$proposal->isMeasure() ||            ($proposal->isMeasure() && $proposal->getUsr()->isAdministration() && $proposal->getUsr()!=$user) ||            !$sameLevel) {            return $this->forward()->dispatch('DGIModule\Controller\Error', array('action' => 'access-denied'));        }        $showDisclaimer = false;        if (!$user->isAdministration()) {            $showDisclaimer = true;        }        $oldProposal = clone $proposal;        $oldLinks = $oldProposal->getLinks();        $oldMeasure = clone $oldProposal->getMeasure();        $form = new AddEditMeasureForm($this->entityManager, $proposal);        $form->setAttribute('action', $this->url()->fromRoute('measure', array('action'=>'edit-measure', 'id' => $propUUID)));        $proposal->setPropSavedName(str_replace('&rdquo;', '"', $proposal->getPropSavedName()) );        /** @var \DGIModule\Entity\Measure $measure */        $measure = $proposal->getMeasure();        $measureFieldset = $form->get('measure');        $measureFieldset->get('mesStartDate')->setValue($measure->getMesStartDate());        $measureFieldset->get('mesEndDate')->setValue($measure->getMesEndDate());        $measureFieldset->get('mesCost')->setValue($measure->getMesCost());        $categoryList = $this->getMainCategoriesList($proposal, $level);        $linksError = true;                $propCity = $proposal->getPropFullCity();                $propName = $this->params()->fromPost('propSavedName', $proposal->getPropSavedName());        $propDescription = $this->params()->fromPost('propDescription');        /** @var $request \Zend\Http\Request */        $request = $this->getRequest();        if ($request->isPost()){            $form->bind($proposal);            $form->setData($request->getPost());            $propCity = $this->params()->fromPost('propCity');            $links = $this->params()->fromPost('links');            if ($links) {                foreach ($links as $link) {                    if (trim($link)!='') {                        $linksError = false;                        break;                    }                }            }            if ($form->isValid() && (!$linksError || $user->isAdministration())) {                $categoryId = $this->params()->fromPost('sub_category');                // check if unicity constraint match for user proposals (propSavedName, usr)                $proposalExists = $this->entityManager->getRepository('DGIModule\Entity\Proposal')->findProposals($user, $propName, array_search($proposal->getPropLevel(), $this->config['proposal']['level']), $this->config['proposal']['level']);                if ($proposalExists && $proposalExists != $proposal) {                    $form->get('propSavedName')->setMessages(['There is alredy a proposal with this name. Please change the name and try again.']);                }                else {                    $img = $this->saveImageFromPost('propHiddenImage1');                    if (!$img || $img!='null') {                        $oldFilename = $proposal->getPropImage1();                        if ($oldFilename && file_exists(getcwd() . '/public' . $oldFilename)) {                            unlink(getcwd() . '/public' . $oldFilename);                        }                        if (!$img) {                            $proposal->setPropImage1(null);                        }                        else {                            $proposal->setPropImage1($img);                        }                        $update = true;                    }                    $img = $this->saveImageFromPost('propHiddenImage2');                    if (!$img || $img!='null') {                        $oldFilename = $proposal->getPropImage2();                        if ($oldFilename && file_exists(getcwd() . '/public' . $oldFilename)) {                            unlink(getcwd() . '/public' . $oldFilename);                        }                        if (!$img) {                            $proposal->setPropImage2(null);                        }                        else {                            $proposal->setPropImage2($img);                        }                        $update = true;                    }                    $img = $this->saveImageFromPost('propHiddenImage3');                    if (!$img || $img!='null') {                        $oldFilename = $proposal->getPropImage3();                        if ($oldFilename && file_exists(getcwd() . '/public' . $oldFilename)) {                            unlink(getcwd() . '/public' . $oldFilename);                        }                        if (!$img) {                            $proposal->setPropImage3(null);                        }                        else {                            $proposal->setPropImage3($img);                        }                        $update = true;                    }                    $category =  $this->entityManager->getRepository('DGIModule\Entity\Category')->findOneBy(array('catId' => $categoryId));//                    $status = $this->getServiceLocator()->get('Config');                    $status = $this->config['proposal']['status'];                    // prepare data                    $proposal->setPropSavedName($propName)                            ->setPropSavedDate(new \DateTime())                                ->setCat($category);                    $proposal->clearLinks();                    if ($links) {                        foreach ($links as $link) {                            if (trim($link)!='') {                                $proposal->addLink(trim($link));                            }                        }                    }                    if ($proposal->getPropPublished()) {                        $proposal->setPropName($propName);                        $newHistory = false;                        $history = new History();                        $history->setHisCreatedDate(new \DateTime())                                ->setUsr($user);                        if ($oldProposal->getPropName() != $proposal->getPropName()) {                            $history->setHisName($proposal->getPropName());                            $newHistory = true;                        }                        if ($oldProposal->getPropDescription() != $proposal->getPropDescription()) {                            $history->setHisDescription($proposal->getPropDescription());                            $newHistory = true;                        }                        // compare with oldest history or put in measure the date 1970 and show undefined                        if (!$oldMeasure->getMesStartDate() ||                             (!$proposal->getMeasure()->getMesStartDate() && $oldMeasure->getMesStartDate()!=new \DateTime('1970-01-01 00:00'))||                             $oldMeasure->getMesStartDate()->format('d/m/Y') != $proposal->getMeasure()->getMesStartDate()->format('d/m/Y')) {                            $date = $proposal->getMeasure()->getMesStartDate();                            $history->setHisStartDate($date?$date:new \DateTime('1970-01-01 00:00'));                            $newHistory = true;                        }                        if (!$oldMeasure->getMesEndDate() ||                             (!$proposal->getMeasure()->getMesEndDate() && $oldMeasure->getMesEndDate()!=new \DateTime('1970-01-01 00:00')) ||                             $oldMeasure->getMesEndDate()->format('d/m/Y') != $proposal->getMeasure()->getMesEndDate()->format('d/m/Y')) {                            $date = $proposal->getMeasure()->getMesEndDate();                            $history->setHisEndDate($date?$date:new \DateTime('1970-01-01 00:00'));                            $newHistory = true;                        }                        if ($oldMeasure->getMesCost() != $proposal->getMeasure()->getMesCost()) {                            $history->setHisCost($proposal->getMeasure()->getMesCost());                            $newHistory = true;                        }                        $diff = array_diff($oldLinks, $proposal->getLinks());                        foreach ($diff as $url) {                            $history->addLink($url, 0); // removed links                            $newHistory = true;                        }                        $diff = array_diff($proposal->getLinks(), $oldLinks);                        foreach ($diff as $url) {                            $history->addLink($url, 1); // added links                            $newHistory = true;                        }                        if ($oldProposal->getCat() != $proposal->getCat()) {                            $history->setCategory($proposal->getCat());                            $newHistory = true;                        }                        if ($newHistory) {                            $proposal->setPropSavedDate(new \DateTime());                            $proposal->getMeasure()->addHistory($history);                        }                    }                    if ($propCity) {                        $proposal->setPropFullCity($propCity);                    }                    // Publish proposal                    if ($publish && !$proposal->getPropPublished()) {                        $proposal->setPropPublished(1)                                ->setPropPublishedDate(new \DateTime())                                ->setPropName($propName)                                ->setPropStatus($status['plan']);                    }                    $this->entityManager->merge($proposal);                    try {                        $this->entityManager->flush();                        $this->forward()->dispatch('DGIModule\Controller\Email', array(                            'action' => 'proposal-has-been-modified',                            'id' => $proposal->getPropUUID(),                            'email' => 'true'                        ));                        if ($publish && !$proposal->getPropPublished()) {                            $this->forward()->dispatch('DGIModule\Controller\News', array('action' => 'create-news', 'id' => $proposal->getPropId(), 'type' => 'new_measure'));                        }                        return new JsonModel(array('success' => true, 'measure'=> 1));                    }                    catch( UniqueConstraintViolationException $e )                    {                        $form->get('propName')->setMessages(['You cannot save this proposition. There is already a proposition with same name for your city']);                    }                }            }            else {                $mainCategoryId = $this->params()->fromPost('main_category');                $subCategoryId = $this->params()->fromPost('sub_category');                foreach ($categoryList['mainCategories'] as $category) {                    if ($category->getCatId() == $mainCategoryId) {                        $categoryList['selectedCategory'] = $category;                        break;                    }                }                $categoryList['subCategories'] = $this->entityManager->getRepository('DGIModule\Entity\Category')->getSubCategories($mainCategoryId, 'City');                foreach ($categoryList['subCategories'] as $category) {                    if ($category->getCatId() == $subCategoryId) {                        $categoryList['selectedSubCategory'] = $category;                        break;                    }                }            }        }        else {            $categoryList['selectedCategory'] = $proposal->getCat()->getCatCat();            $categoryList['subCategories'] = $this->entityManager->getRepository('DGIModule\Entity\Category')->getSubCategories($categoryList['selectedCategory']->getCatId(), 'City');            $categoryList['selectedSubCategory'] = $proposal->getCat();            $links = $proposal->getLinks();            $linksError = false;        }        $viewModel = new ViewModel();        $viewModel->setTerminal($request->isXmlHttpRequest());        $viewModel->setTemplate('dgi-module/measure/add-measure.phtml');        $viewModel->setVariables([            'user' => $user,            'form'=>$form,            'categoryList' => $categoryList,            'links' => $links,            'linksError' => $linksError,            'showDisclaimer' => $showDisclaimer,            'proposal' => $proposal,            'propCity' => $propCity,            'level' => $level,            'propDescription' => $propDescription        ]);        return $viewModel;    }    public function viewHistoryAction()    {        $user = $this->identity();        $propUUID = $this->params()->fromRoute('id');        if (!$propUUID)  {            return $this->forward()->dispatch('DGIModule\Controller\Error', array('action' => 'access-denied'));        }        $proposal = $this->entityManager->getRepository('DGIModule\Entity\Proposal')->findOneBy(array('propUUID' => $propUUID));        if (!$proposal || !$proposal->isMeasure()) {            return $this->forward()->dispatch('DGIModule\Controller\Error', array('action' => 'access-denied'));        }        $viewModel = new ViewModel();        $viewModel->setTerminal($this->getRequest()->isXmlHttpRequest());        $viewModel->setVariables([            'user' => $user,            'proposal' => $proposal        ]);        return $viewModel;    }    /**     *  This action deletes a measure permanently if proposal not published or marking as deleted if published     *      * @return \Zend\View\Model\JsonModel|\Zend\View\Model\ViewModel     */  /*  public function deleteMeasuresAction()    {         $user = $this->identity();        $propUUID = $this->params('id');        // no parameter        if (!$propUUID) {            return $this->forward()->dispatch('DGIModule\Controller\Error', array('action' => 'access-denied'));        }        $proposal = $this->entityManager->getRepository('DGIModule\Entity\Proposal')->findOneBy(array('propUUID' => $propUUID));        // proposal doesn't exists or the logged user is not the owner of the scenario and user not admin        // @todo Create moderation system based on points         if (!$proposal || ($proposal->getUsr()!=$user && $user->getUsrlId()!=$this->config['account']['type']['admin'])) {            return $this->forward()->dispatch('DGIModule\Controller\Error', array('action' => 'access-denied'));        }        $request = $this->getRequest();        // check if unicity constraint match for user proposals (propSavedName, usr)        $error = null;         // verify status        $status = $this->config['proposal']['status'];        if ($proposal->getPropStatus() > $status['debate']) {            $error = 'This proposal has passed the debate phase.';        }        if (!$error && $request->isPost()){            // if already deleted            if ($proposal->getPropDeletedDate()) {                return new JsonModel(array('success' => true));            }            if ($proposal->getPropPublished()) {                $proposal->setPropDeletedDate(new \DateTime())                               ->setDeletedUsr($user)                               ->setPropName($proposal->getPropUUID());                $this->entityManager->merge($proposal);            }            else {                $this->entityManager->remove($proposal);            }            $this->entityManager->flush();            if ($proposal->getPropPublished()) {                $this->forward()->dispatch('DGIModule\Controller\News', array('action' => 'create-news', 'id' => $proposal->getPropId(), 'type' => 'deleted_proposal'));            }            return new JsonModel(array('success' => true));        }        $viewModel = new ViewModel();        //disable layout if request by Ajax        $viewModel->setTerminal($this->getRequest()->isXmlHttpRequest());        $viewModel->setVariables([            'proposal' => $proposal,            'error' => $error        ]);        return $viewModel;    }*/    /**     * View action to see details about a measure. If the proposal is in draft or debate state then edit action is called     *      */    public function viewMeasureAction()    {        /** @var \DGIModule\Entity\User $user */        $user = $this->identity();        $propUUID = $this->params('id');        if (!$propUUID) {            return $this->forward()->dispatch('DGIModule\Controller\Error', array('action' => 'access-denied'));        }        /** @var \DGIModule\Entity\Proposal $proposal */        $proposal = $this->entityManager->getRepository('DGIModule\Entity\Proposal')->findOneBy(array('propUUID' => $propUUID));        if ( !$proposal || (!$proposal->getPropPublished() && $proposal->getUsr()!=$user) || !$proposal->getMeasure() ) {            return $this->forward()->dispatch('DGIModule\Controller\Error', array('action' => 'access-denied'));        }                $levelSession = new Container('level');        if ($user && ($proposal->getCity()==$user->getCity() && $proposal->getPropLevel()==$this->config['level']['city'] ||                $proposal->getCity()->getRegion()==$user->getCity()->getRegion() && $proposal->getPropLevel()==$this->config['level']['region'] ||                $proposal->getCity()->getCountry()==$user->getCountry() && $proposal->getPropLevel()==$this->config['level']['country'])) {            $levelSession->city = $user->getCity()->getCityId();        }        else {            $levelSession->city = $proposal->getCity()->getCityId();        }        $levelSession->levelValue = $proposal->getPropLevel();        $levelSession->level = array_search($levelSession->levelValue, $this->config['level']);        $viewModel = new ViewModel();        $viewModel->setTerminal($this->getRequest()->isXmlHttpRequest());        $voteSection = $this->forward()->dispatch('DGIModule\Controller\Vote', array('action'=>'add', 'id' => $propUUID, 'terminal'=>false));        $viewModel->addChild($voteSection, 'voteSection');        $commentsSection = $this->forward()->dispatch('DGIModule\Controller\Comment', array('action'=>'add-comment', 'type' =>'proposal',  'id' => $propUUID, 'ajax' => false));        $viewModel->addChild($commentsSection, 'commentsSection');        if (isset($_SESSION['mobile']) && $_SESSION['mobile']) {            $viewModel->setTemplate('dgi-module/measure/view-measure.mobile.phtml');        }        $viewModel->setVariables([            'proposal'   => $proposal,            'subCategoryName' => $proposal->getCat()->getCatName(),            'user'          => $user        ]);        return $viewModel;    }    public function claimOwnershipAction()    {        $user = $this->identity();        $propUUID = $this->params('id');        if (!$propUUID) {            return $this->forward()->dispatch('DGIModule\Controller\Error', array('action' => 'access-denied', 'dialog' => true));        }        $proposal = $this->entityManager->getRepository('DGIModule\Entity\Proposal')->findOneBy(array('propUUID' => $propUUID));        if ( !$proposal || !$proposal->isMeasure() || !$user->isAdministration() || $proposal->getCity()!=$user->getCity() || $proposal->getUsr()->isAdministration()) {            return $this->forward()->dispatch('DGIModule\Controller\Error', array('action' => 'access-denied', 'dialog' => true));        }        $request = $this->getRequest();        if ($request->isPost()) {            $history = new History();            $history->setHisCreatedDate(new \DateTime())                    ->setHisType(2)                    ->setUsr($user);            $status = $this->config['proposal']['status'];            $proposal->setUsr($user)                     ->setPropStatus($status['plan'])                     ->getMeasure()->addHistory($history);            $this->entityManager->merge($proposal);            $this->entityManager->flush();            $this->forward()->dispatch('DGIModule\Controller\News', array('action' => 'create-news', 'id' => $proposal->getPropId(), 'type' => 'measure_validated'));            return new JsonModel(array('success' => true));        }        $viewModel = new ViewModel();        $viewModel->setTerminal($request->isXmlHttpRequest());        $viewModel->setVariables([            'proposal'   => $proposal,            'user'          => $user        ]);        return $viewModel;    }    /*public function publishMeasuresAction()    {        $user = $this->identity();        $propUUID = $this->params('id');        // no parameter        if (!$propUUID) {            return $this->forward()->dispatch('DGIModule\Controller\Error', array('action' => 'access-denied'));        }        $proposal = $this->entityManager->getRepository('DGIModule\Entity\Proposal')->findOneBy(array('propUUID' => $propUUID));        if (!$proposal || $proposal->getUsr()!=$user)            return $this->forward()->dispatch('DGIModule\Controller\Error', array('action' => 'access-denied'));        $request = $this->getRequest();        if ($request->isPost()){            // if already published            if ($proposal->getPropPublished()) {                return new JsonModel(array('success' => true));            }            $proposal->setPropPublished(1)                        ->setPropName($proposal->getPropSavedName())                        ->setPropPublishedDate(new \DateTime())                        ->setPropStatus($this->config['proposal']['status']['debate']);             $this->entityManager->merge($proposal);            try {                $this->entityManager->flush();                // set news for city                $this->forward()->dispatch('DGIModule\Controller\News', array('action' => 'create-news', 'id' => $proposal->getPropId(), 'type' => 'new_proposal'));                return new JsonModel(array('success' => true));            }            catch( UniqueConstraintViolationException $e )            {                return new JsonModel(array('success' => false));                // @todo Show error message: same name proposal already published            }        }        // check if unicity constraint match for user proposals (propSavedName, usr)        $proposalExists = $this->entityManager->getRepository('DGIModule\Entity\Proposal')->findOneBy(['propName' => $proposal->getPropSavedName(), 'propPublished'=>1]);        $error = null;        if ($proposalExists) {            $error = $this->translator->translate('There is alredy a proposal with this name. Please change the name and try again.', 'DGIModule');        }        $viewModel = new ViewModel();        //disable layout if request by Ajax        $viewModel->setTerminal($request->isXmlHttpRequest());        $viewModel->setVariables([            'proposal' => $proposal,            'error' => $error        ]);        return $viewModel;    }*/    /**     * Shows the list of proposals for the user city     */    public function allMeasuresAction() {        $user = $this->identity();        $session = new Container('level');        $city = $session->city;        if (!$user && !$city) {            return $this->forward()->dispatch('DGIModule\Controller\Error', array('action' => 'access-denied'));        }        if (!$user) {            $user = new User();            $user->setUsrId(0);        }        else {            $user = clone($user);        }        if ($city) {            $city = $this->entityManager->getRepository('DGIModule\Entity\City')->findOneBy(['cityId' => $city]);            if ($city && $city!==$user->getCity()) {                $user->setUsrId(0);                $user->setCountry($city->getCountry());                $user->setCity($city);            }        }        $session = new Container('measure');        $page = $this->params()->fromRoute('page', null);        if (!$page) {            if (!$session->allMeasuresPage) {                $page = 1;            }            else {                $page = $session->allMeasuresPage;            }        }        $session->allMeasuresPage = $page;        $sort = $this->params()->fromRoute('sort', null);        if (!$sort) {            if (!$session->allMeasuresSort) {                $sort = 'published';            }            else {                $sort = $session->allMeasuresSort;            }        }        $session->allMeasuresSort = $sort;        $order = $this->params()->fromRoute('order', null);        if (!$order) {            if (!$session->allMeasuresOrder) {                $order = 'desc';            }            else {                $order = $session->allMeasuresOrder;            }        }        $session->allMeasuresOrder = $order;        $limit= $this->params()->fromRoute('results', null);        if (!$limit) {            if (!$session->allMeasuresResults) {                $limit = 10;            }            else {                $limit = $session->allMeasuresResults;            }        }        $session->allMeasuresResults = $limit;        $proposalCount = $this->entityManager->getRepository('DGIModule\Entity\Proposal')->countProposals($user, true);        $proposalCount = $proposalCount["totalProposals"];        $viewModel = new ViewModel();        $offset = ($limit == 'all') ? 0 : ($page - 1) * $limit;        $pagedProposals = $this->entityManager->getRepository('DGIModule\Entity\Proposal')->getPagedProposals($user, $offset, $limit, $sort, $order, true);        foreach ($pagedProposals as $index => $proposal) {            $statusDetails =  $this->forward()->dispatch('DGIModule\Controller\Proposal', array('action'=>'status-details', 'id' => $proposal->getPropUUID()));            $viewModel->addChild($statusDetails, 'status-details-'.$index);        }        $viewModel->setTerminal($this->getRequest()->isXmlHttpRequest());        if (isset($_SESSION['mobile']) && $_SESSION['mobile']) {            $viewModel->setTemplate('dgi-module/measure/all-measures.mobile.phtml');        }        $viewModel->setVariables([            'pagedProposals' => $pagedProposals,            'limit' => $limit,            'page' => $page,            'sort' => $sort,            'order' => $order,            'user' => $user,            'proposalCount' => $proposalCount,        ]);        return $viewModel;    }        /**     * Shows the list of proposals for the user city     */    public function draftMeasuresAction() {        $user = $this->identity();       $session = new Container('measure');        $page = $this->params()->fromRoute('page', null);        if (!$page) {            if (!$session->draftMeasuresPage) {                $page = 1;            }            else {                $page = $session->draftMeasuresPage;            }        }        $session->draftMeasuresPage = $page;        $sort = $this->params()->fromRoute('sort', null);        if (!$sort) {            if (!$session->draftMeasuresSort) {                $sort = 'name';            }            else {                $sort = $session->draftMeasuresSort;            }        }        $session->draftMeasuresSort = $sort;        $order = $this->params()->fromRoute('order', null);        if (!$order) {            if (!$session->draftMeasuresOrder) {                $order = 'asc';            }            else {                $order = $session->draftMeasuresOrder;            }        }        $session->draftMeasuresOrder = $order;        $limit= $this->params()->fromRoute('results', null);        if (!$limit) {            if (!$session->draftMeasuresResults) {                $limit = 10;            }            else {                $limit = $session->draftMeasuresResults;            }        }        $session->draftMeasuresResults = $limit;        $measureCount = $this->entityManager->getRepository('DGIModule\Entity\Proposal')->countDraftMeasures($user);        $measureCount = $measureCount["totalProposals"];        $viewModel = new ViewModel();        $offset = ($limit == 'all') ? 0 : ($page - 1) * $limit;        $pagedProposals = $this->entityManager->getRepository('DGIModule\Entity\Proposal')->getPagedDraftMeasures($user, $offset, $limit, $sort, $order);        $viewModel->setTerminal($this->getRequest()->isXmlHttpRequest());        $viewModel->setVariables([            'pagedProposals' => $pagedProposals,            'limit' => $limit,            'page' => $page,            'sort' => $sort,            'order' => $order,            'user' => $user,            'measureCount' => $measureCount,        ]);        return $viewModel;    }    private function getMainCategoriesList(Proposal $proposal=null, $level='city') {        $mainCategories = $this->entityManager->getRepository('DGIModule\Entity\Category')->getMainCategories($this->identity(), $level);        $selectedCategory = $proposal?$proposal->getCat()->getCatCat():$mainCategories[0];        $subCategories = $this->entityManager->getRepository('DGIModule\Entity\Category')->getSubCategories($selectedCategory->getCatId(), $level);        $selectedSubCategory = $proposal?$proposal->getCat():$subCategories[0];        return [            'mainCategories' => $mainCategories,             'selectedCategory' => $selectedCategory,            'subCategories' => $subCategories,            'selectedSubCategory' => $selectedSubCategory        ];    }}