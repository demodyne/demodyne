<?php/** * @link      https://github.com/demodyne/demodyne * @copyright Copyright (c) 2015-2016 Demodyne (https://www.demodyne.org) * @license   http://www.gnu.org/licenses/agpl.html GNU Affero General Public License */namespace DGIModule\Controller;use Zend\Mvc\Controller\AbstractActionController;use Zend\View\Model\ViewModel;use Zend\Session\Container;use DGIModule\Entity\Proposal;use DGIModule\Entity\News;use DGIModule\Form\AddEditMeasureForm;use DGIModule\Entity\Measure;use DGIModule\Entity\History;use DGIModule\Entity\User;class MeasureController extends AbstractActionController{    public function addMeasureAction()    {        $user = $this->identity();        $publish = $this->params('publish');                $session = new Container('level');        $level = $session->level;                $entityManager = $this->getServiceLocator()->get('doctrine.entitymanager.orm_default');        $proposal = new Proposal();        $proposal->setMeasure(new Measure());        $form = new AddEditMeasureForm();        $form->setAttribute('action', $this->url()->fromRoute('measure', array('action'=>'add-measure')));        $form->setAttribute('id', 'measure-add-measure-form');        $categoryList = $this->getMainCategoriesList(null, $level);        $linksError = true;        $request = $this->getRequest();        $propCity = $this->params()->fromPost('propCity');        $propDescription = $this->params()->fromPost('propDescription');        if ($request->isPost()){            $form->bind($proposal);            $form->setData($request->getPost());            $links = $this->params()->fromPost('links');            if ($links) {                foreach ($links as $link) {                    if (trim($link)!='') {                        $linksError = false;                        break;                    }                }            }            $config = $this->getServiceLocator()->get('Config');            if ($form->isValid() && (!$linksError || $user->isAdministration())) {                $categoryId = $this->params()->fromPost('sub_category');                $propName = $this->params()->fromPost('propSavedName');                // check if unicity constraint match for user proposals (propSavedName, usr)                $proposalExists = $entityManager->getRepository('DGIModule\Entity\Proposal')->findProposals($user, $propName, $level, $config['demodyne']['proposal']['level']);                                if ($proposalExists) {                    $form->get('propSavedName')->setMessages(['There is alredy a proposal with this name. Please change the name and try again.']);                }                else {                                    $category =  $entityManager->getRepository('DGIModule\Entity\Category')->findOneBy(array('catId' => $categoryId));                    $status = $config['demodyne']['proposal']['status']['type'];                        $now = new \DateTime();                    // prepare data                    $proposal->setPropCreatedDate($now)                                ->setPropSavedName($propName)                                ->setUsr($user)                                ->setCat($category)                                ->setPropLevel($config['demodyne']['proposal']['level'][$level])                                ->setCity($user->getCity());                    if ($user->isAdministration()) {                        $proposal->setPropStatus($status['draft']);                    }                    else {                        $proposal->setPropStatus($status['unvalidated']);                    }                    if (!$linksError) {                        foreach ($links as $link) {                            $proposal->getMeasure()->addLink($link);                        }                    }                                        // save to all city if district                    if ($propCity) {                        $proposal->setPropFullCity(1);                    }                                        $entityManager->persist($proposal);                    $entityManager->flush();                                        // Publish proposal                     if ($publish) {                        $proposal->setPropPublished(1)                                ->setPropPublishedDate($now)                                ->setPropName($propName);                        if ($user->isAdministration()) {                            $proposal->setPropStatus($status['plan']);                        }                        $history = new History();                        $history->setHisCreatedDate(new \DateTime())                                ->setHisType(0)                                ->setHisName($proposal->getPropName())                                ->setHisDescription($proposal->getPropDescription())                                ->setHisStartDate($proposal->getMeasure()->getMesStartDate())                                ->setHisEndDate($proposal->getMeasure()->getMesEndDate())                                ->setHisCost($proposal->getMeasure()->getMesCost())                                ->setCategory($proposal->getCat())                                ->setUsr($user);                        foreach ($proposal->getMeasure()->getLinks() as $url) {                            $history->addLink($url);                        }                        $proposal->getMeasure()->addHistory($history);                        $entityManager->merge($proposal);                        $entityManager->flush();                        // set news for city                        if ($user->isAdministration()) {                           $this->forward()->dispatch('DGIModule\Controller\News', array('action' => 'create-news', 'id' => $proposal->getPropId(), 'type' => 'new_measure'));                        }                        else {                            $this->forward()->dispatch('DGIModule\Controller\News', array('action' => 'create-news', 'id' => $proposal->getPropId(), 'type' => 'new_measure_citizen'));                        }                        return new \Zend\View\Model\JsonModel(array('success' => true));                                       }                }            }            else {                $mainCategoryId = $this->params()->fromPost('main_category');                $subCategoryId = $this->params()->fromPost('sub_category');                foreach ($categoryList['mainCategories'] as $category) {                    if ($category->getCatId() == $mainCategoryId) {                        $categoryList['selectedCategory'] = $category;                        break;                    }                }                $categoryList['subCategories'] = $entityManager->getRepository('DGIModule\Entity\Category')->getSubCategories($mainCategoryId, 'City');                foreach ($categoryList['subCategories'] as $category) {                    if ($category->getCatId() == $subCategoryId) {                        $categoryList['selectedSubCategory'] = $category;                        break;                    }                }            }        }        else {            $links = [''];$linksError = false;        }        $showDisclaimer = false;        if (!$user->isAdministration()) {            $showDisclaimer = true;        }        $viewmodel = new ViewModel();        //disable layout if request by Ajax        $viewmodel->setTerminal($this->getRequest()->isXmlHttpRequest());        $viewmodel->setVariables([            'user' => $user,            'form'=>$form,            'categoryList' => $categoryList,            'links' => $links,            'linksError' => $linksError,            'showDisclaimer' => $showDisclaimer,            'proposal' => null,            'propCity' => $propCity,            'level' => $level,            'propDescription' => $propDescription        ]);        return $viewmodel;    }        public function editMeasureAction()    {        $user = $this->identity();        $propUUID = $this->params()->fromRoute('id');        $publish = $this->params()->fromRoute('publish', false);        if (!$propUUID)  {            return $this->forward()->dispatch('DGIModule\Controller\Error', array('action' => 'access-denied'));        }        $session = new Container('level');        $level = $session->level;        $entityManager = $this->getServiceLocator()->get('doctrine.entitymanager.orm_default');        $proposal = $entityManager->getRepository('DGIModule\Entity\Proposal')->findOneBy(array('propUUID' => $propUUID));        $oldProposal = clone $proposal;        $oldLinks = $oldProposal->getMeasure()->getLinks();        $oldMeasure = clone $oldProposal->getMeasure();        if (!$proposal ||             !$proposal->isMeasure() ||             ($proposal->isMeasure() && $proposal->getUsr()->isAdministration() && $proposal->getUsr()!=$user) ||            $proposal->getCity() != $user->getCity()) {            return $this->forward()->dispatch('DGIModule\Controller\Error', array('action' => 'access-denied'));        }        $showDisclaimer = false;        if (!$user->isAdministration()) {            $showDisclaimer = true;        }        // verify status        $config = $this->getServiceLocator()->get('Config');        $status = $config['demodyne']['proposal']['status']['type'];        $unicityConstraint = false;        $form = new AddEditMeasureForm();        $form->setAttribute('action', $this->url()->fromRoute('measure', array('action'=>'edit-measure', 'id' => $propUUID)));        $proposal->setPropSavedName(str_replace('&rdquo;', '"', $proposal->getPropSavedName()) );        $form->get('propSavedName')->setValue($proposal->getPropSavedName());        $form->get('propDescription')->setValue($proposal->getPropDescription());        $measureFieldset = $form->get('measure');        $measureFieldset->get('mesStartDate')->setValue($proposal->getMeasure()->getMesStartDate());        $measureFieldset->get('mesEndDate')->setValue($proposal->getMeasure()->getMesEndDate());        $measureFieldset->get('mesCost')->setValue($proposal->getMeasure()->getMesCost());        $categoryList = $this->getMainCategoriesList($proposal, $level);        $linksError = true;                $propCity = $proposal->getPropFullCity();                $propName = $this->params()->fromPost('propSavedName');        if (!$propName) {            $propName = $proposal->getPropSavedName();        }        $propDescription = $this->params()->fromPost('propDescription');                $request = $this->getRequest();        if ($request->isPost()){            $form->bind($proposal);            $form->setData($request->getPost());            $propCity = $this->params()->fromPost('propCity');            $links = $this->params()->fromPost('links');            if ($links) {                foreach ($links as $link) {                    if (trim($link)!='') {                        $linksError = false;                        break;                    }                }            }            if ($form->isValid() && (!$linksError || $user->isAdministration())) {                $categoryId = $this->params()->fromPost('sub_category');                $propName = $this->params()->fromPost('propSavedName');                // check if unicity constraint match for user proposals (propSavedName, usr)                $proposalExists = $entityManager->getRepository('DGIModule\Entity\Proposal')->findProposals($user, $propName, array_search($proposal->getPropLevel(), $config['demodyne']['proposal']['level']), $config['demodyne']['proposal']['level']);                if ($proposalExists && $proposalExists != $proposal) {                    $form->get('propSavedName')->setMessages(['There is alredy a proposal with this name. Please change the name and try again.']);                }                else {                    $category =  $entityManager->getRepository('DGIModule\Entity\Category')->findOneBy(array('catId' => $categoryId));                    $status = $this->getServiceLocator()->get('Config');                    $status = $status['demodyne']['proposal']['status']['type'];                        // prepare data                    $proposal->setPropSavedName($propName)                                ->setCat($category);                    $proposal->getMeasure()->clearLinks();                    if ($links) {                        foreach ($links as $link) {                            if (trim($link)!='') {                                $proposal->getMeasure()->addLink(trim($link));                            }                        }                    }                    if ($proposal->getPropPublished()) {                        $proposal->setPropName($propName);                        $newHistory = false;                        $history = new History();                        $history->setHisCreatedDate(new \DateTime())                                ->setUsr($user);                        if ($oldProposal->getPropName() != $proposal->getPropName()) {                            $history->setHisName($proposal->getPropName());                            $newHistory = true;                        }                        if ($oldProposal->getPropDescription() != $proposal->getPropDescription()) {                            $history->setHisDescription($proposal->getPropDescription());                            $newHistory = true;                        }                        if ($oldMeasure->getMesStartDate() && $oldMeasure->getMesStartDate()->format('d/m/Y') != $proposal->getMeasure()->getMesStartDate()->format('d/m/Y')) {                            $history->setHisStartDate($proposal->getMeasure()->getMesStartDate());                            $newHistory = true;                        }                        if ($oldMeasure->getMesEndDate() && $oldMeasure->getMesEndDate()->format('d/m/Y') != $proposal->getMeasure()->getMesEndDate()->format('d/m/Y')) {                            $history->setHisEndDate($proposal->getMeasure()->getMesEndDate());                            $newHistory = true;                        }                        if ($oldMeasure->getMesCost() != $proposal->getMeasure()->getMesCost()) {                            $history->setHisCost($proposal->getMeasure()->getMesCost());                            $newHistory = true;                        }                        $diff = array_diff($oldLinks, $proposal->getMeasure()->getLinks());                        foreach ($diff as $url) {                            $history->addLink($url, 0); // removed links                            $newHistory = true;                        }                        $diff = array_diff($proposal->getMeasure()->getLinks(), $oldLinks);                        foreach ($diff as $url) {                            $history->addLink($url, 1); // added links                            $newHistory = true;                        }                        if ($oldProposal->getCat() != $proposal->getCat()) {                            $history->setCategory($proposal->getCat());                            $newHistory = true;                        }                        if ($newHistory) {                            $proposal->getMeasure()->addHistory($history);                        }                    }                    if ($propCity) {                        $proposal->setPropFullCity($propCity);                    }                    // Publish proposal                    if ($publish && !$proposal->getPropPublished()) {                        $proposal->setPropPublished(1)                                ->setPropPublishedDate($now)                                ->setPropName($propName)                                ->setPropStatus($status['plan']);                    }                    $entityManager->merge($proposal);                    try {                        $entityManager->flush();                        if ($publish && !$proposal->getPropPublished()) {                            $this->forward()->dispatch('DGIModule\Controller\News', array('action' => 'create-news', 'id' => $proposal->getPropId(), 'type' => 'new_measure'));                        }                        return new \Zend\View\Model\JsonModel(array('success' => true));                    }                    catch( \Doctrine\DBAL\Exception\UniqueConstraintViolationException $e )                    {                        $form->get('propName')->setMessages(['You cannot save this proposition. There is already a proposition with same name for your city']);                    }                }            }            else {                $mainCategoryId = $this->params()->fromPost('main_category');                $subCategoryId = $this->params()->fromPost('sub_category');                foreach ($categoryList['mainCategories'] as $category) {                    if ($category->getCatId() == $mainCategoryId) {                        $categoryList['selectedCategory'] = $category;                        break;                    }                }                $categoryList['subCategories'] = $entityManager->getRepository('DGIModule\Entity\Category')->getSubCategories($mainCategoryId, 'City');                foreach ($categoryList['subCategories'] as $category) {                    if ($category->getCatId() == $subCategoryId) {                        $categoryList['selectedSubCategory'] = $category;                        break;                    }                }            }        }        else {            $categoryList['selectedCategory'] = $proposal->getCat()->getCatCat();            $categoryList['subCategories'] = $entityManager->getRepository('DGIModule\Entity\Category')->getSubCategories($categoryList['selectedCategory']->getCatId(), 'City');            $categoryList['selectedSubCategory'] = $proposal->getCat();            $links = $proposal->getMeasure()->getLinks();            $linksError = false;        }        $viewmodel = new ViewModel();        $viewmodel->setTerminal($this->getRequest()->isXmlHttpRequest());        $viewmodel->setTemplate('dgi-module/measure/add-measure.phtml');        $viewmodel->setVariables([            'user' => $user,            'form'=>$form,            'categoryList' => $categoryList,            'links' => $links,            'linksError' => $linksError,            'showDisclaimer' => $showDisclaimer,            'proposal' => $proposal,            'propCity' => $propCity,            'level' => $level,            'propDescription' => $propDescription        ]);        return $viewmodel;    }    public function viewHistoryAction()    {        $user = $this->identity();        $propUUID = $this->params()->fromRoute('id');        if (!$propUUID)  {            return $this->forward()->dispatch('DGIModule\Controller\Error', array('action' => 'access-denied'));        }        $entityManager = $this->getServiceLocator()->get('doctrine.entitymanager.orm_default');        $proposal = $entityManager->getRepository('DGIModule\Entity\Proposal')->findOneBy(array('propUUID' => $propUUID));        if (!$proposal || !$proposal->isMeasure()) {            return $this->forward()->dispatch('DGIModule\Controller\Error', array('action' => 'access-denied'));        }        $viewmodel = new ViewModel();        $viewmodel->setTerminal($this->getRequest()->isXmlHttpRequest());        $viewmodel->setVariables([            'user' => $user,            'proposal' => $proposal        ]);        return $viewmodel;    }    /**     *  This action deletes a measure permanently if proposal not published or marking as deleted if published     *      * @return \Zend\View\Model\JsonModel|\Zend\View\Model\ViewModel     */    public function deleteMeasureAction()    {         $user = $this->identity();        $propUUID = $this->params('id');        // no parameter        if (!$propUUID) {            return $this->forward()->dispatch('DGIModule\Controller\Error', array('action' => 'access-denied'));        }        $entityManager = $this->getServiceLocator()->get('doctrine.entitymanager.orm_default');        $config = $this->getServiceLocator()->get('Config');        $proposal = $entityManager->getRepository('DGIModule\Entity\Proposal')->findOneBy(array('propUUID' => $propUUID));        // proposal doesn't exists or the logged user is not the owner of the scenario and user not admin        // @todo Create moderation system based on points         if (!$proposal || ($proposal->getUsr()!=$user && $user->getUsrlId()!=$config['demodyne']['account']['type']['admin'])) {            return $this->forward()->dispatch('DGIModule\Controller\Error', array('action' => 'access-denied'));        }        $request = $this->getRequest();        // check if unicity constraint match for user proposals (propSavedName, usr)        $error = null;         // verify status        $config = $this->getServiceLocator()->get('Config');        $status = $config['demodyne']['proposal']['status']['type'];        if ($proposal->getPropStatus() > $status['debate']) {            $error = 'This proposal has passed the debate phase.';        }        if (!$error && $request->isPost()){            // if already deleted            if ($proposal->getPropDeletedDate()) {                return new \Zend\View\Model\JsonModel(array('success' => true));            }            if ($proposal->getPropPublished()) {                $proposal->setPropDeletedDate(new \DateTime())                               ->setDeletedUsr($user)                               ->setPropName($proposal->getPropUUID());                $entityManager->merge($proposal);            }            else {                $entityManager->remove($proposal);            }            $entityManager->flush();            if ($proposal->getPropPublished()) {                $this->forward()->dispatch('DGIModule\Controller\News', array('action' => 'create-news', 'id' => $proposal->getPropId(), 'type' => 'deleted_proposal'));            }            return new \Zend\View\Model\JsonModel(array('success' => true));        }        $viewmodel = new ViewModel();        //disable layout if request by Ajax        $viewmodel->setTerminal($this->getRequest()->isXmlHttpRequest());        $viewmodel->setVariables([            'proposal' => $proposal,            'error' => $error        ]);        return $viewmodel;    }    /**     * View action to see details about a measure. If the proposal is in draft or debate state then edit action is called     *      */    public function viewMeasureAction()    {        $user = $this->identity();                $entityManager = $this->getServiceLocator()->get('doctrine.entitymanager.orm_default');                $propUUID = $this->params('id');        if (!$propUUID) {            return $this->forward()->dispatch('DGIModule\Controller\Error', array('action' => 'access-denied'));        }        $entityManager = $this->getServiceLocator()->get('doctrine.entitymanager.orm_default');        $proposal = $entityManager->getRepository('DGIModule\Entity\Proposal')->findOneBy(array('propUUID' => $propUUID));        // @todo Go to edit page if proposal not published and owner        if ( !$proposal || (!$proposal->getPropPublished() && $proposal->getUsr()!=$user) ) {            return $this->forward()->dispatch('DGIModule\Controller\Error', array('action' => 'access-denied'));        }                $guestSession = new Container('guest');        if (!$user && !$guestSession->country) {                    $guestSession->country = $proposal->getCity()->getCountry()->getCountryId();            $guestSession->countryName = $proposal->getCity()->getCountry()->getCountryName();            $levelSession = new Container('level');            $config = $this->getServiceLocator()->get('Config');            if ($proposal->getPropLevel()==$config['demodyne']['proposal']['level']['country']) {                $levelSession->level = 'country';                $levelSession->levelValue = $config['demodyne']['proposal']['level']['country'];                $guestSession->level = 'country';            }            else {                $guestSession->city = $proposal->getCity()->getCityId();                $guestSession->cityName = $proposal->getCity()->getCityName();                $guestSession->postalCode = $proposal->getCity()->getCityPostalcode();                        // TODO : change level to city                        $guestSession->level = 'country';                $levelSession->level = 'country';                $levelSession->levelValue = $config['demodyne']['proposal']['level']['country'];            }        }                $viewModel = new ViewModel();        $viewModel->setTerminal($this->getRequest()->isXmlHttpRequest());        $statusSection = $this->forward()->dispatch('DGIModule\Controller\Proposal', array('action'=>'status', 'id' => $propUUID));        $viewModel->addChild($statusSection, 'statusSection');                $voteSection = $this->forward()->dispatch('DGIModule\Controller\Vote', array('action'=>'add', 'id' => $propUUID, 'terminal'=>false));        $viewModel->addChild($voteSection, 'voteSection');                $commentsSection = $this->forward()->dispatch('DGIModule\Controller\Comment', array('action'=>'add-comment', 'type' =>'proposal',  'id' => $propUUID, 'ajax' => false));        $viewModel->addChild($commentsSection, 'commentsSection');                $viewModel->setVariables([            'proposal'   => $proposal,            'subCategoryName' => $proposal->getCat()->getCatName(),            'user'          => $user        ]);        return $viewModel;    }    public function claimOwnershipAction()    {        $user = $this->identity();        $propUUID = $this->params('id');        if (!$propUUID) {            return $this->forward()->dispatch('DGIModule\Controller\Error', array('action' => 'access-denied', 'dialog' => true));        }        $entityManager = $this->getServiceLocator()->get('doctrine.entitymanager.orm_default');        $proposal = $entityManager->getRepository('DGIModule\Entity\Proposal')->findOneBy(array('propUUID' => $propUUID));        if ( !$proposal || !$proposal->isMeasure() || !$user->isAdministration() || $proposal->getCity()!=$user->getCity() || $proposal->getUsr()->isAdministration()) {            return $this->forward()->dispatch('DGIModule\Controller\Error', array('action' => 'access-denied', 'dialog' => true));        }        $request = $this->getRequest();        if ($request->isPost()) {            $history = new History();            $history->setHisCreatedDate(new \DateTime())                    ->setHisType(2)                    ->setUsr($user);            $status = $this->getServiceLocator()->get('Config');            $status = $status['demodyne']['proposal']['status']['type'];            $proposal->setUsr($user)                     ->setPropStatus($status['plan'])                     ->getMeasure()->addHistory($history);            $entityManager->merge($proposal);            $entityManager->flush();            $this->forward()->dispatch('DGIModule\Controller\News', array('action' => 'create-news', 'id' => $proposal->getPropId(), 'type' => 'measure_validated'));            return new \Zend\View\Model\JsonModel(array('success' => true));        }        $viewModel = new ViewModel();        $viewModel->setTerminal($this->getRequest()->isXmlHttpRequest());        $viewModel->setVariables([            'proposal'   => $proposal,            'user'          => $user        ]);        return $viewModel;    }                /**     * Shows the list of measures for the viewed level     */    public function allMeasuresAction() {        $user = $this->identity();                $guestSession = new Container('guest');        if (!$user &&  !$guestSession->country) {            return $this->forward()->dispatch('DGIModule\Controller\Error', array('action' => 'access-denied'));        }        $entityManager = $this->getServiceLocator()->get('doctrine.entitymanager.orm_default');                if (!$user) {            $user = new User();            $user->setUsrId(0);                    }        else {            $user = clone($user);        }                if ($guestSession->country) {            $user->setCountry($entityManager->getRepository('DGIModule\Entity\Country')->findOneBy(['countryId' => $guestSession->country]));            if ($guestSession->city) {                $user->setCity($entityManager->getRepository('DGIModule\Entity\City')->findOneBy(['cityId' => $guestSession->city]));            }        }                $session = new Container('measure');        $page = $this->params()->fromRoute('page', null);        if (!$page) {            if (!$session->allMeasuresPage) {                $page = 1;            }            else {                $page = $session->allMeasuresPage;            }        }        $session->allMeasuresPage = $page;        $sort = $this->params()->fromRoute('sort', null);        if (!$sort) {            if (!$session->allMeasuresSort) {                $sort = 'published-date';            }            else {                $sort = $session->allMeasuresSort;            }        }        $session->allMeasuresSort = $sort;        $order = $this->params()->fromRoute('order', null);        if (!$order) {            if (!$session->allMeasuresOrder) {                $order = 'desc';            }            else {                $order = $session->allMeasuresOrder;            }        }        $session->allMeasuresOrder = $order;        $limit= $this->params()->fromRoute('results', null);        if (!$limit) {            if (!$session->allMeasuresResults) {                $limit = 5;            }            else {                $limit = $session->allMeasuresResults;            }        }        $session->allMeasuresResults = $limit;        $config = $this->getServiceLocator()->get('Config');        $proposalCount = $entityManager->getRepository('DGIModule\Entity\Proposal')->countProposals($user, true);        $proposalCount = $proposalCount["totalProposals"];        $viewModel = new ViewModel();        $offset = ($limit == 'all') ? 0 : ($page - 1) * $limit;        $pagedProposals = $entityManager->getRepository('DGIModule\Entity\Proposal')->getPagedProposals($user, $offset, $limit, $sort, $order, true);        foreach ($pagedProposals as $index => $proposal) {            $status =  $this->forward()->dispatch('DGIModule\Controller\Proposal', array('action'=>'status', 'id' => $proposal->getPropUUID()));            $viewModel->addChild($status, 'status-'.$index);            $statusDetails =  $this->forward()->dispatch('DGIModule\Controller\Proposal', array('action'=>'status-details', 'id' => $proposal->getPropUUID()));            $viewModel->addChild($statusDetails, 'status-details-'.$index);        }        $viewModel->setTerminal($this->getRequest()->isXmlHttpRequest());        $viewModel->setVariables([            'pagedProposals' => $pagedProposals,            'limit' => $limit,            'page' => $page,            'sort' => $sort,            'order' => $order,            'user' => $user,            'proposalCount' => $proposalCount,        ]);        return $viewModel;    }        /**     * Shows the list of draft measures for the administration level     */    public function draftMeasuresAction() {        $user = $this->identity();        $session = new Container('measure');        $page = $this->params()->fromRoute('page', null);        if (!$page) {            if (!$session->draftMeasuresPage) {                $page = 1;            }            else {                $page = $session->draftMeasuresPage;            }        }        $session->draftMeasuresPage = $page;        $sort = $this->params()->fromRoute('sort', null);        if (!$sort) {            if (!$session->draftMeasuresSort) {                $sort = 'name';            }            else {                $sort = $session->draftMeasuresSort;            }        }        $session->draftMeasuresSort = $sort;        $order = $this->params()->fromRoute('order', null);        if (!$order) {            if (!$session->draftMeasuresOrder) {                $order = 'asc';            }            else {                $order = $session->draftMeasuresOrder;            }        }        $session->draftMeasuresOrder = $order;        $limit= $this->params()->fromRoute('results', null);        if (!$limit) {            if (!$session->draftMeasuresResults) {                $limit = 5;            }            else {                $limit = $session->draftMeasuresResults;            }        }        $session->draftMeasuresResults = $limit;        $entityManager = $this->getServiceLocator()->get('doctrine.entitymanager.orm_default');        $measureCount = $entityManager->getRepository('DGIModule\Entity\Proposal')->countDraftMesures($user);        $measureCount = $measureCount["totalProposals"];        $viewModel = new ViewModel();        $offset = ($limit == 'all') ? 0 : ($page - 1) * $limit;        $pagedProposals = $entityManager->getRepository('DGIModule\Entity\Proposal')->getPagedDraftMeasures($user, $offset, $limit, $sort, $order);        $viewModel->setTerminal($this->getRequest()->isXmlHttpRequest());        $viewModel->setVariables([            'pagedProposals' => $pagedProposals,            'limit' => $limit,            'page' => $page,            'sort' => $sort,            'order' => $order,            'user' => $user,            'measureCount' => $measureCount,        ]);        return $viewModel;    }    private function getMainCategoriesList(\DGIModule\Entity\Proposal $proposal=null, $level='city') {        $entityManager = $this->getServiceLocator()->get('doctrine.entitymanager.orm_default');        $mainCategories = $entityManager->getRepository('DGIModule\Entity\Category')->getMainCategories($this->identity(), $level);        $selectedCategory = $proposal?$proposal->getCat()->getCatCat():$mainCategories[0];        $subCategories = $entityManager->getRepository('DGIModule\Entity\Category')->getSubCategories($selectedCategory->getCatId(), $level);        $selectedSubCategory = $proposal?$proposal->getCat():$subCategories[0];        return [            'mainCategories' => $mainCategories,             'selectedCategory' => $selectedCategory,            'subCategories' => $subCategories,            'selectedSubCategory' => $selectedSubCategory        ];    }}