<?php/** * @link      https://github.com/demodyne/demodyne * @copyright Copyright (c) 2015-2016 Demodyne (https://www.demodyne.org) * @license   http://www.gnu.org/licenses/agpl.html GNU Affero General Public License */namespace DGIModule\Controller;use Zend\Mvc\Controller\AbstractActionController;use Zend\View\Model\ViewModel;use Zend\Session\Container;use DGIModule\Entity\News;use DGIModule\Entity\User;class NewsController extends AbstractActionController{    public function allNewsAction() {        $user = $this->identity();                $guestSession = new Container('guest');        if (!$user &&  !$guestSession->country) {            return $this->forward()->dispatch('DGIModule\Controller\Error', array('action' => 'access-denied'));        }        $entityManager = $this->getServiceLocator()->get('doctrine.entitymanager.orm_default');        if (!$user) {            $user = new User();            $user->setUsrId(0);        }        else {            $user = clone($user);        }                if ($guestSession->country) {            $user->setUsrId(0);            $user->setCountry($entityManager->getRepository('DGIModule\Entity\Country')->findOneBy(['countryId' => $guestSession->country]));            if ($guestSession->city) {                $user->setCity($entityManager->getRepository('DGIModule\Entity\City')->findOneBy(['cityId' => $guestSession->city]));            }        }                $session = new Container('level');        $level = $session->level;                $session = new Container('news');        $page = $this->params()->fromRoute('page', null);        if (!$page) {            if (!$session->allNewsPage) {                $page = 1;            }            else {                $page = $session->allNewsPage;            }        }        $session->allNewsPage = $page;        $limit= $this->params()->fromRoute('results', null);        if (!$limit) {            if (!$session->allNewsResults) {                $limit = 5;            }            else {                $limit = $session->allNewsResults;            }        }        $session->allNewsResults = $limit;        $filter = $this->params()->fromRoute('filter', null);        if (!$filter) {            if (!$session->allNewsFilter) {                $filter = 'none';            }            else {                $filter = $session->allNewsFilter;            }        }        $session->allNewsFilter = $filter;        $config = $this->getServiceLocator()->get('Config');        $offset = ($page == 0) ? 0 : ($page - 1) * $limit;        $newNews = $entityManager->getRepository('DGIModule\Entity\News')->countNewNews($user, $level, $config['demodyne']['proposal']['level']);        $pagedNews = $entityManager->getRepository('DGIModule\Entity\News')->getPagedNews($user, $level, $config['demodyne']['proposal']['level'], $offset, $limit, $config['demodyne']['news']['type'][$filter]);        $viewModel = new ViewModel();        $viewModel->setTerminal($this->getRequest()->isXmlHttpRequest());        $viewModel->setVariables([            'pagedNews' => $pagedNews,            'limit' => $limit,            'page' => $page,            'filter' => $filter,            'user' => $user,            'newsType' => $config['demodyne']['news']['type'],            'newNews' => $newNews["newNews"],        ]);        return $viewModel;    }        /**     * Help function for creating a news      *      * @return boolean     */    public function createNewsAction() {        $user = $this->identity();        $type = $this->params()->fromRoute('type');        $id = $this->params()->fromRoute('id');        $entityManager = $this->getServiceLocator()->get('doctrine.entitymanager.orm_default');        $config = $this->getServiceLocator()->get('Config');        $news = new News();        $news->setCity($user->getCity())             ->setUsr($user)             ->setNewsType($config['demodyne']['news']['type'][$type]);        switch ($type) {            case 'new_proposal':            case 'new_measure':            case 'deleted_proposal':                $proposal = $entityManager->getRepository('DGIModule\Entity\Proposal')->findOneBy(['propId' => $id]);                $news->setProp($proposal);                break;            default:                $proposal = $entityManager->getRepository('DGIModule\Entity\Proposal')->findOneBy(['propId' => $id]);                $news->setProp($proposal);                break;                        }        $entityManager->persist($news);        $entityManager->flush();        return true;    }}