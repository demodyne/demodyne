<?php/** * @link      https://github.com/demodyne/demodyne * @copyright Copyright (c) 2015-2017 Demodyne (https://www.demodyne.org) * @license   http://www.gnu.org/licenses/agpl.html GNU Affero General Public License */namespace DGIModule\Controller;use Zend\Mvc\Controller\AbstractActionController;use Zend\View\Model\ViewModel;use Zend\Session\Container;use DGIModule\Entity\News;use DGIModule\Entity\User;use Ramsey\Uuid\Uuid;use Doctrine\ORM\EntityManager;use Zend\Mvc\I18n\Translator;class NewsController extends AbstractActionController{    protected $entityManager;    protected $translator;    protected $config;    public function __construct(        array $config,        EntityManager $entityManager,        Translator $translator    )    {        $this->config = $config;        $this->entityManager = $entityManager;        $this->translator = $translator;    }    public function newsAction()    {        $user = $this->identity();        $viewModel = new ViewModel();        $newsSection = $this->forward()->dispatch('DGIModule\Controller\News', array('action' => 'all-news'));        $viewModel->addChild($newsSection, 'newsSection');        // upcoming events section        $upcomingEventsSection = $this->forward()->dispatch('DGIModule\Controller\Event', array('action' => 'upcoming-events'));        $viewModel->addChild($upcomingEventsSection, 'upcomingEventsSection');        if (isset($_SESSION['mobile']) && $_SESSION['mobile']) {            $viewModel->setTemplate('dgi-module/news/news.mobile.phtml');        }        else {            $viewModel->setTemplate('dgi-module/news/news.phtml');            $topProposalsSection = $this->forward()->dispatch('DGIModule\Controller\Proposal', array('action' => 'top-proposals'));            $viewModel->addChild($topProposalsSection, 'topProposalsSection');            // carousel banner section            $carouselBannersSection = $this->forward()->dispatch('DGIModule\Controller\Banner', array('action' => 'carousel-banners'));            $viewModel->addChild($carouselBannersSection, 'carouselBannersSection');        }        $viewModel->setVariables([            'user' => $user        ]);        return $viewModel;    }        /**     * @return ViewModel     */    public function allNewsAction() {        $user = $this->identity();        $session = new Container('level');        $city = $session->city;        if (!$user && !$city) {            return $this->forward()->dispatch('DGIModule\Controller\Error', array('action' => 'access-denied'));        }        if (!$user) {            $user = new User();            $user->setUsrId(0);        }        if ($city) {            $city = $this->entityManager->getRepository('DGIModule\Entity\City')->findOneBy(['cityId' => $city]);            if ($city && $city !== $user->getCity()) {                $user->setCountry($city->getCountry())                     ->setCity($city);            }        }                $session = new Container('level');        $level = $session->level;                $session = new Container('news');        $page = $this->params()->fromRoute('page', null);        if (!$page) {            if (!$session->allNewsPage) {                $page = 1;            }            else {                $page = $session->allNewsPage;            }        }        $session->allNewsPage = $page;        $limit= $this->params()->fromRoute('results', null);        if (!$limit) {            if (!$session->allNewsResults) {                $limit = 10;            }            else {                $limit = $session->allNewsResults;            }        }        $session->allNewsResults = $limit;        $filter = $this->params()->fromRoute('filter', null);        if (!$filter) {            if (!$session->allNewsFilter) {                $filter = 'none';            }            else {                $filter = $session->allNewsFilter;            }        }        $session->allNewsFilter = $filter;        $offset = ($page == 0) ? 0 : ($page - 1) * $limit;        $viewModel = new ViewModel();        $viewModel->setTerminal($this->getRequest()->isXmlHttpRequest());        if ($user->getCity()) {            $newNews = $this->entityManager->getRepository('DGIModule\Entity\News')->countNewNews($user, $level, $this->config['demodyne']['level']);            $pagedNews = $this->entityManager->getRepository('DGIModule\Entity\News')->getPagedNews($user, $level, $this->config['demodyne']['level'], $offset, $limit, $this->config['demodyne']['news']['type'][$filter]);            $viewModel->setVariables([                'pagedNews' => $pagedNews,                'newNews' => $newNews["newNews"],            ]);        }        else {            $viewModel->setVariables([                'pagedNews' => [],                'newNews' => 0,            ]);        }        $viewModel->setVariables([            'limit' => $limit,            'page' => $page,            'filter' => $filter,            'user' => $user,            'newsType' => $this->config['demodyne']['news']['type'],        ]);        if (isset($_SESSION['mobile']) && $_SESSION['mobile']) {            $viewModel->setTemplate('dgi-module/news/all-news.mobile.phtml');        }        return $viewModel;    }    /**     * Help function for creating a news      *      * @return boolean     */    public function createNewsAction() {        $user = $this->identity();        $type = $this->params()->fromRoute('type');        $id = $this->params()->fromRoute('id');        $news = new News();        $news->setCity($user->getCity())             ->setUsr($user)             ->setNewsCreatedDate(new \DateTime())             ->setNewsUUID(Uuid::uuid4())             ->setNewsType($this->config['demodyne']['news']['type'][$type]);        switch ($type) {            case 'new_proposal':            case 'new_measure':            case 'deleted_proposal':            /** @var \DGIModule\Entity\Proposal $proposal */                $proposal = $this->entityManager->getRepository('DGIModule\Entity\Proposal')->findOneBy(['propId' => $id]);                $news->setProp($proposal)->setNewsLevel($proposal->getPropLevel());                break;            case 'new_public_event':            case 'new_public_session':            /** @var \DGIModule\Entity\Event $event */                $event = $this->entityManager->getRepository('DGIModule\Entity\Event')->findOneBy(['eventId' => $id]);                $news->setEvent($event)->setNewsLevel($event->getEventLevel());                break;            default:                $proposal = $this->entityManager->getRepository('DGIModule\Entity\Proposal')->findOneBy(['propId' => $id]);                $news->setProp($proposal)->setNewsLevel($proposal->getPropLevel());                break;        }        $this->entityManager->persist($news);        $this->entityManager->flush();        return true;    }}