<?php/** * @link      https://github.com/demodyne/demodyne * @copyright Copyright (c) 2015-2017 Demodyne (https://www.demodyne.org) * @license   http://www.gnu.org/licenses/agpl.html GNU Affero General Public License */namespace DGIModule\Controller;use DGIModule\Entity\Proposal;use Zend\Mvc\Controller\AbstractActionController;use Zend\View\Model\ViewModel;use Zend\View\Model\JsonModel;use Zend\Session\Container;use DGIModule\Form\AddEditProgramForm;use DGIModule\Entity\Program;use DGIModule\Entity\ProposalProgram;use DGIModule\Entity\User;use Ramsey\Uuid\Uuid;use Doctrine\ORM\EntityManager;use Zend\Mvc\I18n\Translator;class ProgramController extends AbstractActionController{    protected $entityManager;    protected $translator;    protected $config;    public function __construct(        array $config,        EntityManager $entityManager,        Translator $translator    )    {        $this->config = $config;        $this->entityManager = $entityManager;        $this->translator = $translator;    }        public function addProgramAction()    {        $user = $this->identity();        $ajax = $this->params()->fromRoute('ajax', true);        $level = $this->params()->fromRoute('level');        if (!$level) {            return $this->forward()->dispatch('DGIModule\Controller\Error', array('action' => 'access-denied'));        }        /** @var $request \Zend\Http\Request */        $request = $this->getRequest();        $viewModel = new ViewModel();        $viewModel->setTemplate('dgi-module/program/add-edit-program.phtml');        //disable layout if request by Ajax        if ($ajax)  {            $viewModel->setTerminal($request->isXmlHttpRequest());        }        $propUUID = $this->params('proposal');        $proposal = $this->entityManager->getRepository('DGIModule\Entity\Proposal')->findOneBy(array('propUUID' => $propUUID));                $program = $this->entityManager->getRepository('DGIModule\Entity\Program')->findOneBy(array('usr' => $user, 'progLevel'=>$this->config['demodyne']['level'][$level], 'progDeletedDate'=>null));        if ($program) {            $viewModel->setVariables([                'error' => 'errorProgramExists',                'user' =>$user,                'show' => ($proposal==null),                'level' => $level            ]);            return $viewModel;        }                $form = new AddEditProgramForm();        $form->setAttribute('action', $this->url()->fromRoute('program', array('action' => 'add-program', 'level' => $level,'proposal'=>$propUUID)));        $progDescription = $this->params()->fromPost('progDescription');        if ($request->isPost()){            $program = new Program();            $form->bind($program);            $form->setData($request->getPost());            if ($form->isValid()){                // search if name already exists for level                $duplicateProgram = $this->entityManager->getRepository('DGIModule\Entity\Program')->searchProgramByName($user, $program->getProgName(), $level);                if ($duplicateProgram) {                    if ($level=='city') {                        $message = $this->translator->translate('There is already a program with this name published in your city', 'DGIModule');                    }                    elseif ($level=='region') {                        $message = $this->translator->translate('There is already a program with this name published in your city', 'DGIModule');                    }                    elseif ($level=='country') {                        $message = $this->translator->translate('There is already a program with this name published in your city', 'DGIModule');                    }                    $form->get('progName')->setMessages([$message]);                }                else {                    // prepare data                    $program->setProgCreatedDate(new \DateTime())                            ->setProgSavedDate(new \DateTime())                            ->setProgLevel($this->config['demodyne']['level'][$level])                            ->setUsr($user)                            ->setCity($user->getCity())                            ->setProgCreatedDate(new \DateTime())                            ->setProgUUID(Uuid::uuid4())                    ;                    $this->entityManager->persist($program);                    $this->entityManager->flush();                    if (!$proposal) {                        $viewModel->setTemplate('dgi-module/program/add-success.phtml');                        $viewModel->setVariables([                            'program' => $program,                        ]);                        return $viewModel;                    }                    else {                        return new JsonModel(['success' => true, 'link'=>$this->url()->fromRoute('program', ['action'=>'add-proposal', 'id'=>$propUUID])]);                    }                }            }        }        $viewModel->setVariables([            'form'=>$form,            'error' => null,            'user' =>$user,            'ajax' => $ajax,            'proposal' => $proposal,            'program' => null,            'progDescription' => $progDescription        ]);        return $viewModel;    }        public function editProgramAction()    {        $user = $this->identity();        $progUUID = $this->params('id', '0');        if (!$progUUID) return $this->forward()->dispatch('DGIModule\Controller\Error', array('action' => 'access-denied'));        $program = $this->entityManager->getRepository('DGIModule\Entity\Program')->findOneBy(array('progUUID' => $progUUID));        // program doesn't exists        if (!$program )  {            return $this->forward()->dispatch('DGIModule\Controller\Error', array('action' => 'access-denied'));        }        // user is not the owner of the program        if ($program->getUsr()!=$user) {            return $this->forward()->dispatch('DGIModule\Controller\Program', array('action' => 'view-program', 'id'=>$progUUID));        }        $level = array_search($program->getProgLevel(), $this->config['demodyne']['level']) ;                $form = new AddEditProgramForm();        $form->setAttribute('action', $this->url()->fromRoute('program', array('action' => 'edit-program', 'id'=>$progUUID)));                $form->get('progName')->setValue($program->getProgName());        $form->get('progDescription')->setValue($program->getProgDescription());        $progDescription = $this->params()->fromPost('progDescription');        $request = $this->getRequest();        if ($request->isPost()){            $form->bind($program);            $form->setData($request->getPost());            if ($form->isValid()){                                // search if name already exists for level                $duplicateProgram = $this->entityManager->getRepository('DGIModule\Entity\Program')->searchProgramByName($user, $program->getProgName(), $level);                if ($duplicateProgram) {                    if ($level=='city') {                        $message = $this->translator->translate('There is already a program with this name published in your city', 'DGIModule');                    }                    elseif ($level=='region') {                        $message = $this->translator->translate('There is already a program with this name published in your city', 'DGIModule');                    }                    elseif ($level=='country') {                        $message = $this->translator->translate('There is already a program with this name published in your city', 'DGIModule');                    }                    $form->get('progName')->setMessages([$message]);                }                else {                    // prepare data                    $program->setProgSavedDate(new \DateTime());                    $this->entityManager->merge($program);                    $this->entityManager->flush();                    return new JsonModel(array('success' => true));                }            }        }        $viewModel = new ViewModel();        $viewModel->setTerminal($request->isXmlHttpRequest());        $viewModel->setTemplate('dgi-module/program/add-edit-program.phtml');        $viewModel->setVariables([            'program' => $program,            'form' => $form,            'user' => $user,            'proposal' => null,            'error' => null,            'progDescription' => $progDescription        ]);        return $viewModel;	}		public function viewProgramAction()	{	    $user = $this->identity();	    $progUUID = $this->params()->fromRoute('id', '0');	    if (!$progUUID)  {	        return $this->forward()->dispatch('DGIModule\Controller\Error', array('action' => 'access-denied'));	    }	    $program = $this->entityManager->getRepository('DGIModule\Entity\Program')->findOneBy(array('progUUID' => $progUUID));	    // program doesn't exists or the program is not published yet return page not found	    if (!$program) {	        return $this->forward()->dispatch('DGIModule\Controller\Error', array('action'=>'access-denied'));	    }	            $levelSession = new Container('level');        if ($user && ($program->getCity()==$user->getCity() && $program->getProgLevel()==$this->config['demodyne']['level']['city'] ||                $program->getCity()->getRegion()==$user->getCity()->getRegion() && $program->getProgLevel()==$this->config['demodyne']['level']['region'] ||                $program->getCity()->getCountry()==$user->getCountry() && $program->getProgLevel()==$this->config['demodyne']['level']['country'])) {            $levelSession->city = $user->getCity()->getCityId();        }        else {            $levelSession->city = $program->getCity()->getCityId();        }        $levelSession->levelValue = $program->getProgLevel();        $levelSession->level = array_search($levelSession->levelValue, $this->config['demodyne']['level']);	    $viewModel = new ViewModel();	    $viewModel->setTerminal($this->getRequest()->isXmlHttpRequest());	    	    $commentsSection = $this->forward()->dispatch('DGIModule\Controller\Comment', array('action'=>'add-comment', 'type' =>'program',  'id' => $progUUID, 'ajax' => false));	    $viewModel->addChild($commentsSection, 'commentsSection');	    	    $proposalsSection = $this->forward()->dispatch('DGIModule\Controller\Program', array('action'=>'get-proposals', 'id' => $progUUID, 'ajax' => false));	    $viewModel->addChild($proposalsSection, 'proposalsSection');        if (isset($_SESSION['mobile']) && $_SESSION['mobile']) {            $viewModel->setTemplate('dgi-module/program/view-program.mobile.phtml');        }        $viewModel->setVariables([	        'program' => $program,	        'user' => $user,	    ]);	    return $viewModel;	}		public function viewAggregatedProgramAction()	{	    $user = $this->identity();        $session = new Container('level');        $city = $session->city;        if (!$user && !$city) {            return $this->forward()->dispatch('DGIModule\Controller\Error', array('action' => 'access-denied'));        }        if (!$user) {            $user = new User();            $user->setUsrId(0);        }        if ($city) {            $city = $this->entityManager->getRepository('DGIModule\Entity\City')->findOneBy(['cityId' => $city]);            if ($city && $city!=$user->getCity()) {                $user->setUsrId(0);                $user->setCountry($city->getCountry());                $user->setCity($city);            }        }	    	    $limit = $this->params()->fromRoute('results');	    $ajax = $this->params()->fromRoute('ajax', false);        $aggregatedProposals = $this->entityManager->getRepository('DGIModule\Entity\Proposal')->getAggregatedProposals($user, $limit);	    	    $viewModel = new ViewModel();	    if ($ajax) {	       $viewModel->setTerminal($this->getRequest()->isXmlHttpRequest());	    }	    	    foreach ($aggregatedProposals as $index => $proposal) {	        $statusDetails =  $this->forward()->dispatch('DGIModule\Controller\Proposal', array('action'=>'status-details', 'id' => $proposal->getPropUUID()));	        $viewModel->addChild($statusDetails, 'status-details-'.$index);	    }        if (isset($_SESSION['mobile']) && $_SESSION['mobile']) {            $viewModel->setTemplate('dgi-module/program/view-aggregated-program.mobile.phtml');        }        $viewModel->setVariables([	        'aggregatedProposals' => $aggregatedProposals,	        'limit' => $limit,	        'user' => $user,	    ]);	    return $viewModel;	}		public function getProposalsAction() {	    $user = $this->identity();	    $ajax= $this->params()->fromRoute('ajax', true);	    $progUUID = $this->params('id', '0');	    	    if (!$progUUID)  {	        return $this->forward()->dispatch('DGIModule\Controller\Error', array('action' => 'access-denied'));	    }	     	    $session = new Container('program');	    if (!$session->getProposalUUID || $session->getProposalUUID!=$progUUID) {	        $session->getProposalUUID = $progUUID;	        $session->getProposalsPage = 1;	        $session->getProposalsSort = 'priority';	        $session->getProposalsOrder = 'asc';	        $session->getProposalsResults = 10;	    }	    $page = $this->params()->fromRoute('page', null);	    if (!$page) {	        if (!$session->getProposalsPage) {	            $page = 1;	        }	        else {	            $page = $session->getProposalsPage;	        }	    }	    $session->getProposalsPage = $page;	    $sort = $this->params()->fromRoute('sort', null);	    if (!$sort) {	        if (!$session->getProposalsSort) {	            $sort = 'priority';	        }	        else {	            $sort = $session->getProposalsSort;	        }	    }	    $session->getProposalsSort = $sort;	    $order = $this->params()->fromRoute('order', null);	    if (!$order) {	        if (!$session->getProposalsOrder) {	            $order = 'asc';	        }	        else {	            $order = $session->getProposalsOrder;	        }	    }	    $session->getProposalsOrder = $order;	    $limit= $this->params()->fromRoute('results', null);	    if (!$limit) {	        if (!$session->getProposalsResults) {	            $limit = 10;	        }	        else {	            $limit = $session->getProposalsResults;	        }	    }	    $session->getProposalsResults = $limit;	    $program = $this->entityManager->getRepository('DGIModule\Entity\Program')->findOneBy(array('progUUID' => $progUUID));	    if (!$program)  {	        return $this->forward()->dispatch('DGIModule\Controller\Error', array('action' => 'access-denied'));	    }	    $totalResults = count($program->getProposals());	    $page = $limit!='all'? (ceil($totalResults/$limit) < $page ? ceil($totalResults/$limit) : $page) : $page; // @todo Goto last page if page > last page        $viewModel = new ViewModel();        $offset = ($page == 0) ? 0 : ($page - 1) * $limit;        $pagedProposals = $this->entityManager->getRepository('DGIModule\Entity\ProposalProgram')->getProgramPagedProposals($program, $offset, $limit, $sort, $order);        if ($ajax) {            $viewModel->setTerminal($this->getRequest()->isXmlHttpRequest());        }        if (isset($_SESSION['mobile']) && $_SESSION['mobile']) {            $viewModel->setTemplate('dgi-module/program/get-proposals.mobile.phtml');        }        $viewModel->setVariables([           'pagedProposals' => $pagedProposals,           'limit' => $limit,           'page' => $page,           'sort' => $sort,           'order' => $order,           'user' => $user,           'program' => $program,           'owner' => $user==$program->getUsr(),       ]);       return $viewModel;	}	private function sortProposals($program) {	    $proposals = $this->entityManager->getRepository('DGIModule\Entity\Proposal')->getProgramPagedSortProposals($program);	    foreach ($proposals as $index => $proposal) {	        $proposalProgram = $this->entityManager->getRepository('DGIModule\Entity\ProposalProgram')->findOneBy(array('prop' => $proposal, 'prog'=>$program));	        $proposalProgram->setSortPosition($index+1);	        $this->entityManager->merge($proposalProgram);	    }	    $this->entityManager->flush();	}		private function proposalAggregatedScore(Proposal $proposal) {	    $priority = $this->config['demodyne']['priority'];	    $score = 0;        $voteAverage = $proposal->getVotesAverage();        if ($voteAverage>=$this->config['demodyne']['vote']['average']) {            $included = false;            foreach ($proposal->getProposalPrograms() as $proposalProgram) {                $included = true;                $position = $proposalProgram->getSortPosition();	            $score += $position<11?$priority[$position]:$priority[11];	        }	        if ($included) {    	        $score += 100;    	        $topScore = $this->entityManager->getRepository('DGIModule\Entity\Vote')->getTopValue($proposal, $this->config['demodyne']['level']);    	        $score = $topScore['toppoints'] * $score;	        }        }        $proposal->setPropAggregatedScore($score);        $this->entityManager->merge($proposal);	    $this->entityManager->flush();	}		private function programAggregatedScore(Program $program) {	   foreach ($program->getProposals() as $proposal) {	       $this->proposalAggregatedScore($proposal);	   }	}			public function sortProposalsAction() {	    $user = $this->identity();	    $progUUID = $this->params()->fromRoute('id', '0');	    if (!$progUUID)  {	        return $this->forward()->dispatch('DGIModule\Controller\Error', array('action' => 'access-denied'));	    }        /** @var \DGIModule\Entity\Program $program */        $program = $this->entityManager->getRepository('DGIModule\Entity\Program')->findOneBy(array('progUUID' => $progUUID));	    if (!$program || $program->getUsr()!=$user)  {	        return $this->forward()->dispatch('DGIModule\Controller\Error', array('action' => 'access-denied'));	    }        /** @var $request \Zend\Http\Request */        $request = $this->getRequest();        $viewModel = new ViewModel();        $viewModel->setTerminal($request->isXmlHttpRequest());	    if ($request->isPost()){            $sortedProposals = $this->params()->fromPost('sort-proposals');            foreach ($sortedProposals as $index => $propUUID) {                $proposal = $this->entityManager->getRepository('DGIModule\Entity\Proposal')->findOneBy(array('propUUID' => $propUUID));                $proposalProgram = $this->entityManager->getRepository('DGIModule\Entity\ProposalProgram')->findOneBy(array('prop' => $proposal, 'prog'=>$program));                $proposalProgram->setSortPosition($index+1);                $this->entityManager->merge($proposalProgram);            }            $program->setProgSavedDate(new \DateTime());            $this->entityManager->merge($program);            $this->entityManager->flush();            $this->programAggregatedScore($program);            return new JsonModel(array('success' => true));        }        $proposals = $this->entityManager->getRepository('DGIModule\Entity\Proposal')->getProgramPagedSortProposals($program);	    $viewModel->setVariables([	        'proposals' => $proposals, 	        'user' => $user,	        'program' => $program,	        'owner' => $user==$program->getUsr(),	    ]);	    return $viewModel;	}	public function getCategoriesCountAction()	{	    $progUUID = $this->params('id', '0');	    $program = $this->entityManager->getRepository('DGIModule\Entity\Program')->findOneBy(array('progUUID' => $progUUID));	    if ( !$program  ) {	        return $this->forward()->dispatch('DGIModule\Controller\Error', array('action' => 'access-denied'));	    }	    $categories = [];	    $counts = [];	    $names = [];	    foreach ($program->getProposals() as $proposal) {	        if (!isset($categories[$proposal->getCat()->getCatCat()->getCatId()])) {	            $counts[$proposal->getCat()->getCatCat()->getCatId()] = 0;	            $names[$proposal->getCat()->getCatCat()->getCatId()] = $proposal->getCat()->getCatCat()->getCatName();	            $categories[$proposal->getCat()->getCatCat()->getCatId()] = $proposal->getCat()->getCatCat();	        }	        $counts[$proposal->getCat()->getCatCat()->getCatId()]++;	    }	    array_multisort($counts, SORT_DESC, SORT_NUMERIC, $names, SORT_ASC, SORT_STRING, $categories);	    $viewModel = new ViewModel();	    $viewModel->setVariables([	        'categories' => $categories,	        'counts'   => $counts	    ]);	    return $viewModel;	}	public function myProgramsAction()	{	    $user = $this->identity();        $viewModel = new ViewModel();	    $viewModel->setTerminal($this->getRequest()->isXmlHttpRequest());	    $cityProgram = null;	    $regionProgram = null;	    $countryProgram = null;	    $myPrograms = $this->entityManager->getRepository('DGIModule\Entity\Program')->getUserPrograms($user);	    foreach ($myPrograms as $index => $program) {	        $categories= $this->forward()->dispatch('DGIModule\Controller\Program', array('action' => 'get-categories-count', 'id' => $program->getProgUUID()));	        $viewModel->addChild($categories, 'categories-'.$program->getProgLevel());	        	        if ($program->getProgLevel()==$this->config['demodyne']['level']['city']) {	            $cityProgram = $program;	        }	        elseif($program->getProgLevel()==$this->config['demodyne']['level']['region']) {	            $regionProgram = $program;	        }	        else {	            $countryProgram = $program;	        }	         	    }	    $myPrograms = [];	    $myPrograms['city'] = $cityProgram;	    $myPrograms['region'] = $regionProgram;	    $myPrograms['country'] = $countryProgram;        if (isset($_SESSION['mobile']) && $_SESSION['mobile']) {            $viewModel->setTemplate('dgi-module/program/my-programs.mobile.phtml');        }	    $viewModel->setVariables([	        'myPrograms' => $myPrograms,	        'user' => $user	    ]);	    return $viewModel;	}		public function userProgramsAction()	{	    $usrUUID = $this->params('id', '0');	    $user = $this->entityManager->getRepository('DGIModule\Entity\User')->findOneBy(array('usrUUID' => $usrUUID, 'usrDeletedDate'=>null));	    if (!$user) {	        return $this->forward()->dispatch('DGIModule\Controller\Error', array('action' => 'access-denied'));	    }	    $programs = $this->entityManager->getRepository('DGIModule\Entity\Program')->getUserPrograms($user);	    $viewModel = new ViewModel();	    $viewModel->setTerminal($this->getRequest()->isXmlHttpRequest());	    $cityProgram = null;	    $regionProgram = null;	    $countryProgram = null;	    	    $userPrograms = [];	     	    foreach ($programs as $index => $program) {	        $categories= $this->forward()->dispatch('DGIModule\Controller\Program', array('action' => 'get-categories-count', 'id' => $program->getProgUUID()));	        $viewModel->addChild($categories, 'categories-'.$program->getProgLevel());	     	        $userPrograms[$program->getProgLevel()] = $program; 	         	    }	    	    ksort($userPrograms);        if (isset($_SESSION['mobile']) && $_SESSION['mobile']) {            $viewModel->setTemplate('dgi-module/program/user-programs.mobile.phtml');        }        $viewModel->setVariables([	        'programs' => $userPrograms,	        'user' => $user	    ]);	    return $viewModel;	}		/**	 * Add a proposal to a program 	 */	public function addProposalAction()	{	    $user = $this->identity();	    $propUUID = $this->params('id', '0');	    // no parameter 	    if (!$propUUID) { 	        return $this->forward()->dispatch('DGIModule\Controller\Error', ['action' => 'error', 'dialog' => $this->getRequest()->isXmlHttpRequest(),                        'message' => $this->translator->translate('There is no Proposal provided.', 'DGIModule')]); 	    }//	    $this->entityManager = $this->getServiceLocator()->get('doctrine.entitymanager.orm_default');        //$this->config = $this->getServiceLocator()->get('Config');        /** @var \DGIModule\Entity\Proposal $proposal */        $proposal = $this->entityManager->getRepository('DGIModule\Entity\Proposal')->getProposalByUUID($propUUID);        // proposal doesn't exists or the logged user is not the owner of the program        if (!$proposal) {            return $this->forward()->dispatch('DGIModule\Controller\Error', array('action' => 'error', 'dialog' => $this->getRequest()->isXmlHttpRequest(),                        'message' => $this->translator->translate('The provided Proposal does not exists.', 'DGIModule')));        }        /** @var $request \Zend\Http\Request */        $request = $this->getRequest();        $viewModel = new ViewModel();        //disable layout if request by Ajax        $viewModel->setTerminal($request->isXmlHttpRequest());                $sameLevel = false;        if (($proposal->getPropLevel()==$this->config['demodyne']['level']['city'] &&            ( $proposal->getCity()==$user->getCity() || $proposal->getCity()==$user->getCity()->getFullCity() ||                ($proposal->getCity()->getDistrictCode()==$user->getCity()->getDistrictCode() && $proposal->getCity()->getFullCity()==$user->getCity()->getFullCity()) ||                ($proposal->getPropFullCity() && $proposal->getCity()->getFullCity()==$user->getCity()->getFullCity()))) ||            ($proposal->getPropLevel()==$this->config['demodyne']['level']['region'] && $user->getCity()->getRegion()==$proposal->getCity()->getRegion()) ||            ($proposal->getPropLevel()==$this->config['demodyne']['level']['country'] && $user->getCountry()==$proposal->getCity()->getCountry())) {	        $sameLevel = true;	    }        if (!$sameLevel) {            return $this->forward()->dispatch('DGIModule\Controller\Error',                    array('action' => 'error',                        'dialog' => $this->getRequest()->isXmlHttpRequest(),                        'message' => $this->translator->translate('You cannot add the proposal to your program.', 'DGIModule')));        }        /** @var \DGIModule\Entity\Program $program */        $program = $user->getProgramForLevel($proposal->getPropLevel());        if ($program) {            if ($request->isPost()){                $program->setProgSavedDate(new \DateTime());                $this->entityManager->merge($program);                $proposalProgram = new ProposalProgram();                $proposalProgram->setProp($proposal)                                ->setProg($program)                                ->setSortPosition(count($program->getProposals())+1);                $this->entityManager->persist($proposalProgram);                $this->entityManager->flush();                $this->entityManager->refresh($program);                $this->sortProposals($program);                $this->programAggregatedScore($program);                $viewModel->setTemplate('dgi-module/program/add-proposal-success.phtml');                $viewModel->setVariables([                    'proposal' => $proposal,                    'program' => $program,                ]);                return $viewModel;            }        }        $viewModel->setVariables([            'proposal' => $proposal,            'program' => $program,            'user' => $user        ]);        return $viewModel;	}	public function addProposalsFromCityAction() {	    $user = $this->identity();	    $progUUID = $this->params('id', '0');	    $session = new Container('program');	    if (!$session->addProposalsFromCityUUID || $session->addProposalsFromCityUUID!=$progUUID) {	        $session->addProposalsFromCityUUID = $progUUID;	        $session->addProposalsFromCitysPage = 1;	        $session->addProposalsFromCitysSort = 'name';	        $session->addProposalsFromCitysOrder = 'asc';	        $session->addProposalsFromCitysResults = 10;	    }	    $page = $this->params()->fromRoute('page', null);	    if (!$page) {	        if (!$session->addProposalsFromCitysPage) {	            $page = 1;	        }	        else {	            $page = $session->addProposalsFromCitysPage;	        }	    }	    $session->addProposalsFromCitysPage = $page;	    $sort = $this->params()->fromRoute('sort', null);	    if (!$sort) {	        if (!$session->addProposalsFromCitysSort) {	            $sort = 'name';	        }	        else {	            $sort = $session->addProposalsFromCitysSort;	        }	    }	    $session->addProposalsFromCitysSort = $sort;	    $order = $this->params()->fromRoute('order', null);	    if (!$order) {	        if (!$session->addProposalsFromCitysOrder) {	            $order = 'asc';	        }	        else {	            $order = $session->addProposalsFromCitysOrder;	        }	    }	    $session->addProposalsFromCitysOrder = $order;	    $limit= $this->params()->fromRoute('results', null);	    if (!$limit) {	        if (!$session->addProposalsFromCitysResults) {	            $limit = 10;	        }	        else {	            $limit = $session->addProposalsFromCitysResults;	        }	    }	    $session->addProposalsFromCitysResults = $limit;	    	    $filter= $this->params()->fromRoute('filter', null);	    if (!$filter) {	        if (!$session->addProposalsFromCitysFilter) {	            $filter = 'none';	        }	        else {	            $filter = $session->addProposalsFromCitysFilter;	        }	    }	    $session->addProposalsFromCitysFilter = $filter;	    	    $proposalCount = $this->entityManager->getRepository('DGIModule\Entity\Proposal')->countAllPublishedProposalsAndMeasures($user);	    $proposalCount = $proposalCount["totalProposals"];	    $totalResults = $proposalCount;	    $page =  ceil((float)$totalResults/$limit) < $page ? ceil((float)$totalResults/$limit) : $page;	    $program = $this->entityManager->getRepository('DGIModule\Entity\Program')->findOneBy(array('progUUID' => $progUUID));	    // proposal doesn't exists or the logged user is not the owner of the program	    if (!$program || $program->getUsr()!=$user) {	        return $this->forward()->dispatch('DGIModule\Controller\Error', array('action' => 'access-denied'));	    }	    $viewModel = new ViewModel();	    $offset = ($limit == 'all') ? 0 : ($page - 1) * $limit;	    $pagedProposals = $this->entityManager->getRepository('DGIModule\Entity\Proposal')->getCityPagedProposalsForProgram($program, $offset, $limit, $sort, $order, $filter, $this->config['demodyne']['level']);	    foreach ($pagedProposals as $index => $proposal) {	        $status =  $this->forward()->dispatch('DGIModule\Controller\Proposal', array('action'=>'status-details', 'id' => $proposal->getPropUUID()));	        $viewModel->addChild($status, 'status-'.$index);	    }	    $viewModel->setTerminal($this->getRequest()->isXmlHttpRequest());	    $viewModel->setVariables([	        'pagedProposals' => $pagedProposals,	        'limit' => $limit,	        'page' => $page,	        'sort' => $sort,	        'order' => $order,	        'filter' => $filter,	        'proposalCount' => $proposalCount,	        'program' => $program	    ]);	    return $viewModel;	}	/**	 *  Add or Remove a proposal from a program	 */	public function addRemoveProposalAction()	{	    $user = $this->identity();	    $propUUID = $this->params('id', '0');	    // no parameter	    if (!$propUUID) {	        return $this->forward()->dispatch('DGIModule\Controller\Error', array('action' => 'access-denied'));	    }        /** @var \DGIModule\Entity\Proposal $proposal */        $proposal = $this->entityManager->getRepository('DGIModule\Entity\Proposal')->findOneBy(array('propUUID' => $propUUID));	    // proposal doesn't exists or the logged user is not the owner of the program	    if (!$proposal) {	        return $this->forward()->dispatch('DGIModule\Controller\Error', array('action' => 'access-denied'));	    }        /** @var \DGIModule\Entity\Program $program */        $program = $user->getProgramForLevel($proposal->getPropLevel());	    // proposal doesn't exists or the logged user is not the owner of the program	    if (!$program) {	        return $this->forward()->dispatch('DGIModule\Controller\Error', array('action' => 'access-denied'));	    }	    $added = false;	    $removed = false;	    $proposalProgram = $this->entityManager->getRepository('DGIModule\Entity\ProposalProgram')->findOneBy(array('prop' => $proposal, 'prog' => $program));	    if ($proposalProgram) {	        $this->entityManager->remove($proposalProgram);	        $removed = true;	    }	    else {	        $proposalProgram = new ProposalProgram();	        $proposalProgram->setProp($proposal)                            ->setProg($program)                            ->setSortPosition(count($program->getProposals())+1); // @todo sort again the proposals	        $this->entityManager->persist($proposalProgram);	        $added = true;	    }	    $program->setProgSavedDate(new \DateTime());        $this->entityManager->merge($program);        $this->entityManager->flush();        $this->entityManager->refresh($program);$this->entityManager->refresh($proposal);        $this->sortProposals($program);        $this->programAggregatedScore($program);        $this->proposalAggregatedScore($proposal);        return new JsonModel(array('added' => $added, 'removed'=>$removed));	}	/**	 * @todo add confirmation with goto program	 */            /**     * Delete a program     */    public function deleteProgramAction()    {        $user = $this->identity();         $progUUID = $this->params('id');        // no parameter        if (!$progUUID) {            return $this->forward()->dispatch('DGIModule\Controller\Error', array('action' => 'access-denied'));        }        $program = $this->entityManager->getRepository('DGIModule\Entity\Program')->findOneBy(array('progUUID' => $progUUID));        // proposal doesn't exists or the logged user is not the owner of the program        if (!$program || ($program->getUsr()!=$user && $user->getUsrlId()!=$this->config['demodyne']['account']['type']['admin'])) {            return $this->forward()->dispatch('DGIModule\Controller\Error', array('action' => 'access-denied'));        }        /** @var $request \Zend\Http\Request */        $request = $this->getRequest();        if ($request->isPost()){            // if already deleted            if ($program->getProgDeletedDate()) {                return new JsonModel(array('success' => true));            }            $program->setProgDeletedDate(new \DateTime())                    ->setProgSavedName($program->getProgName())                    ->setProgName($program->getProgUUID());            $this->entityManager->merge($program);            $this->entityManager->flush();            return new JsonModel(array('success' => true));        }        $viewModel = new ViewModel();        //disable layout if request by Ajax        $viewModel->setTerminal($request->isXmlHttpRequest());        $viewModel->setVariables([            'program' => $program        ]);        return $viewModel;    }    /**     *     */    public function allProgramsAction() {        $user = $this->identity();        $session = new Container('level');        $city = $session->city;        if (!$user && !$city) {            return $this->forward()->dispatch('DGIModule\Controller\Error', array('action' => 'access-denied'));        }        if (!$user) {            $user = new User();            $user->setUsrId(0);        }        if ($city) {            $city = $this->entityManager->getRepository('DGIModule\Entity\City')->findOneBy(['cityId' => $city]);            if ($city && $city!==$user->getCity()) {                $user->setUsrId(0)                     ->setCountry($city->getCountry())                     ->setCity($city);            }        }                $session = new Container('program');        $page = $this->params()->fromRoute('page', null);        if (!$page) {            if (!$session->allProgramsPage) {                $page = 1;            }            else {                $page = $session->allProgramsPage;            }        }        $session->allProgramsPage = $page;        $sort = $this->params()->fromRoute('sort', null);        if (!$sort) {            if (!$session->allProgramsSort) {                $sort = 'name';            }            else {                $sort = $session->allProgramsSort;            }        }        $session->allProgramsSort = $sort;        $order = $this->params()->fromRoute('order', null);        if (!$order) {            if (!$session->allProgramsOrder) {                $order = 'asc';            }            else {                $order = $session->allProgramsOrder;            }        }        $session->allProgramsOrder = $order;        $limit= $this->params()->fromRoute('results', null);        if (!$limit) {            if (!$session->allProgramsResults) {                $limit = 10;            }            else {                $limit = $session->allProgramsResults;            }        }        $session->allProgramsResults = $limit;        $programsCount = $this->entityManager->getRepository('DGIModule\Entity\Program')->countPrograms($user);        $page = $limit!='all'? (ceil($programsCount/$limit) < $page ? ceil($programsCount/$limit) : $page) : $page;        $offset = ($page == 0) ? 0 : ($page - 1) * $limit;        $pagedPrograms = $this->entityManager->getRepository('DGIModule\Entity\Program')->getPagedPrograms($user, $offset, $limit, $sort, $order);        $viewModel = new ViewModel();        $viewModel->setTerminal($this->getRequest()->isXmlHttpRequest());        foreach ($pagedPrograms as $index => $program) {            $categories= $this->forward()->dispatch('DGIModule\Controller\Program', array('action' => 'get-categories-count', 'id' => $program->getProgUUID()));            $viewModel->addChild($categories, 'categories-'.$index);        }                // get proposals for aggregated program        $aggregatedProgram= $this->forward()->dispatch('DGIModule\Controller\Program', array('action' => 'view-aggregated-program', 'results' => 3));        $viewModel->addChild($aggregatedProgram, 'aggregatedProgram');        if (isset($_SESSION['mobile']) && $_SESSION['mobile']) {            $viewModel->setTemplate('dgi-module/program/all-programs.mobile.phtml');        }        $viewModel->setVariables([            'pagedPrograms' => $pagedPrograms,            'limit' => $limit,            'page' => $page,            'sort' => $sort,            'order' => $order,            'user' => $user,            'programsCount' => $programsCount        ]);        return $viewModel;    }}