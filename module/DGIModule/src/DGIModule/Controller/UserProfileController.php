<?php/** * @link      https://github.com/demodyne/demodyne * @copyright Copyright (c) 2015-2017 Demodyne (https://www.demodyne.org) * @license   http://www.gnu.org/licenses/agpl.html GNU Affero General Public License */ namespace DGIModule\Controller;use Zend\Filter\File\Rename;use Zend\Mvc\Controller\AbstractActionController;use Zend\Session\SessionManager;use Zend\View\Model\JsonModel;use Zend\View\Model\ViewModel;use DoctrineModule\Stdlib\Hydrator\DoctrineObject as DoctrineHydrator;use DGIModule\Form\ChangePictureForm;use DGIModule\Form\EditUserProfileForm;use DGIModule\Form\UserSettingsForm;use Zend\Session\Container;use DGIModule\Form\EditAdministrationProfileForm;use Doctrine\ORM\EntityManager;use Zend\Mvc\I18n\Translator;use Zend\Authentication\AuthenticationService;class UserProfileController extends AbstractActionController{    protected $entityManager;    protected $translator;    protected $config;    protected $auth;    public function __construct(        array $config,        EntityManager $entityManager,        Translator $translator,        AuthenticationService $auth    )    {        $this->config = $config;        $this->entityManager = $entityManager;        $this->translator = $translator;        $this->auth = $auth;    }    	/**	 * Show the user profile	 * 	 * @see \Zend\Mvc\Controller\AbstractActionController::indexAction()	 */    public function userProfileAction()    {        unset($_SESSION['level']['city']);        $user = $this->identity();        if ($user->getUsrlId()==$this->config['demodyne']['account']['type']['partner']) {            return $this->forward()->dispatch('DGIModule\Controller\PartnerProfile', array('action' => 'partner-profile'));        }                if ($user->getUsrlId()==$this->config['demodyne']['account']['type']['administration']) {            return $this->forward()->dispatch('DGIModule\Controller\UserProfile', array('action' => 'administration-profile'));        }        $levelSession = new Container('level');        $levelSession->city = $user->getCity()->getCityId();        $levelSession->levelValue = null;        $levelSession->level = null;        $viewModel = new ViewModel();        if (isset($_SESSION['mobile']) && $_SESSION['mobile']) {            $viewModel->setTemplate('dgi-module/user-profile/user-profile.mobile.phtml');        }        $pictureSection = $this->forward()->dispatch('DGIModule\Controller\UserProfile', array('action' => 'change-picture'));        $viewModel->addChild($pictureSection, 'pictureSection');        $settingsSection = $this->forward()->dispatch('DGIModule\Controller\UserProfile', array('action' => 'user-settings'));        $viewModel->addChild($settingsSection, 'settingsSection');        $mailingSection = $this->forward()->dispatch('DGIModule\Controller\UserProfile', array('action' => 'user-mailing'));        $viewModel->addChild($mailingSection, 'mailingSection');        $myActivitySection = $this->forward()->dispatch('DGIModule\Controller\UserProfile', array('action' => 'view-my-activity'));        $viewModel->addChild($myActivitySection, 'myActivitySection');                $userNotesSection =  $this->forward()->dispatch('DGIModule\Controller\UserProfile', array('action'=>'get-user-notes', 'id' => $user->getUsrUUID()));        $viewModel->addChild($userNotesSection, 'userNotesSection');                $presentationSection = $this->forward()->dispatch('DGIModule\Controller\UserProfile', array('action' => 'user-presentation'));        $viewModel->addChild($presentationSection, 'presentationSection');        $viewModel->setVariables(array(            'user' => $user,        ));        return $viewModel;	}	public function changePictureAction()	{	    $user = $this->identity();	    $form = new ChangePictureForm();        /** @var $request \Zend\Http\Request */	    $request = $this->getRequest();	    if ($request->isPost()) {	        $post = array_merge_recursive(	            $request->getPost()->toArray(),	            $request->getFiles()->toArray()	            );	        $form->setData($post);	        $picture = $post["picture-file"]["name"];	        // TODO verify file size	        if ($form->isValid()) {                if ($picture!="") {                    $files   = $request->getFiles();                    $oldFilename = $user->getUsrPicture();                    $target = getcwd() . "/public/img/avatar/avatar.jpg";                    $filterR = new Rename(array(                        "target"    => $target,                        "randomize" => true,                    ));                    $filename= $filterR->filter($files['picture-file']);                    chmod($filename["tmp_name"], 0644);                    $user->setUsrPicture(str_replace(getcwd() . "/public", '', $filename["tmp_name"]));                    $this->entityManager->merge($user);                    $this->entityManager->flush();                    $this->entityManager->refresh($user);                    // remove old image                    if ($oldFilename!='/img/avatar/avatar.png' && file_exists(getcwd() . '/public'.$oldFilename) == true) {                        unlink(getcwd() . '/public'.$oldFilename);                    }                }	        }	    }	    $viewModel = new ViewModel();	    $viewModel->setTerminal($request->isXmlHttpRequest());        if (isset($_SESSION['mobile']) && $_SESSION['mobile']) {            $viewModel->setTemplate('dgi-module/user-profile/change-picture.mobile.phtml');        }	    $viewModel->setVariables([	        'form' => $form,	        'user' => $user,	    ]);	    return $viewModel;	}	/**	 * Change the user city. Maximum 1 change a month	 * 	 *  @todo Verify if email changed to send verification code	 *	 * @return \Zend\Http\Response|\Zend\View\Model\ViewModel	 */	public function userPresentationAction()	{	    $user = $this->identity();	    $oldCity = $user->getCity();	    $now = new \DateTime();	    $refresh = false;	    $form = new EditUserProfileForm($this->entityManager, $this->translator, $user);        /** @var \Zend\Http\Request $request */	    $request = $this->getRequest();	    if ($request->isPost()) {	        $form->bind($user);	        $email = $form->get('usrEmail')->getValue();	        if ($email==$user->getUsrEmail()) {	            $form->getInputFilter()->remove('usrEmail');	        }	        // if city changed in last 30 days, disable city change	        if ($user->getUsrChangeCityDate() && $now->diff($user->getUsrChangeCityDate())->days < 30) {	            $form ->getInputFilter()->remove('country')                       ->remove('usrPostalcode')                        ->remove('city')                        ->remove('usrCity');	        }	        //$form->bind($user);	        $form->setData($request->getPost());	        if ($form->isValid()) {	            if (!$user->getUsrChangeCityDate() || $now->diff($user->getUsrChangeCityDate())->days > 30) {    	            if ($oldCity!=$user->getCity()) {                        $user->setUsrPostalcode($user->getCity()->getCityPostalcode())                               ->setUsrCity($user->getCity()->getCityName())                               ->setUsrChangeCityDate(new \DateTime());                       $refresh = true;    	            }	            }            }            $this->entityManager->merge($user);            $this->entityManager->flush();            $this->entityManager->refresh($user);	    }	    	    $form = new EditUserProfileForm($this->entityManager, $this->translator, $user);	     	    // if city changed in last 30 days, disable city change	    if ($user->getUsrChangeCityDate() && $now->diff($user->getUsrChangeCityDate())->days < 30) {	        $form->get('country')->setAttribute('disabled', 'disabled');	        $form->get('usrPostalcode')->setAttribute('disabled', 'disabled');	        $form->get('city')->setAttribute('disabled', 'disabled');	    }	    // completed profile : required + optional fields	    $completedFields = 7 + (($user->getUsrBirthday()!=null)?1:0) + 	                                          (($user->getUsrPhone()!=null)?1:0) + 	                                          (($user->getUsrGendre()!=null)?1:0) +	                                          (($user->getUsrPresentation()!='')?1:0);        $completed = ceil(($completedFields/11)*100);	    $viewModel = new ViewModel();	    $viewModel->setTerminal($request->isXmlHttpRequest());        if (isset($_SESSION['mobile']) && $_SESSION['mobile']) {            $viewModel->setTemplate('dgi-module/user-profile/user-presentation.mobile.phtml');        }        $viewModel->setVariables(array(	        'user' => $user,	        'form' => $form,	        'completed' => $completed,	        'refresh' => $refresh	    ));	    return $viewModel;	}	/**	 * Change the password	 *	 * @return \Zend\Http\Response|\Zend\View\Model\ViewModel	 */	public function userSettingsAction()	{        /**         * @var $request \Zend\Http\Request         * @var $currentLanguage \DGIModule\Entity\Language         */	    $user = $this->identity();	    $languages = $this->entityManager->getRepository('DGIModule\Entity\Language')->getLanguages();	    $currentLanguage = $this->entityManager->getRepository('DGIModule\Entity\Language')->findOneBy(['langId' => $this->translator->getTranslator()->getLocale()]);	    $refresh = false;$pass= false;	    $form = new UserSettingsForm($user, $this->config, $this->translator);	    $form->get('language')->setValue($currentLanguage->getLangId());	    $request = $this->getRequest();	    $viewModel = new ViewModel();	    $viewModel->setTerminal($request->isXmlHttpRequest());	    $viewModel->setVariables(['refresh'=>false, 'pass'=>false]);	    if ($request->isPost()) {	        $form->setData($request->getPost());	       $errors = false;	        if ($form->isValid()) {	            $oldPassword = $form->get('usrOldPassword')->getValue();	            if ($oldPassword!='') {    	            if ($user->getUsrPassword() != md5($this->config['demodyne']['registration']['password_static_salt'] . $oldPassword . $user->getUsrPasswordSalt())) {    	                $form->get('usrOldPassword')->setMessages([_('Wrong password: '.md5($this->config['demodyne']['registration']['password_static_salt'] . $oldPassword . $user->getUsrPasswordSalt()).' '.$user->getUsrPassword())]);    	                $errors = true;    	            }    	            $usrNewPassword = $form->get('usrNewPassword')->getValue();    	            if ($usrNewPassword == '') {    	                $form->get('usrNewPassword')->setMessages([_('You must provide a new password')]);    	                $errors = true;    	            }    	            if (!$errors) {    	                $usrNewPassword = $form->get('usrNewPassword')->getValue();    	                $user->setUsrPassword(md5($this->config['demodyne']['registration']['password_static_salt'] . $usrNewPassword . $user->getUsrPasswordSalt()));    	                $pass = true;    	            }	            }	            $language = $form->get('language')->getValue();	            if ($currentLanguage->getLangId()!=$language) {	                $currentLanguage = $this->entityManager->getRepository('DGIModule\Entity\Language')->findOneBy(['langId' => $language]);	                $user->setLang($currentLanguage);	                $refresh = true;	            }	            if (!$errors) {                    $this->entityManager->merge($user);                    $this->entityManager->flush();                    $viewModel->setVariables(['refresh'=>$refresh, 'pass'=>$pass]);                    $session = new Container('language');                    $session->language = $language;	            }	        }	    }        if (isset($_SESSION['mobile']) && $_SESSION['mobile']) {            $viewModel->setTemplate('dgi-module/user-profile/user-settings.mobile.phtml');        }        $viewModel->setVariables([	        'form' => $form,	        'languages' => $languages,	        'currentLanguage' => $currentLanguage,	        'user' => $user	    ]);	    return $viewModel;	}    /**     * Change the password     *     * @return \Zend\Http\Response|\Zend\View\Model\ViewModel     */    public function userMailingAction()    {        /**         * @var $request \Zend\Http\Request         * @var $currentLanguage \DGIModule\Entity\Language         */        $user = $this->identity();        $currentLanguage = $this->entityManager->getRepository('DGIModule\Entity\Language')->findOneBy(['langId' => $this->translator->getTranslator()->getLocale()]);        $form = new UserSettingsForm($user, $this->config, $this->translator);        $form->get('language')->setValue($currentLanguage->getLangId());        $request = $this->getRequest();        $viewModel = new ViewModel();        $viewModel->setTerminal($request->isXmlHttpRequest());        $viewModel->setVariables(['refresh'=>false, 'pass'=>false]);        if ($request->isPost()) {            $form->setData($request->getPost());            if ($form->isValid()) {                /**                 * @var $digest \DGIModule\Entity\UserDigest                 */                $digest = $user->getDigest();                $digest->setDigestFrequency($form->get('freq')->getValue());//	            $digest->setDigestHighligts($form->get('highlight')->getValue());                $digest->setDigestPropProg($form->get('proposals')->getValue());                $digest->setDigestEvent($form->get('events')->getValue());//                $digest->setDigestAcademy($form->get('academy')->getValue());                $digest->setDigestAlertPrivate($form->get('privateMessagesAlert')->getValue());                $digest->setDigestAlertUpdates($form->get('updatesAlert')->getValue());                $digest->setDigestAlertComments($form->get('commentsAlert')->getValue());                $eventEvent = 0;                if (null !== $request->getPost('eventsAlert')) {                    foreach ($form->get('eventsAlert')->getValue() as $val) {                        $eventEvent += 2 ** $val;                    }                }                else {                    $form->get('eventsAlert')->setValue([]);                }                $digest->setDigestAlertEvent($eventEvent);                $statusAlert = 0;                if (null !== $request->getPost('statusAlert')) {                    foreach ($form->get('statusAlert')->getValue() as $val) {                        $statusAlert += 2 ** $val;                    }                }                else {                    $form->get('statusAlert')->setValue([]);                }                $digest->setDigestAlertStatus($statusAlert);                $this->entityManager->merge($user);                $this->entityManager->flush();            }        }        if (isset($_SESSION['mobile']) && $_SESSION['mobile']) {            $viewModel->setTemplate('dgi-module/user-profile/user-mailing.mobile.phtml');        }        $viewModel->setVariables([            'form' => $form,            'user' => $user        ]);        return $viewModel;    }	/**	 * Delete user account action. All unpublished scenarios and propositions will be deleted.	 * Published scenarios and propositions are not deleted.     *     * @todo if login before 30 days after delete => reactivate account     * @todo if 30 days after delete => delete permanently     *	 * @return \Zend\Http\Response|\Zend\View\Model\ViewModel	 */	public function deleteAction()	{	    $user = $this->identity();        /**         * @var $request \Zend\Http\Request         */	    $request = $this->getRequest();	    $viewModel = new ViewModel();	    $viewModel->setTerminal($request->isXmlHttpRequest());	    if ($request->isPost()) {	            // logout	            $this->auth->clearIdentity();	            $sessionManager = new SessionManager();	            $sessionManager->forgetMe();	            // delete user	            //$this->entityManager->remove($user);	            $user->setUsrDeleted(1)	                 ->setUsrDeletedDate(new \DateTime());	            $this->entityManager->merge($user);	            $this->entityManager->flush();	            return new JsonModel(array('url' => $this->url()->fromRoute('home')));	    }	    $viewModel->setVariables(array(	        'user' => $user,	    ));	    return $viewModel;	}	public function updateCountersAction() {	    	    $id = $this->params('id', '0');	    	    if ($id!=$this->config['demodyne']['cron']['update_counters_id']) exit();	    	    if (!empty($_SERVER['HTTP_CLIENT_IP'])) {	        $ip = $_SERVER['HTTP_CLIENT_IP'];	    } elseif (!empty($_SERVER['HTTP_X_FORWARDED_FOR'])) {	        $ip = $_SERVER['HTTP_X_FORWARDED_FOR'];	    } else {	        $ip = $_SERVER['REMOTE_ADDR'];	    }	    if ($ip!=$this->config['demodyne']['cron']['ip']) {	        printf('You don\'t have access to this ressource');	        exit();	    }	    	    $users = $this->entityManager->getRepository('DGIModule\Entity\User')->findBy(array('partner' => null, 'admin'=>null));	    $userArray = [];	    foreach ($users as $user) {            /** @var \DGIModule\Entity\User $user */    	    $counters= $user->getCounters();            $now = new \DateTime();    	    $oldTotal = $counters->getCntTotal();    	    $total = $counters->getCntTotal() - 5;    	    $total = $total<0?0:$total;    	    $counters->setCntUpdatedDate($now)    	        ->setCntTotal($total)    	        ->setCntProp(0)    	        ->setCntVote(0)    	        ->setCntCom(0);    	    $this->entityManager->merge($counters);            $userArray[] = [                'username' => $user->getUsrName(),                'registrationDate' => $user->getUsrRegistrationDate()->format('Y-m-d'),                'oldTotal' => $oldTotal,                'newTotal' => $total            ];	    }	    $this->entityManager->flush();	    return new JsonModel($userArray);	}		/**	 * 	 *	 * @return \Zend\View\Model\ViewModel	 */	public function viewUserInfoAction() {	    $me = $this->identity();	    $usrUUID = $this->params('id', '0');	    $user = $this->entityManager->getRepository('DGIModule\Entity\User')->findOneBy(array('usrUUID' => $usrUUID, 'usrDeletedDate'=>null));	    if (!$user) {	        return $this->forward()->dispatch('DGIModule\Controller\Error', array('action' => 'access-denied'));	    }	     	    $proposals = $this->entityManager->getRepository('DGIModule\Entity\Proposal')->findBy(array('usr' => $user, 'propPublished'=>1, 'propDeletedDate'=>null, 'measure'=>null));	    $propNo=[];	    $status = array_keys($this->config['demodyne']['proposal']['status']);	    foreach ($proposals as $proposal) {            /** @var \DGIModule\Entity\Proposal $proposal */            if (!isset($propNo[$status[$proposal->getPropStatus()+1]])) $propNo[$status[$proposal->getPropStatus()+1]] = 1;	        else $propNo[$status[$proposal->getPropStatus()+1]]++;	    }	     	    $viewModel = new ViewModel();	    $userScores=  $this->forward()->dispatch('DGIModule\Controller\UserProfile', array('action'=>'get-scores', 'id' => $usrUUID));	    $viewModel->addChild($userScores, 'userScores');        if (isset($_SESSION['mobile']) && $_SESSION['mobile']) {            $viewModel->setTemplate('dgi-module/user-profile/view-user-info.mobile.phtml');        }        $viewModel->setVariables([	        'user' => $user,	        'propNo' => $propNo,	        'totalProp' => count($proposals),	        'me' => $me	    ]);	    return $viewModel;	}    /**     *     *     * @return \Zend\View\Model\ViewModel     */    public function viewAdministrationInfoAction() {        $me = $this->identity();        $usrUUID = $this->params('id', '0');        $user = $this->entityManager->getRepository('DGIModule\Entity\User')->findOneBy(array('usrUUID' => $usrUUID, 'usrDeletedDate'=>null));        if (!$user) {            return $this->forward()->dispatch('DGIModule\Controller\Error', array('action' => 'access-denied'));        }        $proposals = $this->entityManager->getRepository('DGIModule\Entity\Proposal')->getUserPagedProposals($user);        $propNo=[];        $status = array_keys($this->config['demodyne']['proposal']['status']);        foreach ($proposals as $proposal) {            /** @var \DGIModule\Entity\Proposal $proposal */            if (!isset($propNo[$status[$proposal->getPropStatus()+1]])) $propNo[$status[$proposal->getPropStatus()+1]] = 1;            else $propNo[$status[$proposal->getPropStatus()+1]]++;        }        $viewModel = new ViewModel();        $viewModel->setVariables([            'user' => $user,            'propNo' => $propNo,            'totalProp' => count($proposals),            'me' => $me        ]);        return $viewModel;    }	/**	 *	 *	 * @return \Zend\View\Model\ViewModel	 */	public function viewMyActivityAction() {	    $user = $this->identity();	    $proposals = $this->entityManager->getRepository('DGIModule\Entity\Proposal')->findBy(array('usr' => $user, 'propPublished'=>1, 'propDeletedDate'=>null, 'measure'=>null));	    $propNo=[];	    $status = array_keys($this->config['demodyne']['proposal']['status']);	    foreach ($proposals as $proposal) {            /** @var \DGIModule\Entity\Proposal $proposal */	        if (!isset($propNo[$status[$proposal->getPropStatus()+1]])) $propNo[$status[$proposal->getPropStatus()+1]] = 1;	        else $propNo[$status[$proposal->getPropStatus()+1]]++;	    }		    $programs = $this->entityManager->getRepository('DGIModule\Entity\Program')->getUserPrograms($user);	    $viewModel = new ViewModel();	    if (isset($_SESSION['mobile']) && $_SESSION['mobile']) {            $viewModel->setTemplate('dgi-module/user-profile/view-my-activity.mobile.phtml');        }        $viewModel->setVariables([	        'user' => $user,	        'propNo' => $propNo,	        'totalProp' => count($proposals),	        'myPrograms' => $programs,	    ]);	    return $viewModel;	}			/**	 *	 * @return \Zend\View\Model\ViewModel	 */	public function viewAction() {        /** @var $request \Zend\Http\Request */	    $usrUUID = $this->params('id', '0');        /** @var \DGIModule\Entity\User $user */        $user = $this->entityManager->getRepository('DGIModule\Entity\User')->findOneBy(array('usrUUID' => $usrUUID, 'usrDeletedDate'=>null));	    if (!$user) {	        return $this->forward()->dispatch('DGIModule\Controller\Error', array('action' => 'access-denied'));	    }	    if ($user->isAdministration()) {	        return $this->forward()->dispatch('DGIModule\Controller\UserProfile', array('action' => 'view-administration', 'id' => $usrUUID));	    }        $levelSession = new Container('level');        $levelSession->city = $user->getCity()->getCityId();        $levelSession->levelValue = $this->config['demodyne']['level']['city'];        $levelSession->level = 'city';	    $viewModel = new ViewModel();	    $request = $this->getRequest();	    $viewModel->setTerminal($request->isXmlHttpRequest());	    	    	    $userInfo =  $this->forward()->dispatch('DGIModule\Controller\UserProfile', array('action'=>'view-user-info', 'id' => $usrUUID));        $viewModel->addChild($userInfo, 'userInfo');                $userProposals=  $this->forward()->dispatch('DGIModule\Controller\Proposal', array('action'=>'user-proposals', 'id' => $usrUUID));        $viewModel->addChild($userProposals, 'userProposals');	            $userProgramsSection =  $this->forward()->dispatch('DGIModule\Controller\Program', array('action'=>'user-programs', 'id' => $usrUUID));        $viewModel->addChild($userProgramsSection, 'userProgramsSection');                $userNotesSection =  $this->forward()->dispatch('DGIModule\Controller\UserProfile', array('action'=>'get-user-notes', 'id' => $usrUUID));        $viewModel->addChild($userNotesSection, 'userNotesSection');        if (isset($_SESSION['mobile']) && $_SESSION['mobile']) {            $viewModel->setTemplate('dgi-module/user-profile/view.mobile.phtml');        }	    $viewModel->setVariables([	        'user' => $user,	       	    ]);	   return $viewModel;	}    /**     *     * @return \Zend\View\Model\ViewModel     */    public function viewAdministrationAction() {        /** @var $request \Zend\Http\Request */        $usrUUID = $this->params('id', '0');        /** @var \DGIModule\Entity\User $user */        $user = $this->entityManager->getRepository('DGIModule\Entity\User')->findOneBy(array('usrUUID' => $usrUUID, 'usrDeletedDate'=>null));        if (!$user) {            return $this->forward()->dispatch('DGIModule\Controller\Error', array('action' => 'access-denied'));        }        if (!$user->isAdministration()) {            return $this->forward()->dispatch('DGIModule\Controller\UserProfile', array('action' => 'view', 'id' => $usrUUID));        }        $levelSession = new Container('level');        $levelSession->city = $user->getCity()->getCityId();        $levelSession->levelValue = $user->getAdmin()->getAdminLevel();        $levelSession->level = array_search($levelSession->levelValue, $this->config['demodyne']['level']);        $viewModel = new ViewModel();        $request = $this->getRequest();        $viewModel->setTerminal($request->isXmlHttpRequest());        $userInfo =  $this->forward()->dispatch('DGIModule\Controller\UserProfile', array('action'=>'view-administration-info', 'id' => $usrUUID));        $viewModel->addChild($userInfo, 'userInfo');        $userProposals=  $this->forward()->dispatch('DGIModule\Controller\Proposal', array('action'=>'user-proposals', 'id' => $usrUUID));        $viewModel->addChild($userProposals, 'userMeasures');        $viewModel->setVariables([            'user' => $user,        ]);        return $viewModel;    }	/**	 *	 * @return \Zend\View\Model\ViewModel	 */	public function getScoresAction() {	    $usrUUID = $this->params('id', '0');	    $list = $this->params()->fromRoute('list', false);        /** @var \DGIModule\Entity\User $user */	    $user = $this->entityManager->getRepository('DGIModule\Entity\User')->findOneBy(array('usrUUID' => $usrUUID, 'usrDeletedDate'=>null));	    if (!$user) {	        exit();	    }	    	    $commitment = round(($user->getCounters()->getCntTotal()/40.0) * 2) / 2;	    	    $tup = count($this->entityManager->getRepository('DGIModule\Entity\CommentThumb')->findOneBy(['up' => 1, 'usr'=>$user]));	    $tdown = count($this->entityManager->getRepository('DGIModule\Entity\CommentThumb')->findOneBy(['up' => 0, 'usr'=>$user]));	    $vote_average = $this->entityManager->getRepository('DGIModule\Entity\Vote')->getRelevanceVoteValue($user);	    $vote_average = $vote_average['totalpoints'];	     	    $relevance = 100 + (($tup || $tdown)? (40 * ($tup-$tdown) / ($tup + $tdown)) : 0) + 12 * $vote_average;	    $relevance = round(($relevance/40.0) * 2) / 2;	     	    $viewModel = new ViewModel();	    $viewModel->setVariables([	        'user' => $user,	        'commitment' => $commitment,	        'relevance' => $relevance,	        'list' => $list	    ]);	    return $viewModel;	}		/**	 *	 * @return \Zend\View\Model\ViewModel	 */	public function getUserNotesAction() {	    $me = $this->identity();	    $usrUUID = $this->params('id', '0');        /** @var \DGIModule\Entity\User $user */	    $user = $this->entityManager->getRepository('DGIModule\Entity\User')->findOneBy(array('usrUUID' => $usrUUID, 'usrDeletedDate'=>null));	    if (!$user) {	        exit();	    }	     	    $commitmentTotal = $user->getCounters()->getCntTotal();	    $commitment = round(($commitmentTotal/40.0) * 2) / 2;	     	    $tup = count($this->entityManager->getRepository('DGIModule\Entity\CommentThumb')->findOneBy(['up' => 1, 'usr'=>$user]));	    $tdown = count($this->entityManager->getRepository('DGIModule\Entity\CommentThumb')->findOneBy(['up' => 0, 'usr'=>$user]));	    $vote_average = $this->entityManager->getRepository('DGIModule\Entity\Vote')->getRelevanceVoteValue($user);	    $vote_average = $vote_average['totalpoints'];		    $relevanceTotal = 100 + (($tup || $tdown)? (40 * ($tup-$tdown) / ($tup + $tdown)) : 0) + 12 * $vote_average;	    $relevance = round(($relevanceTotal/40.0) * 2) / 2;		    $viewModel = new ViewModel();	    if (isset($_SESSION['mobile']) && $_SESSION['mobile']) {            $viewModel->setTemplate('dgi-module/user-profile/get-user-notes.mobile.phtml');        }        $viewModel->setVariables([	        'user' => $user,	        'commitment' => $commitment,	        'relevance' => $relevance,	        'commitmentTotal' => $commitmentTotal,	        'relevanceTotal' => $relevanceTotal,	        'me' => $me	    ]);	    return $viewModel;	}		/**	 *	 * @return \Zend\View\Model\ViewModel	 */	public function miniProfileAction() {	    $me = $this->identity();	    	    $usrUUID = $this->params()->fromRoute('id', '0');	    $context = $this->params()->fromRoute('context');	    	    $user = $this->entityManager->getRepository('DGIModule\Entity\User')->findOneBy(array('usrUUID' => $usrUUID, 'usrDeletedDate'=>null));	    if (!$user) {	        return $this->forward()->dispatch('DGIModule\Controller\Error', array('action' => 'access-denied'));	    }	    $viewModel = new ViewModel();        /** @var $request \Zend\Http\Request */        $request = $this->getRequest();        $viewModel->setTerminal($request->isXmlHttpRequest());	    $userScores=  $this->forward()->dispatch('DGIModule\Controller\UserProfile', array('action'=>'get-scores', 'id' => $usrUUID));	    $viewModel->addChild($userScores, 'userScores');	    // in the chat context, block user allowed	    if ($context) {	        $owner = null;            /** @var \DGIModule\Entity\Chat $chat */            $chat = $this->entityManager->getRepository('DGIModule\Entity\Chat')->findOneBy(array('chatUUID' => $context));	        if ($chat) {	            $owner = $chat->getUsr();	        }            $bu = $this->entityManager->getRepository('DGIModule\Entity\BlockedUser')->getBlockedUser($user, $context);	        $viewModel->setVariables([	            'owner' => $owner,	            'context' => $context,	            'blocked' => ($bu!=null)	        ]);	         	    }	    	    $viewModel->setVariables([	        'user' => $user,	        'me' => $me	    ]);	    return $viewModel;	}				public function searchUsersAction() {	    $user = $this->identity();	    $search = $this->params()->fromRoute('search', 30);	    $results = $this->params()->fromRoute('results', 30);	    $viewModel = new ViewModel();	    $users = $this->entityManager->getRepository('DGIModule\Entity\User')->searchUsersLevelName($search, $results);	    	    /** @var $request \Zend\Http\Request */        $request = $this->getRequest();	    $viewModel->setTerminal($request->isXmlHttpRequest());	    $viewModel->setVariables([	        'users' => $users,	        'user' => $user,	    ]);	    return $viewModel;	}    /**     * Show the user profile     *     * @see \Zend\Mvc\Controller\AbstractActionController::indexAction()     */    public function administrationProfileAction()    {        $user = $this->identity();        if ($user->getUsrlId()==$this->config['demodyne']['account']['type']['member']) {            return $this->forward()->dispatch('DGIModule\Controller\UserProfile', array('action' => 'user-profile'));        }        $levelSession = new Container('level');        $levelSession->city = $user->getCity()->getCityId();        $levelSession->levelValue = $user->getAdmin()->getAdminLevel();        $levelSession->level = array_search($levelSession->levelValue, $this->config['demodyne']['level']);        $viewModel = new ViewModel();        $pictureSection = $this->forward()->dispatch('DGIModule\Controller\UserProfile', array('action' => 'change-picture'));        $viewModel->addChild($pictureSection, 'pictureSection');        $administrationPresentationSection = $this->forward()->dispatch('DGIModule\Controller\UserProfile', array('action' => 'administration-presentation'));        $viewModel->addChild($administrationPresentationSection, 'administrationPresentatinSection');        $pictureSection = $this->forward()->dispatch('DGIModule\Controller\UserProfile', array('action' => 'change-picture'));        $viewModel->addChild($pictureSection, 'pictureSection');        $settingsSection = $this->forward()->dispatch('DGIModule\Controller\UserProfile', array('action' => 'user-settings'));        $viewModel->addChild($settingsSection, 'settingsSection');        $viewModel->setVariables(array(            'user' => $user,        ));        return $viewModel;    }  	    /**     * @return ViewModel     */    public function administrationPresentationAction()    {        /**         * @var $request \Zend\Http\Request         */        $user = $this->identity();        $oldCity = $user->getCity();        $now = new \DateTime();        $refresh = false;        $form = new EditAdministrationProfileForm($this->entityManager, $this->translator, $user);        $request = $this->getRequest();        if ($request->isPost()) {            $form->bind($user);            $email = $form->get('usrEmail')->getValue();            if ($email==$user->getUsrEmail()) {                $form->getInputFilter()->remove('usrEmail');            }            // if city changed in last 30 days, disable city change            if ($user->getUsrChangeCityDate() && $now->diff($user->getUsrChangeCityDate())->days < 30) {                $form ->getInputFilter()->remove('country')                    ->remove('usrPostalcode')                    ->remove('city')                    ->remove('usrCity');            }            $form->setData($request->getPost());            if ($form->isValid()) {                if (!$user->getUsrChangeCityDate() || $now->diff($user->getUsrChangeCityDate())->days > 30) {                    if ($oldCity!=$user->getCity()) {                        $user->setUsrPostalcode($user->getCity()->getCityPostalcode())//                                ->setCity($city)                            ->setUsrCity($user->getCity()->getCityName())                            ->setUsrChangeCityDate(new \DateTime());                        $refresh = true;                    }                }                $this->entityManager->merge($user);                $this->entityManager->flush();                $this->entityManager->refresh($user);            }        }        $form = new EditAdministrationProfileForm($this->entityManager, $this->translator, $user);        $form->get('usrFirstname')->setValue($user->getUsrFirstname());        $form->get('usrLastname')->setValue($user->getUsrLastname());        $form->get('usrEmail')->setValue($user->getUsrEmail());        $form->get('country')->setValue($user->getCountry());        $form->get('usrPostalcode')->setValue($user->getCity()?$user->getCity()->getCityPostalcode():'');        $form->get('city')->setValue($user->getCity());        $form->get('usrPhone')->setValue(($user->getUsrPhone()!=null)?$user->getUsrPhone():'');        /** @var \Zend\Form\Fieldset $admin */        $admin = $form->get('admin');        $admin->get('adminName')->setValue($user->getAdmin()->getAdminName());        $admin->get('adminPresentation')->setValue($user->getAdmin()->getAdminPresentation());        $admin->get('adminAddress')->setValue($user->getAdmin()->getAdminAddress());        $admin->get('adminWebsite')->setValue($user->getAdmin()->getAdminWebsite());        $admin->get('adminFax')->setValue($user->getAdmin()->getAdminFax());        // if city changed in last 30 days, disable city change        if ($user->getUsrChangeCityDate() && $now->diff($user->getUsrChangeCityDate())->days < 30) {            $form->get('country')->setAttribute('disabled', 'disabled');            $form->get('usrPostalcode')->setAttribute('disabled', 'disabled');            $form->get('city')->setAttribute('disabled', 'disabled');        }        $viewModel = new ViewModel();        $viewModel->setTerminal($request->isXmlHttpRequest());        $viewModel->setVariables(array(            'user' => $user,            'form' => $form,            'refresh' => $refresh        ));        return $viewModel;    }}