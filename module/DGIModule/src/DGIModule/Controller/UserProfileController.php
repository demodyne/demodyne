<?php/** * @link      https://github.com/demodyne/demodyne * @copyright Copyright (c) 2015-2016 Demodyne (https://www.demodyne.org) * @license   http://www.gnu.org/licenses/agpl.html GNU Affero General Public License */namespace DGIModule\Controller;use Zend\Mvc\Controller\AbstractActionController;use Zend\View\Model\ViewModel;use DoctrineModule\Stdlib\Hydrator\DoctrineObject as DoctrineHydrator;use DGIModule\Form\ChangePictureForm;use DGIModule\Entity\City;use DGIModule\Form\UserProfilePresentationForm;use DGIModule\Form\UserSettingsForm;use Zend\Session\Container;class UserProfileController extends AbstractActionController{	/**	 * Show the user profile	 * 	 */    public function userProfileAction()    {         $user = $this->identity();         $config = $this->getServiceLocator()->get('Config');        if ($user->getUsrlId()==$config['demodyne']['account']['type']['partner']) {            return $this->forward()->dispatch('DGIModule\Controller\PartnerProfile', array('action' => 'partner-profile'));        }                if ($user->getUsrlId()==$config['demodyne']['account']['type']['administration']) {            return $this->forward()->dispatch('DGIModule\Controller\AdministrationProfile', array('action' => 'administration-profile'));        }                $now = new \DateTime();        $cityChange = $now->diff($user->getUsrChangeCityDate())->days;        $viewModel = new ViewModel();                $pictureSection = $this->forward()->dispatch('DGIModule\Controller\UserProfile', array('action' => 'change-picture'));        $viewModel->addChild($pictureSection, 'pictureSection');                $settingsSection = $this->forward()->dispatch('DGIModule\Controller\UserProfile', array('action' => 'user-settings'));        $viewModel->addChild($settingsSection, 'settingsSection');                $myActivitySection = $this->forward()->dispatch('DGIModule\Controller\UserProfile', array('action' => 'view-my-activity'));        $viewModel->addChild($myActivitySection, 'myActivitySection');                $userNotesSection =  $this->forward()->dispatch('DGIModule\Controller\UserProfile', array('action'=>'get-user-notes', 'id' => $user->getUsrUUID()));        $viewModel->addChild($userNotesSection, 'userNotesSection');                $presentationSection = $this->forward()->dispatch('DGIModule\Controller\UserProfile', array('action' => 'user-presentation'));        $viewModel->addChild($presentationSection, 'presentationSection');                $viewModel->setVariables(array(            'user' => $user,            'cityChange' => $cityChange,            'partConfig' => $config['demodyne']['partner']        ));        return $viewModel;	}			public function changePictureAction()	{	    $user = $this->identity();	    $form = new ChangePictureForm();	    $request = $this->getRequest();	    if ($request->isPost()) {	        $post = array_merge_recursive(	            $request->getPost()->toArray(),	            $request->getFiles()->toArray()	            );	        $form->setData($post);	        $picture = $post["picture-file"]["name"];	        // TODO verify file size	        if ($form->isValid()) {    	        // verify if picture change	            if ($picture!="") {                    $files   = $request->getFiles();                    $oldFilename = $user->getUsrPicture();                    $target = getcwd() . "/public/img/avatar/avatar.jpg";                    $filterR = new \Zend\Filter\File\Rename(array(                        "target"    => $target,                        "randomize" => true,                    ));                    $filename= $filterR->filter($files['picture-file']);                    chmod($filename["tmp_name"], 0644);                    $user->setUsrPicture(str_replace(getcwd() . "/public", '', $filename["tmp_name"]));                    $entityManager = $this->getServiceLocator()->get('doctrine.entitymanager.orm_default');                    $entityManager->merge($user);                    $entityManager->flush();                    $entityManager->refresh($user);                    // remove old image                    if ($oldFilename!='/img/avatar/avatar.png' && file_exists(getcwd() . '/public'.$oldFilename) == true) {                        unlink(getcwd() . '/public'.$oldFilename);                    }                }	        }	    }	    $viewModel = new ViewModel();	    $viewModel->setTerminal($this->getRequest()->isXmlHttpRequest());	    $viewModel->setVariables([	        'form' => $form,	        'user' => $user,	    ]);	    return $viewModel;	}		/**	 * Change the user city. Maximum 1 change a month	 * 	 *  @todo Verify if email changed to send verification code	 *	 * @return \Zend\Http\Response|\Zend\View\Model\ViewModel	 */	public function userPresentationAction()	{	    $user = $this->identity();	    $oldCity = $user->getCity();	    $now = new \DateTime();	    $serviceLocator = $this->getServiceLocator();	    $entityManager = $serviceLocator->get('doctrine.entitymanager.orm_default');	    $form = new UserProfilePresentationForm($serviceLocator);	    $form->setHydrator(new DoctrineHydrator($entityManager,'DGIModule\Entity\User'));	    $form->get('usrFirstname')->setValue($user->getUsrFirstname());	    $form->get('usrLastname')->setValue($user->getUsrLastname());	    $form->get('usrEmail')->setValue($user->getUsrEmail());	    $form->get('country')->setValue($user->getCountry());	    $form->get('usrPostalcode')->setValue($user->getCity()->getCityPostalcode());	    $form->get('city')->setValue($user->getCity());	    $form->get('usrCity')->setValue($user->getCity()->getCityName());	    $form->get('usrPhone')->setValue(($user->getUsrPhone()!=null)?$user->getUsrPhone():'');	    $form->get('usrBirthday')->setValue(($user->getUsrBirthday()!=null)?$user->getUsrBirthday():0);	    $form->get('usrGendre')->setValue(($user->getUsrGendre()!=null)?$user->getUsrGendre():0);	    $form->get('usrPresentation')->setValue($user->getUsrPresentation());	    $request = $this->getRequest();	    	    if ($request->isPost()) {	        $form->bind($user);	        $email = $form->get('usrEmail')->getValue();	        if ($email==$user->getUsrEmail()) {	            $form->getInputFilter()->remove('usrEmail');	        }	        // if city changed in last 30 days, disable city change	        if ($now->diff($user->getUsrChangeCityDate())->days < 30) {	            $form ->getInputFilter()->remove('country')        	                                       ->remove('usrPostalcode')                                                    ->remove('city')                                                    ->remove('usrCity');	        }	        $form->setData($request->getPost());	        if ($form->isValid()) {	            if ($now->diff($user->getUsrChangeCityDate())->days > 30) {	                $postalcode = $form->get('usrPostalcode')->getValue();    	            $cityId = $form->get('city')->getValue();    	            $cityName = $form->get('usrCity')->getValue();    	            $city = $entityManager->getRepository('DGIModule\Entity\City')->findOneBy(array('cityId' => $cityId));    	            if ($oldCity!=$city) {                        $user->setUsrPostalcode($postalcode)                               ->setCity($city)                               ->setUsrCity($cityName)                               ->setUsrChangeCityDate(new \DateTime());    	            }	            }	            $entityManager->merge($user);	            $entityManager->flush();	        }	    }	    // @todo Add city list options and choose the already saved city	    // if city changed in last 30 days, disable city change	    if ($now->diff($user->getUsrChangeCityDate())->days < 30) {	        $form->get('country')->setAttribute('disabled', 'disabled');	        $form->get('usrPostalcode')->setAttribute('disabled', 'disabled');	        $form->get('city')->setAttribute('disabled', 'disabled');	        $form->get('usrCity')->setAttribute('disabled', 'disabled');	    }	    // completed profile : required + optional fields	    $completedFields = 7 + (($user->getUsrBirthday()!=null)?1:0) + 	                                          (($user->getUsrPhone()!=null)?1:0) + 	                                          (($user->getUsrGendre()!=null)?1:0) +	                                          (($user->getUsrPresentation()!='')?1:0);        $completed = ceil(($completedFields/11)*100);	    $viewModel = new ViewModel();	    $viewModel->setTerminal($this->getRequest()->isXmlHttpRequest());	    $viewModel->setVariables(array(	        'user' => $user,	        'form' => $form,	        'completed' => $completed	    ));	    return $viewModel;	}		/**	 * Change the password	 *	 * @return \Zend\Http\Response|\Zend\View\Model\ViewModel	 */	public function userSettingsAction()	{	    $user = $this->identity();	    $entityManager = $this->getServiceLocator()->get('doctrine.entitymanager.orm_default');	    $languages = $entityManager->getRepository('DGIModule\Entity\Language')->getLanguages();	    $currentLanguage = $entityManager->getRepository('DGIModule\Entity\Language')->findOneBy(['langId' => $this->getServiceLocator()->get('translator')->getTranslator()->getLocale()]);	    $refresh = false;$pass= false;	    $form = new UserSettingsForm($entityManager);	    $form->get('language')->setValue($currentLanguage->getLangId());	    $viewModel = new ViewModel();	    $viewModel->setTerminal($this->getRequest()->isXmlHttpRequest());	    $viewModel->setVariables(['refresh'=>false, 'pass'=>false]);	    $request = $this->getRequest();	    if ($request->isPost()) {	        $form->setData($request->getPost());	       $errors = false;	        if ($form->isValid()) {	            $config = $this->getServiceLocator()->get('Config');	            $oldPassword = $form->get('usrOldPassword')->getValue();	            if ($oldPassword!='') {    	            if ($user->getUsrPassword() != md5($config['demodyne']['registration']['password_static_salt'] . $oldPassword . $user->getUsrPasswordSalt())) {    	                $form->get('usrOldPassword')->setMessages([_('Wrong password: '.md5($config['demodyne']['registration']['password_static_salt'] . $oldPassword . $user->getUsrPasswordSalt()).' '.$user->getUsrPassword())]);    	                $errors = true;    	            }    	            $usrNewPassword = $form->get('usrNewPassword')->getValue();    	            if ($usrNewPassword == '') {    	                $form->get('usrNewPassword')->setMessages([_('You must provide a new password')]);    	                $errors = true;    	            }    	            if (!$errors) {    	                $usrNewPassword = $form->get('usrNewPassword')->getValue();    	                $user->setUsrPassword(md5($config['demodyne']['registration']['password_static_salt'] . $usrNewPassword . $user->getUsrPasswordSalt()));    	                $pass = true;    	            }	            }	            $language = $form->get('language')->getValue();	            if ($currentLanguage->getLangId()!=$language) {	                $currentLanguage = $entityManager->getRepository('DGIModule\Entity\Language')->findOneBy(['langId' => $language]);	                $user->setLang($currentLanguage);	                $refresh = true;	            }	            if (!$errors) {                    $entityManager->merge($user);                    $entityManager->flush();                    $viewModel->setVariables(['refresh'=>$refresh, 'pass'=>$pass]);                    $session = new Container('language');                    $session->language = $language;	            }	        }	    }	    $viewModel->setVariables([	        'form' => $form,	        'languages' => $languages,	        'currentLanguage' => $currentLanguage,	        'user' => $user	    ]);	    return $viewModel;	}			/**	 * Delete user account action. All unpublished scenarios and propositions will be deleted.	 * Published scenarios and propositions are not deleted. 	 * @return \Zend\Http\Response|\Zend\View\Model\ViewModel	 */	public function deleteAction()	{	    $user = $this->identity();	    $entityManager = $this->getServiceLocator()->get('doctrine.entitymanager.orm_default');	    $request = $this->getRequest();	    $viewmodel = new ViewModel();	    //disable layout if request by Ajax	    $is_xmlhttprequest = $this->getRequest()->isXmlHttpRequest();	    $viewmodel->setTerminal($is_xmlhttprequest);	    if ($request->isPost()) {            // logout            $auth = $this->getServiceLocator()->get('Zend\Authentication\AuthenticationService');            $auth->clearIdentity();            $sessionManager = new \Zend\Session\SessionManager();            $sessionManager->forgetMe();            // delete user            //$entityManager->remove($user);            $user->setUsrDeleted(1)                 ->setUsrDeletedDate(new \DateTime());            $entityManager->merge($user);            $entityManager->flush();            return new \Zend\View\Model\JsonModel(array('url' => $this->url()->fromRoute('home')));	    }	    $viewmodel->setVariables(array(	        'user' => $user,	        'is_xmlhttprequest' => $is_xmlhttprequest	    ));	    return $viewmodel;	}	public function updateCountersAction() {	    	    $id = $this->params('id', '0');	    	    $config = $this->getServiceLocator()->get('Config');	    	    if ($id!=$config['demodyne']['cron']['update_counters_id']) exit();	    	    if (!empty($_SERVER['HTTP_CLIENT_IP'])) {	        $ip = $_SERVER['HTTP_CLIENT_IP'];	    } elseif (!empty($_SERVER['HTTP_X_FORWARDED_FOR'])) {	        $ip = $_SERVER['HTTP_X_FORWARDED_FOR'];	    } else {	        $ip = $_SERVER['REMOTE_ADDR'];	    }	    //         var_dump($ip);	    	    if ($ip!=$config['demodyne']['cron']['ip']) {	        printf('You don\'t have access to this ressource');	        exit();	    }	    	    $entityManager = $this->getServiceLocator()->get('doctrine.entitymanager.orm_default');	    $users = $entityManager->getRepository('DGIModule\Entity\User')->findBy(array('partner' => null, 'admin'=>null));	    	    foreach ($users as $user) {	        echo $user->getUsrName().' '.$user->getUsrRegistrationDate()->format('Y-m-d');    	    $counters= $user->getCounters();    	    $now = new \DateTime();    	    echo ' Old total: '.$counters->getCntTotal();    	    $total = $counters->getCntTotal() - 5;    	    $total = $total<0?0:$total;    	    $counters->setCntUpdatedDate($now)    	        ->setCntTotal($total)    	        ->setCntProp(0)    	        ->setCntVote(0)    	        ->setCntCom(0);    	    echo ' New total: '.$total;    	    echo '\n';    	    $entityManager->merge($counters);	    }	    $entityManager->flush();	    echo 'Counters updated';	    exit();	    	}		public function viewUserInfoAction() {	    $usrUUID = $this->params('id', '0');	    $entityManager = $this->getServiceLocator()->get('doctrine.entitymanager.orm_default');	    $user = $entityManager->getRepository('DGIModule\Entity\User')->findOneBy(array('usrUUID' => $usrUUID, 'usrDeletedDate'=>null));	    if (!$user) {	        return $this->forward()->dispatch('DGIModule\Controller\Error', array('action' => 'access-denied'));	    }	     	    $proposals = $entityManager->getRepository('DGIModule\Entity\Proposal')->findBy(array('usr' => $user, 'propPublished'=>1, 'propDeletedDate'=>null, 'measure'=>null));	    $propNo=[];	    $config = $this->getServiceLocator()->get('Config');	    $status = array_keys($config['demodyne']['proposal']['status']['type']);	    foreach ($proposals as $proposal) {	        if (!isset($propNo[$status[$proposal->getPropStatus()+1]])) $propNo[$status[$proposal->getPropStatus()+1]] = 1;	        else $propNo[$status[$proposal->getPropStatus()+1]]++;	    }	     	    $viewModel = new ViewModel();	     	    $userScores=  $this->forward()->dispatch('DGIModule\Controller\UserProfile', array('action'=>'get-scores', 'id' => $usrUUID));	    $viewModel->addChild($userScores, 'userScores');	     	    $viewModel->setVariables([	        'user' => $user,	        'propNo' => $propNo,	        'totalProp' => count($proposals),		    ]);	    return $viewModel;	}		public function viewMyActivityAction() {	    $user = $this->identity();	    $entityManager = $this->getServiceLocator()->get('doctrine.entitymanager.orm_default');	    	    $proposals = $entityManager->getRepository('DGIModule\Entity\Proposal')->findBy(array('usr' => $user, 'propPublished'=>1, 'propDeletedDate'=>null, 'measure'=>null));	    $propNo=[];	    $config = $this->getServiceLocator()->get('Config');	    $status = array_keys($config['demodyne']['proposal']['status']['type']);	    foreach ($proposals as $proposal) {	        if (!isset($propNo[$status[$proposal->getPropStatus()+1]])) $propNo[$status[$proposal->getPropStatus()+1]] = 1;	        else $propNo[$status[$proposal->getPropStatus()+1]]++;	    }		    $programs = $entityManager->getRepository('DGIModule\Entity\Program')->getUserPrograms($user);	    	    $viewModel = new ViewModel();	    	    $viewModel->setVariables([	        'user' => $user,	        'propNo' => $propNo,	        'totalProp' => count($proposals),	        'myPrograms' => $programs,	    ]);	    return $viewModel;	}		public function viewAction() {	    $me = $this->identity();	    $usrUUID = $this->params('id', '0');	    $entityManager = $this->getServiceLocator()->get('doctrine.entitymanager.orm_default');	    $user = $entityManager->getRepository('DGIModule\Entity\User')->findOneBy(array('usrUUID' => $usrUUID, 'usrDeletedDate'=>null));	    if (!$user) {	        return $this->forward()->dispatch('DGIModule\Controller\Error', array('action' => 'access-denied'));	    }	    if ($user->isAdministration()) {	        return $this->forward()->dispatch('DGIModule\Controller\AdministrationProfile', array('action' => 'view', 'id' => $usrUUID));	    }	    	    $guestSession = new Container('guest');	    if (!$me && !$guestSession->country) {	    	        $guestSession->country = $user->getCountry()->getCountryId();	        $guestSession->countryName = $user->getCountry()->getCountryName();	        $levelSession = new Container('level');	        $config = $this->getServiceLocator()->get('Config');	                    $levelSession->level = 'country';            $levelSession->levelValue = $config['demodyne']['level']['country'];            $guestSession->level = 'country';        }	     	    $viewModel = new ViewModel();	    $viewModel->setTerminal($this->getRequest()->isXmlHttpRequest());	    	    	    $userInfo =  $this->forward()->dispatch('DGIModule\Controller\UserProfile', array('action'=>'view-user-info', 'id' => $usrUUID));        $viewModel->addChild($userInfo, 'userInfo');                $userProposals=  $this->forward()->dispatch('DGIModule\Controller\Proposal', array('action'=>'user-proposals', 'id' => $usrUUID));        $viewModel->addChild($userProposals, 'userProposals');	            $userProgramsSection =  $this->forward()->dispatch('DGIModule\Controller\Program', array('action'=>'user-programs', 'id' => $usrUUID));        $viewModel->addChild($userProgramsSection, 'userProgramsSection');                $userNotesSection =  $this->forward()->dispatch('DGIModule\Controller\UserProfile', array('action'=>'get-user-notes', 'id' => $usrUUID));        $viewModel->addChild($userNotesSection, 'userNotesSection');        	    $viewModel->setVariables([	        'user' => $user,	    ]);	   return $viewModel;	}		public function getScoresAction() {	    $usrUUID = $this->params('id', '0');	    $list = $this->params()->fromRoute('list', false);	    $entityManager = $this->getServiceLocator()->get('doctrine.entitymanager.orm_default');	    $user = $entityManager->getRepository('DGIModule\Entity\User')->findOneBy(array('usrUUID' => $usrUUID, 'usrDeletedDate'=>null));	    if (!$user) {	        exit();	    }	    	    $commitment = round(($user->getCounters()->getCntTotal()/40.0) * 2) / 2;	    	    $tup = count($entityManager->getRepository('DGIModule\Entity\CommentThumb')->findOneBy(['up' => 1, 'usr'=>$user]));	    $tdown = count($entityManager->getRepository('DGIModule\Entity\CommentThumb')->findOneBy(['up' => 0, 'usr'=>$user]));	    $vote_average = $entityManager->getRepository('DGIModule\Entity\Vote')->getRelevanceVoteValue($user);	    $vote_average = $vote_average['totalpoints'];	     	    $relevance = 100 + (($tup || $tdown)? (40 * ($tup-$tdown) / ($tup + $tdown)) : 0) + 12 * $vote_average;	    $relevance = round(($relevance/40.0) * 2) / 2;	     	    $viewModel = new ViewModel();	    $viewModel->setVariables([	        'user' => $user,	        'commitment' => $commitment,	        'relevance' => $relevance,	        'list' => $list	    ]);	    return $viewModel;	}		public function getUserNotesAction() {	    $me = $this->identity();	    $usrUUID = $this->params('id', '0');	    $entityManager = $this->getServiceLocator()->get('doctrine.entitymanager.orm_default');	    $user = $entityManager->getRepository('DGIModule\Entity\User')->findOneBy(array('usrUUID' => $usrUUID, 'usrDeletedDate'=>null));	    if (!$user) {	        exit();	    }	     	    $commitmentTotal = $user->getCounters()->getCntTotal();	    $commitment = round(($commitmentTotal/40.0) * 2) / 2;	     	    $tup = count($entityManager->getRepository('DGIModule\Entity\CommentThumb')->findOneBy(['up' => 1, 'usr'=>$user]));	    $tdown = count($entityManager->getRepository('DGIModule\Entity\CommentThumb')->findOneBy(['up' => 0, 'usr'=>$user]));	    $vote_average = $entityManager->getRepository('DGIModule\Entity\Vote')->getRelevanceVoteValue($user);	    $vote_average = $vote_average['totalpoints'];		    $relevanceTotal = 100 + (($tup || $tdown)? (40 * ($tup-$tdown) / ($tup + $tdown)) : 0) + 12 * $vote_average;	    $relevance = round(($relevanceTotal/40.0) * 2) / 2;		    $viewModel = new ViewModel();	    $viewModel->setVariables([	        'user' => $user,	        'commitment' => $commitment,	        'relevance' => $relevance,	        'commitmentTotal' => $commitmentTotal,	        'relevanceTotal' => $relevanceTotal,	        'me' => $me	    ]);	    return $viewModel;	}		public function miniProfileAction() {	    $me = $this->identity();	    $usrUUID = $this->params('id', '0');	    $entityManager = $this->getServiceLocator()->get('doctrine.entitymanager.orm_default');	    	    $user = $entityManager->getRepository('DGIModule\Entity\User')->findOneBy(array('usrUUID' => $usrUUID, 'usrDeletedDate'=>null));	    if (!$user) {	        return $this->forward()->dispatch('DGIModule\Controller\Error', array('action' => 'access-denied'));	    }	    	    $viewModel = new ViewModel();	    $viewModel->setTerminal($this->getRequest()->isXmlHttpRequest());        $userScores=  $this->forward()->dispatch('DGIModule\Controller\UserProfile', array('action'=>'get-scores', 'id' => $usrUUID));	    $viewModel->addChild($userScores, 'userScores');	    	    $viewModel->setVariables([	        'user' => $user,	        'me' => $me	    ]);	    return $viewModel;	}}