<?php/** * @link      https://github.com/demodyne/demodyne * @copyright Copyright (c) 2015-2016 Demodyne (https://www.demodyne.org) * @license   http://www.gnu.org/licenses/agpl.html GNU Affero General Public License */namespace DGIModule\Entity;use Doctrine\ORM\Mapping as ORM;use Doctrine\Common\Collections\ArrayCollection;use DGIModule\Entity\User;/** * Proposal * * @ORM\Table(name="dgi_proposals",  *            uniqueConstraints={ *                  @ORM\UniqueConstraint(name="proposition_unique", columns={"city_id", "prop_published_name"})},  *                  indexes={@ORM\Index(name="id_category_fk_scn_idx", columns={"cat_id"}),  *                           @ORM\Index(name="city_prop_fk_idx", columns={"city_id"}) *                  }) * @ORM\Entity(repositoryClass="DGIModule\Entity\Repository\ProposalRepository") */class Proposal{    /**     * @var integer     *     * @ORM\Column(name="prop_id", type="integer", nullable=false)     * @ORM\Id     * @ORM\GeneratedValue(strategy="IDENTITY")     */    private $propId;    /**     * @var string     *     * @ORM\Column(name="prop_saved_name", type="string", length=100, nullable=false)     */    private $propSavedName;    /**     * @var \DateTime     *     * @ORM\Column(name="prop_saved_date", type="datetime", nullable=true)     */    private $propSavedDate;    /**     * @var \DateTime     *     * @ORM\Column(name="prop_deleted_date", type="datetime", nullable=true)     */    private $propDeletedDate;    /**     * @var DGIModule\Entity\User     *     * @ORM\ManyToOne(targetEntity="DGIModule\Entity\User")     * @ORM\JoinColumns({     *   @ORM\JoinColumn(name="prop_deleted_usr", referencedColumnName="usr_id")     * })     */    private $deletedUsr;    /**     * @var integer     *     * @ORM\Column(name="prop_priority", type="integer", nullable=false)     */    private $propPriority;    /**     * @var string     *     * @ORM\Column(name="prop_name", type="string", length=100, nullable=false)     */    private $propName;    /**     * @var string     *     * @ORM\Column(name="prop_description", type="text", length=65535, nullable=false)     */    private $propDescription;    /**     * @var \DateTime     *     * @ORM\Column(name="prop_created_date", type="datetime", nullable=false)     */    private $propCreatedDate;    /**     * @var integer     *     * @ORM\Column(name="prop_published", type="integer", nullable=false)     */    private $propPublished;    /**     * @var \DateTime     *     * @ORM\Column(name="prop_published_date", type="datetime", nullable=true)     */    private $propPublishedDate;    /**     * @var string     *     * @ORM\Column(name="prop_uuid", type="string",  length=36, nullable=true)     */    private $propUUID;    /**     * @var integer     *     * @ORM\Column(name="prop_execution", type="integer", nullable=true)     */    private $propExecution = 0;    /**     * @var integer     *     * @ORM\Column(name="prop_status", type="integer", nullable=true)     */    private $propStatus = 1;        /**     * @var string     *     * @ORM\Column(name="prop_image1", type="string", length=100, nullable=true)     */    private $propImage1;        /**     * @var string     *     * @ORM\Column(name="prop_image2", type="string", length=100, nullable=true)     */    private $propImage2;        /**     * @var string     *     * @ORM\Column(name="prop_image3", type="string", length=100, nullable=true)     */    private $propImage3;        /**     * @var integer     *     * @ORM\Column(name="prop_level", type="integer", nullable=true)     */    private $propLevel = 1;        /**     * @var integer     *     * @ORM\Column(name="prop_full_city", type="integer", nullable=true)     */    private $propFullCity = 0;        /**     * @var integer     *     * @ORM\Column(name="prop_debate_period", type="integer", nullable=true)     */    private $propDebatePeriod = 14;        /**     * @var float     *     * @ORM\Column(name="prop_aggregated_score", type="float", precision=10, scale=0, nullable=true)     */    private $propAggregatedScore = 0;        /**     * @var \DGIModule\Entity\Category     *     * @ORM\ManyToOne(targetEntity="DGIModule\Entity\Category")     * @ORM\JoinColumns({     *   @ORM\JoinColumn(name="cat_id", referencedColumnName="cat_id")     * })     */    private $cat;    /**     * @var DGIModule\Entity\User     *     * @ORM\ManyToOne(targetEntity="DGIModule\Entity\User")     * @ORM\JoinColumns({     *   @ORM\JoinColumn(name="usr_id", referencedColumnName="usr_id")     * })     */    private $usr;    /**     * @var DGIModule\Entity\City     *     * @ORM\ManyToOne(targetEntity="DGIModule\Entity\City")     * @ORM\JoinColumns({     *   @ORM\JoinColumn(name="city_id", referencedColumnName="city_id")     * })     */    private $city;    /** @ORM\OneToMany(targetEntity="DGIModule\Entity\Favorite", mappedBy="prop") */    private $favorites;        /** @ORM\OneToMany(targetEntity="DGIModule\Entity\Comment", mappedBy="prop") */    private $comments;        /** @ORM\OneToMany(targetEntity="DGIModule\Entity\Vote", mappedBy="prop") */    private $votes;        /** @ORM\OneToMany(targetEntity="DGIModule\Entity\Step", mappedBy="prop", cascade={"persist", "merge","remove"}) */    private $timeline;        /**     * @var \Doctrine\Common\Collections\Collection|ProposalProgram[]     *     * @ORM\OneToMany(targetEntity="DGIModule\Entity\ProposalProgram", mappedBy="prop")     */    private $proposalPrograms;        /**     * @var \Doctrine\Common\Collections\Collection|User[]     *     * @ORM\ManyToMany(targetEntity="DGIModule\Entity\User", inversedBy="championForProposals", cascade={"persist", "merge","remove"})     * @ORM\JoinTable(     *  name="dgi_proposition_champions",     *  joinColumns={     *      @ORM\JoinColumn(name="prop_id", referencedColumnName="prop_id")     *  },     *  inverseJoinColumns={     *      @ORM\JoinColumn(name="usr_id", referencedColumnName="usr_id")     *  }     * )     */     private $champions;          /**      * @var \Doctrine\Common\Collections\Collection|User[]      *      * @ORM\ManyToMany(targetEntity="DGIModule\Entity\User", inversedBy="partnerForProposals", cascade={"persist", "merge","remove"})      * @ORM\JoinTable(      *  name="dgi_proposition_partners",      *  joinColumns={      *      @ORM\JoinColumn(name="prop_id", referencedColumnName="prop_id")      *  },      *  inverseJoinColumns={      *      @ORM\JoinColumn(name="usr_id", referencedColumnName="usr_id")      *  }      * )      */     private $partners;          /**      * @var \Doctrine\Common\Collections\Collection|User[]      *      * @ORM\ManyToMany(targetEntity="DGIModule\Entity\User", inversedBy="administrationForProposals", cascade={"persist", "merge","remove"})      * @ORM\JoinTable(      *  name="dgi_proposition_administrations",      *  joinColumns={      *      @ORM\JoinColumn(name="prop_id", referencedColumnName="prop_id")      *  },      *  inverseJoinColumns={      *      @ORM\JoinColumn(name="usr_id", referencedColumnName="usr_id")      *  }      * )      */     private $administrations;          /**      * @var \DGIModule\Entity\Measure      *      * @ORM\OneToOne(targetEntity="DGIModule\Entity\Measure", cascade={"persist", "merge", "remove"})      * @ORM\JoinColumns({      *   @ORM\JoinColumn(name="mes_id", referencedColumnName="mes_id")      * })      */     private $measure;          /**      * @var integer      *      * @ORM\Column(name="prop_check", type="integer", nullable=true)      */     private $propCheck = 0;          /**      * @var \DateTime      *      * @ORM\Column(name="prop_check_timer", type="datetime", nullable=true)      */     private $propCheckTimer;         /**     * Default constructor, initializes collections     */    public function __construct()    {        $this->favorites = new ArrayCollection();        $this->comments = new ArrayCollection();        $this->votes = new ArrayCollection();        $this->champions = new ArrayCollection();        $this->partners = new ArrayCollection();        $this->administrations = new ArrayCollection();        $this->timeline = new ArrayCollection();        $this->proposalPrograms = new ArrayCollection();    }    /**     * Get propId     *     * @return integer      */    public function getPropId()    {        return $this->propId;    }    /**     * Set propName     *     * @param string $propName     * @return Proposal     */    public function setPropName($propName)    {        $this->propName = $propName;        return $this;    }    /**     * Get propName     *     * @return string      */    public function getPropName()    {        return $this->propName;    }    /**     * Set propDescription     *     * @param string $propDescription     * @return Proposal     */    public function setPropDescription($propDescription)    {        $this->propDescription = $propDescription;        return $this;    }    /**     * Get propDescription     *     * @return string      */    public function getPropDescription()    {        return $this->propDescription;    }    /**     * Set propPriority     *     * @param integer $propPriority     * @return Proposal     */    public function setPropPriority($propPriority)    {        $this->propPriority = $propPriority;        return $this;    }    /**     * Get propPriority     *     * @return integer      */    public function getPropPriority()    {        return $this->propPriority;    }    /**     * Set propCreated     *     * @param \DateTime $propCreated     * @return Proposal     */    public function setPropCreatedDate($propCreated)    {        $this->propCreatedDate = $propCreated;        return $this;    }    /**     * Get propCreated     *     * @return \DateTime      */    public function getPropCreatedDate()    {        return $this->propCreatedDate;    }    /**     * Set propPublished     *     * @param integer $propPublished     * @return Proposal     */    public function setPropPublished($propPublished)    {        $this->propPublished = $propPublished;        return $this;    }    /**     * Get propPublished     *     * @return integer     */    public function getPropPublished()    {        return $this->propPublished;    }    /**     * Set propStatus     *     * @param integer $propStatus     * @return Proposal     */    public function setPropStatus($propStatus)    {        $this->propStatus = $propStatus;        return $this;    }    /**     * Get propStatus     *     * @return integer     */    public function getPropStatus()    {        return $this->propStatus;    }    /**     * Set propPublishedDate     *     * @param \DateTime $propPublishedDate     * @return Proposal     */    public function setPropPublishedDate($propPublishedDate)    {        $this->propPublishedDate = $propPublishedDate;        return $this;    }    /**     * Get propPublishedDate     *     * @return \DateTime     */    public function getPropPublishedDate()    {        return $this->propPublishedDate;    }    /**     * Set propSavedName     *     * @param string $propSavedName     * @return Proposal     */    public function setPropSavedName($propSavedName)    {        $this->propSavedName = $propSavedName;        return $this;    }    /**     * Get propSavedName     *     * @return string     */    public function getPropSavedName()    {        return $this->propSavedName;    }    /**     * Set propSavedDate     *     * @param \DateTime $propSavedDate     * @return Proposal     */    public function setPropSavedDate($propSavedDate)    {        $this->propSavedDate = $propSavedDate;        return $this;    }    /**     * Get propSavedDate     *     * @return \DateTime     */    public function getPropSavedDate()    {        return $this->propSavedDate;    }    /**     * Set propDeletedDate     *     * @param \DateTime $propSavedDate     * @return Proposal     */    public function setPropDeletedDate($propDeletedDate)    {        $this->propDeletedDate = $propDeletedDate;        return $this;    }    /**     * Get propDeletedDate     *     * @return \DateTime     */    public function getPropDeletedDate()    {        return $this->propDeletedDate;    }       /**     * Get scnName     *     * @return string     */    public function getPropUUID()    {        return $this->propUUID;    }    /**     * Set propExecution     *     * @param integer $propExecution     * @return Proposal     */    public function setPropExecution($propExecution)    {        $this->propExecution = $propExecution;        return $this;    }    /**     * Get propExecution     *     * @return integer      */    public function getPropExecution()    {        return $this->propExecution;    }        /**     * Set propImage1     *     * @param string $propImage1     *     * @return Proposal     */    public function setPropImage1($propImage1)    {        $this->propImage1 = $propImage1;            return $this;    }        /**     * Get propImage1     *     * @return string     */    public function getPropImage1()    {        return $this->propImage1;    }        /**     * Set propImage2     *     * @param string $propImage2     *     * @return Proposal     */    public function setPropImage2($propImage2)    {        $this->propImage2 = $propImage2;            return $this;    }        /**     * Get propImage2     *     * @return string     */    public function getPropImage2()    {        return $this->propImage2;    }        /**     * Set propImage3     *     * @param string $propImage3     *     * @return Proposal     */    public function setPropImage3($propImage3)    {        $this->propImage3 = $propImage3;            return $this;    }        /**     * Get propImage3     *     * @return string     */    public function getPropImage3()    {        return $this->propImage3;    }        /**     * Set propLevel     *     * @param integer $propLevel     *     * @return Proposal     */    public function setPropLevel($propLevel)    {        $this->propLevel = $propLevel;            return $this;    }        /**     * Get propLevel     *     * @return integer     */    public function getPropLevel()    {        return $this->propLevel;    }        /**     * Set propFullCity     *     * @param integer $propFullCity     *     * @return Proposal     */    public function setPropFullCity($propFullCity)    {        $this->propFullCity = $propFullCity;            return $this;    }        /**     * Get propFullCity     *     * @return integer     */    public function getPropFullCity()    {        return $this->propFullCity;    }        /**     * Set propDebatePeriod     *     * @param integer $propDebatePeriod     *     * @return Proposal     */    public function setPropDebatePeriod($propDebatePeriod)    {        $this->propDebatePeriod = $propDebatePeriod;            return $this;    }        /**     * Get propDebatePeriod     *     * @return integer     */    public function getPropDebatePeriod()    {        return $this->propDebatePeriod;    }        /**     * Set propAggregatedScore     *     * @param float $propAggregatedScore     *     * @return Proposal     */    public function setPropAggregatedScore($propAggregatedScore)    {        $this->propAggregatedScore = $propAggregatedScore;            return $this;    }        /**     * Get propAggregatedScore     *     * @return float     */    public function getPropAggregatedScore()    {        return $this->propAggregatedScore;    }        /**     * Set cat     *     * @param \DGIModule\Entity\Category $cat     * @return Proposal     */    public function setCat(\DGIModule\Entity\Category $cat = null)    {        $this->cat = $cat;        return $this;    }    /**     * Get cat     *     * @return \DGIModule\Entity\Category      */    public function getCat()    {        return $this->cat;    }    /**     * Set usr     *     * @param DGIModule\Entity\User $usr     *     * @return Proposal     */    public function setUsr(\DGIModule\Entity\User $usr = null)    {        $this->usr = $usr;        return $this;    }    /**     * Get usr     *     * @return DGIModule\Entity\User     */    public function getUsr()    {        return $this->usr;    }    /**     * Set deleted usr     *     * @param DGIModule\Entity\User $usr     *     * @return Proposal     */    public function setDeletedUsr(\DGIModule\Entity\User $usr = null)    {        $this->deletedUsr = $usr;        return $this;    }    /**     * Get deleted user     *     * @return DGIModule\Entity\User     */    public function getDeletedUsr()    {        return $this->deletedUsr;    }    /**     * Set city     *     * @param \DGIModule\Entity\City $city     * @return Proposal     */    public function setCity(\DGIModule\Entity\City $city = null)    {        $this->city = $city;        return $this;    }    /**     * Get city     *     * @return \DGIModule\Entity\City     */    public function getCity()    {        return $this->city;    }     /**     * @param UserGroup $userGroup     */    public function addFavorite(Favorite $favorite)    {        if ($this->favorites->contains($favorite)) {            return;        }        $this->favorites->add($favorite);    }    public function getUsers() {        $users = [];        foreach ($this->favorites as $fav) $users[] = $fav->getUsr();        return $users;    }    public function getComments() {            return $this->comments;    }    public function getVotes() {        return $this->votes;    }    public function getTotalVotes() {        return count($this->votes);    }    public function getPositiveVotes() {        $votes = 0;        foreach ($this->votes as $vote)            if ($vote->getVoteVote()>0) $votes++;        return $votes;    }    public function getVeryFavourableVotes() {        $votes = 0;        foreach ($this->votes as $vote) {            if ($vote->getVoteVote()==5) $votes++;        }        return $votes;    }    public function getFavourableVotes() {        $votes = 0;        foreach ($this->votes as $vote)            if ($vote->getVoteVote()==3) $votes++;            return $votes;    }    public function getUnFavourableVotes() {        $votes = 0;        foreach ($this->votes as $vote)            if ($vote->getVoteVote()==-3) $votes++;            return $votes;    }    public function getOpposedVotes() {        $votes = 0;        foreach ($this->votes as $vote)            if ($vote->getVoteVote()==-5) $votes++;            return $votes;    }    public function getNegativeVotes() {        $votes = 0;        foreach ($this->votes as $vote)            if ($vote->getVoteVote()<0) $votes++;        return $votes;    }    public function getNeutralVotes() {        $votes = 0;        foreach ($this->votes as $vote)            if ($vote->getVoteVote()==0) $votes++;        return $votes;    }    public function getVotesAverage() {        $voteTotal = 0;        foreach ($this->votes as $vote)            $voteTotal+=$vote->getVoteVote();                return count($this->votes)?$voteTotal/count($this->votes):0;    }    public function addRemovePartner(User $user)    {        if ($this->partners->contains($user)) {            $this->partners->removeElement($user);        }        else {            $this->partners->add($user);        }    }    /**     * @param User $user     */     public function addPartner(User $user)     {         if ($this->partners->contains($user)) {            return;         }         $this->partners->add($user);     }     /**     * @param User $user     */     public function removePartner(User $user)     {         if (!$this->partners->contains($user)) {             return;         }        $this->partners->removeElement($user);     }     public function getPartners() {        return $this->partners;     }     public function hasPartner(User $user) {         if ($this->partners->contains($user)) {             return true;         }         return false;     }     /**      * @param User $user      */     public function addChampion(User $user)     {         if ($this->champions->contains($user)) {             return;         }         $this->champions->add($user);     }     /**      * @param User $user      */     public function removeChampion(User $user)     {         if (!$this->champions->contains($user)) {             return;         }         $this->champions->removeElement($user);     }     public function getChampions() {         return $this->champions;     }     /**      * @param User $user      */     public function addAdministration(User $user)     {         if ($this->administrations->contains($user)) {             return;         }         $this->administrations->add($user);     }     /**      * @param User $user      */     public function removeAdministration(User $user)     {         if (!$this->administrations->contains($user)) {             return;         }         $this->administrations->removeElement($user);     }     public function getAdministrations() {         return $this->administrations;     }     public function getTimeline() {         return $this->timeline;     }     public function getPlanningSteps() {         $planningSteps = array();         foreach ($this->timeline as $step) {              if ($step->getStepType()==0) {                  $planningSteps[] = $step;              }         }         return $planningSteps;     }     public function getExecutionSteps() {         $executionSteps = array();         foreach ($this->timeline as $step) {             if ($step->getStepType()==1) {                 $executionSteps[] = $step;             }         }         return $executionSteps;     }     public function getFollowUpSteps() {         $followUpSteps = array();         foreach ($this->timeline as $step) {             if ($step->getStepType()==2) {                 $followUpSteps[] = $step;             }         }         return $followUpSteps;     }     /**      * Get the program list      *      * @return \Doctrine\Common\Collections\Collection      */    public function getPrograms() {         return $this->proposalPrograms;     }    public function getProposalPrograms() {         return $this->proposalPrograms;     }          public function getMeanPriority() {         $priority = 0;         foreach ($this->proposalPrograms as $proposalProgram) {             $priority+=$proposalProgram->getSortPosition();         }         $priority = count($this->proposalPrograms)?$priority/count($this->proposalPrograms):0;         return $priority;     }          public function setMeasure(Measure $measure) {         $this->measure = $measure;         return $this;     }     public function getMeasure()     {         return $this->measure;     }     public function isMeasure() {         return ($this->measure!=null)?1:0;     }          /**      * Set propCheck      *      * @param integer $propCheck      *      * @return Proposal      */     public function setPropCheck($propCheck)     {         $this->propCheck = $propCheck;              return $this;     }          /**      * Get propCheck      *      * @return integer      */     public function getPropCheck()     {         return $this->propCheck;     }          /**      * Set propCheckTimer      *      * @param \DateTime $propCheckTimer      *      * @return Proposal      */     public function setPropCheckTimer($propCheckTimer)     {         $this->propCheckTimer = $propCheckTimer;              return $this;     }          /**      * Get propCheckTimer      *      * @return \DateTime      */     public function getPropCheckTimer()     {         return $this->propCheckTimer;     }      }