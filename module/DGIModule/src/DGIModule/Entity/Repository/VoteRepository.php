<?php/** * @link      https://github.com/demodyne/demodyne * @copyright Copyright (c) 2015-2017 Demodyne (https://www.demodyne.org) * @license   http://www.gnu.org/licenses/agpl.html GNU Affero General Public License */namespace DGIModule\Entity\Repository;use DGIModule\Entity\Proposal;use DGIModule\Entity\User;use Doctrine\ORM\EntityRepository;class VoteRepository extends EntityRepository{    public function getVoteProposalUser(Proposal $proposition, User $user)    {        $q = $this->createQueryBuilder('v')            ->where('v.prop = :prop')            ->andWhere('v.usr = :usr')            ->setParameter('prop', $proposition)            ->setParameter('usr', $user);        return $q->getQuery()->getResult();    }    /**     * Verify if the $proposition was already voted by the $user     *      * @param Proposal $proposition     * @param User $user     * @return boolean     */    public function isVotedByUser(Proposal $proposition, User $user) {        $q = $this->createQueryBuilder('v')                    ->where('v.prop = :prop')                    ->andWhere('v.usr = :usr')                    ->setParameter('prop', $proposition)                    ->setParameter('usr', $user);        if ($q->getQuery()->getResult())             return true;        return false;    }    /**     * Get vote_average, priority_average, opposed votes,     * favourable votes, neutral votes and total votes for     * the proposition     *     * @param Proposal $proposal     * @return array     * @internal param Proposal $proposition     */    public function getVoteValue(Proposal $proposal) {        $q = $this->createQueryBuilder('v')                    ->resetDQLPart('select')                    ->select('AVG(v.voteVote) as totalpoints')                    ->addSelect('sum(CASE WHEN (v.voteVote = -5) THEN 1 ELSE 0 END) as opposed')                    ->addSelect('sum(CASE WHEN (v.voteVote = -3) THEN 1 ELSE 0 END) as unfavourable')                    ->addSelect('sum(CASE WHEN (v.voteVote = 0) THEN 1 ELSE 0 END) as neutral')                    ->addSelect('sum(CASE WHEN (v.voteVote = 3) THEN 1 ELSE 0 END) as favourable')                    ->addSelect('sum(CASE WHEN (v.voteVote = 5) THEN 1 ELSE 0 END) as veryfavourable')                    ->addSelect('count(distinct v.voteId) as totalvotes')                    ->where('v.prop=:proposal')                    ->groupBy('v.prop')                    ->setParameters([                        'proposal'=> $proposal        ]);        $voteValue = $q->getQuery()->getOneOrNullResult();        // return selected values or no voted proposition         return $voteValue?$voteValue:[            'totalpoints' => 0,             'opposed' => 0,             'unfavourable' => 0,             'neutral' => 0,             'favourable' => 0,             'veryfavourable' => 0,             'totalvotes' => 0,             /*, 'priority_average' => 10*/];    }    public function getReferendumValue(User $refUser, Proposal $refProp) {        $q = $this->createQueryBuilder('v')            ->resetDQLPart('select')            ->select('count(distinct v.voteId) as total')            ->addSelect('sum(CASE WHEN (v.voteVote = -5) THEN 1 ELSE 0 END) as non')            ->addSelect('sum(CASE WHEN (v.voteVote = 0) THEN 1 ELSE 0 END) as neutral')            ->addSelect('sum(CASE WHEN (v.voteVote = 5) THEN 1 ELSE 0 END) as oui')            ->where('v.prop=:proposal')            ->andWhere('v.usr = :user')            ->groupBy('v.prop')            ->setParameters([                'proposal'=> $refProp,                'user'=>$refUser            ]);        $voteValue = $q->getQuery()->getOneOrNullResult();        // return selected values or no voted proposition        return $voteValue?$voteValue:[            'total' => 0,            'non' => 0,            'neutral' => 0,            'oui' => 0,            ];    }        public function getTopValue(Proposal $proposal, $levels) {        if ($proposal->getPropLevel()==$levels['city']) {                        $city = $proposal->getCity();                        if ($proposal->getPropFullCity() && $proposal->getCity()->getFullCity()) {                $city = $proposal->getCity()->getFullCity();            }           $query = $this->getEntityManager()->createQuery('SELECT COUNT(distinct u.usrId) as registered_users                                   FROM DGIModule\Entity\User u LEFT JOIN u.city city                                   WHERE u.city=:city OR city.fullCity=:city')                          ->setParameter('city', $city);            $users = $query->getOneOrNullResult();            $registeredUsers = $users["registered_users"];            $cityPopulation = $city->getCityPopulation();            $util_popul=$cityPopulation?($registeredUsers/$cityPopulation):0;        }        if ($proposal->getPropLevel()==$levels['region']) {            $region = $proposal->getCity()->getRegion();            $query = $this->getEntityManager()->createQuery('SELECT COUNT(distinct u.usrId) as registered_users                                                   FROM DGIModule\Entity\User u LEFT JOIN u.city city                                                   WHERE city.region=:region')                                                           ->setParameter('region', $region);           $users = $query->getOneOrNullResult();           $registeredUsers = $users["registered_users"];            $cityPopulation = $region->getRegionPopulation();            $util_popul=$cityPopulation?($registeredUsers/$cityPopulation):0;        }        if ($proposal->getPropLevel()==$levels['country']) {            $country = $proposal->getCity()->getCountry();            $query = $this->getEntityManager()->createQuery('SELECT COUNT(distinct u.usrId) as registered_users                                                   FROM DGIModule\Entity\User u                                                   WHERE u.country=:country')                           ->setParameter('country', $country);           $users = $query->getOneOrNullResult();           $registeredUsers = $users["registered_users"];           $cityPopulation = $country->getCountryPopulation();           $util_popul=$cityPopulation?($registeredUsers/$cityPopulation):0;        }        $q = $this->createQueryBuilder('v')                    ->resetDQLPart('select')                    ->select('AVG(v.voteVote) as totalpoints')                    ->addSelect('AVG(v.voteVote)*(1+count(distinct v.voteId)/:util+:util_popul) as toppoints')                    ->where('v.prop=:proposal')                    ->groupBy('v.prop')                    ->setParameters([                        'proposal'=> $proposal,                        'util'=> $registeredUsers,                        'util_popul'=> $util_popul,                    ]);        $voteValue = $q->getQuery()->getOneOrNullResult();        // return selected values or no voted proposition        return $voteValue?$voteValue:[            'totalpoints' => 0,            'toppoints' => 0        ];    }    /**     * Get vote_average, priority_average, opposed votes,     * favourable votes, neutral votes and total votes for     * the proposition     *     * @param User $user     * @return array(vote_average)     */    public function getRelevanceVoteValue(User $user) {                $q = $this->createQueryBuilder('v')                    ->select('AVG(v.voteVote) as totalpoints')                    ->leftJoin('v.prop', 'p')                    ->where('p.usr=:user')                    ->groupBy('p.usr')                    ->setParameters([                        'user'=> $user                    ]);        $voteValue = $q->getQuery()->getOneOrNullResult();        // return selected values or no voted proposition        return $voteValue?$voteValue:[            'totalpoints' => 0];    }        public function getProposalsCheck2(Proposal $proposal) {            $q = $this->createQueryBuilder('v')            ->leftJoin('v.usr', 'u')            ->where('v.prop=:prop')            ->andWhere("DATEADD(u.usrLastLoginDate, 3, 'MONTH') > :now ")            ->setParameters([                'prop'=> $proposal,                'now' => new \DateTime()            ]);        return $q->getQuery()->getResult();    }}