<?php/** * @link      https://github.com/demodyne/demodyne * @copyright Copyright (c) 2015-2016 Demodyne (https://www.demodyne.org) * @license   http://www.gnu.org/licenses/agpl.html GNU Affero General Public License */namespace DGIModule\Entity\Repository;use Doctrine\ORM\EntityRepository;class VoteRepository extends EntityRepository{    public function getVoteProposalUser(\DGIModule\Entity\Proposal $proposition, \DGIModule\Entity\User $user)    {        $q = $this->createQueryBuilder('v')            ->where('v.prop = :prop')            ->andWhere('v.usr = :usr')            ->setParameter('prop', $proposition)            ->setParameter('usr', $user);        return $q->getQuery()->getResult();    }    /**     * Verify if the $proposition was already voted by the $user     *      * @param \DGIModule\Entity\Proposal $proposition     * @param \DGIModule\Entity\User $user     * @return boolean     */    public function isVotedByUser(\DGIModule\Entity\Proposal $proposition, \DGIModule\Entity\User $user) {        $q = $this->createQueryBuilder('v')                    ->where('v.prop = :prop')                    ->andWhere('v.usr = :usr')                    ->setParameter('prop', $proposition)                    ->setParameter('usr', $user);        if ($q->getQuery()->getResult())             return true;        return false;    }        /**     * Get vote_average, priority_average, opposed votes,      * favourable votes, neutral votes and total votes for      * the proposition     *      * @param \DGIModule\Entity\Proposal $proposition     * @return array(vote_average, priority_average, opposed, favourable, neutral, total_votes)     */    public function getVoteValue(\DGIModule\Entity\Proposal $proposal) {        /*'SELECT prop_id, sum(vote_vote)/count(distinct vote_id) as vote_average, sum(vote_priority)/count(distinct vote_id) as priority_average,            sum(CASE WHEN (vote_vote < 0) THEN 1 ELSE 0 END) as opposed, sum(CASE WHEN (vote_vote > 0) THEN 1 ELSE 0 END) as favorable,            sum(CASE WHEN (vote_vote = 0) THEN 1 ELSE 0 END) as neutral, count(distinct vote_id) as total_votes            FROM DGIModule\Entity\Vote WHERE prop_id=:prop_id group by prop_id;'*///         $query = $this->getEntityManager()->createQuery('SELECT COUNT(distinct u.usrId) as city_users//                                                FROM DGIModule\Entity\User u//                                                WHERE u.city=:city AND u.usrlId=2')//                                             ->setParameter('city', $proposal->getCity());//        $users = $query->getOneOrNullResult();//        $cityUsers = $users["city_users"];//        $cityPopulation = $proposal->getCity()->getCityPopulation();//        $util_popul=$cityPopulation?($cityUsers/$cityPopulation):0;        $q = $this->createQueryBuilder('v')                    ->resetDQLPart('select')                    //->select('AVG(v.voteVote)*(AVG(v.votePriority)/10)*(1+count(distinct v.voteId)/:util+:util_popul) as totalpoints')                    //->select('AVG(v.voteVote)*(1+count(distinct v.voteId)/:util+:util_popul) as totalpoints')                    ->select('AVG(v.voteVote) as totalpoints')                    ->addSelect('sum(CASE WHEN (v.voteVote = -5) THEN 1 ELSE 0 END) as opposed')                    ->addSelect('sum(CASE WHEN (v.voteVote = -3) THEN 1 ELSE 0 END) as unfavourable')                    ->addSelect('sum(CASE WHEN (v.voteVote = 0) THEN 1 ELSE 0 END) as neutral')                    ->addSelect('sum(CASE WHEN (v.voteVote = 3) THEN 1 ELSE 0 END) as favourable')                    ->addSelect('sum(CASE WHEN (v.voteVote = 5) THEN 1 ELSE 0 END) as veryfavourable')                    ->addSelect('count(distinct v.voteId) as totalvotes')                    ->where('v.prop=:proposal')                    ->groupBy('v.prop')                    ->setParameters([                        'proposal'=> $proposal                    ]);        $voteValue = $q->getQuery()->getOneOrNullResult();        // return selected values or no voted proposition         return $voteValue?$voteValue:[            'totalpoints' => 0,             'opposed' => 0,             'unfavourable' => 0,             'neutral' => 0,             'favourable' => 0,             'veryfavourable' => 0,             'totalvotes' => 0,             ];    }        /**     * Get the top value for the proposition . The total points are calculated as :     *     *      total_points=AVG(votes)*(1+no_votes/$city_users+$city_users/$city_population)     *     */    public function getTopValue(\DGIModule\Entity\Proposal $proposal, $levels) {        if ($proposal->getPropLevel()==$levels['city']) {                        if ($proposal->getPropFullCity()) {                $city = $proposal->getCity()->getFullCity();            }            else {                $city = $proposal->getCity();            }           $query = $this->getEntityManager()->createQuery('SELECT COUNT(distinct u.usrId) as registered_users                                   FROM DGIModule\Entity\User u LEFT JOIN u.city city                                   WHERE u.city=:city OR city.fullCity=:city')                          ->setParameter('city', $city);            $users = $query->getOneOrNullResult();            $registeredUsers = $users["registered_users"];            $cityPopulation = $city->getCityPopulation();            $util_popul=$cityPopulation?($registeredUsers/$cityPopulation):0;        }        elseif ($proposal->getPropLevel()==$levels['region']) {            $region = $proposal->getCity()->getRegion();            $query = $this->getEntityManager()->createQuery('SELECT COUNT(distinct u.usrId) as registered_users                                                   FROM DGIModule\Entity\User u LEFT JOIN u.city city                                                   WHERE city.region=:region')                                                           ->setParameter('region', $region);           $users = $query->getOneOrNullResult();           $registeredUsers = $users["registered_users"];            $cityPopulation = $region->getRegionPopulation();            $util_popul=$cityPopulation?($registeredUsers/$cityPopulation):0;        }        elseif ($proposal->getPropLevel()==$levels['country']) {            $country = $proposal->getCity()->getCountry();            $query = $this->getEntityManager()->createQuery('SELECT COUNT(distinct u.usrId) as registered_users                                                   FROM DGIModule\Entity\User u                                                   WHERE u.country=:country')                           ->setParameter('country', $country);           $users = $query->getOneOrNullResult();           $registeredUsers = $users["registered_users"];           $cityPopulation = $country->getCountryPopulation();           $util_popul=$cityPopulation?($registeredUsers/$cityPopulation):0;        }                $q = $this->createQueryBuilder('v')                    ->resetDQLPart('select')                    ->select('AVG(v.voteVote) as totalpoints')                    ->addSelect('AVG(v.voteVote)*(1+count(distinct v.voteId)/:util+:util_popul) as toppoints')                    ->where('v.prop=:proposal')                    ->groupBy('v.prop')                    ->setParameters([                        'proposal'=> $proposal,                        'util'=> $registeredUsers,                        'util_popul'=> $util_popul,                    ]);        $voteValue = $q->getQuery()->getOneOrNullResult();        // return selected values or no voted proposition        return $voteValue?$voteValue:[            'totalpoints' => 0,            'toppoints' => 0        ];    }    public function getRelevanceVoteValue(\DGIModule\Entity\User $user) {                $q = $this->createQueryBuilder('v')                    ->select('AVG(v.voteVote) as totalpoints')                    ->leftJoin('v.prop', 'p')                    ->where('p.usr=:user')                     ->groupBy('p.usr')                    ->setParameters([                        'user'=> $user                    ]);        $voteValue = $q->getQuery()->getOneOrNullResult();        // return selected values or no voted proposition        return $voteValue?$voteValue:[            'totalpoints' => 0];    }        public function getProposalsCheck2(\DGIModule\Entity\Proposal $proposal) {            $q = $this->createQueryBuilder('v')            ->leftJoin('v.usr', 'u')            ->where('v.prop=:prop')            ->andWhere("DATEADD(u.usrLastLoginDate, 3, 'MONTH') > :now ")            ->setParameters([                'prop'=> $proposal,                'now' => new \DateTime()            ]);        // return selected values or no voted proposition        return $q->getQuery()->getResult();    }}