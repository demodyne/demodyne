<?php/** * @link      https://github.com/demodyne/demodyne * @copyright Copyright (c) 2015-2017 Demodyne (https://www.demodyne.org) * @license   http://www.gnu.org/licenses/agpl.html GNU Affero General Public License */namespace DGIModule\Entity\Repository;use DGIModule\Entity\Administration;use DGIModule\Entity\Program;use DGIModule\Entity\Proposal;use Doctrine\ORM\EntityRepository;use Doctrine\ORM\Tools\Pagination\Paginator;use DGIModule\Entity\User;use Zend\Session\Container;class ProposalRepository extends EntityRepository{    /**     * @param User $user     * @param array $levelConfig     * @param bool $published     * @return array     */    public function countUserProposals(User $user, array $levelConfig, $published = false) {        $q = $this->createQueryBuilder('p')            ->resetDQLPart('select')            ->select('count(distinct p.propId) as totalProposals')            ->addSelect('sum(CASE WHEN (p.propLevel = :cityLevel) THEN 1 ELSE 0 END) as cityProposals')            ->addSelect('sum(CASE WHEN (p.propLevel = :regionLevel) THEN 1 ELSE 0 END) as regionProposals')            ->addSelect('sum(CASE WHEN (p.propLevel = :countryLevel) THEN 1 ELSE 0 END) as countryProposals')            ->where('p.usr=:user')            ->andWhere('p.propDeletedDate IS NULL')            ->setParameter('user', $user)            ->setParameter('cityLevel', $levelConfig['city'])            ->setParameter('regionLevel', $levelConfig['region'])            ->setParameter('countryLevel', $levelConfig['country']);        if ($published) {            $q->andWhere('p.propPublishedDate IS NOT NULL')                ->andWhere('p.propStatus>:draftStatus')                ->setParameter('draftStatus', 0)            ;        }        if ($user->isAdministration()) {            $q->andWhere('p.measure IS NOT NULL');        }        else {            $q->andWhere('p.measure IS NULL');        }        return $q->getQuery()->getOneOrNullResult();    }    /**     * @param User $user     * @return array     */    public function countUserFavorites(User $user) {        $q = $this->createQueryBuilder('p')            ->leftJoin('p.favorites', 'f')            ->resetDQLPart('select')            ->select('count(distinct p.propId) as totalFavorites')            ->where('f.usr=:user')            ->andWhere('p.propDeletedDate IS NULL')            ->setParameter('user', $user);        return $q->getQuery()->getOneOrNullResult();    }    /**     * Count the published Proposals for the $city     * @param \DGIModule\Entity\User $user     * @param bool $measure Whether we count the proposals or the measures     * @return array     */    public function countProposals(User $user,  $measure=false)    {                $level = new Container('level');        /** @noinspection PhpUndefinedFieldInspection */        $levelValue = $level->levelValue;        /** @noinspection PhpUndefinedFieldInspection */        $level = $level->level;                $q = $this->createQueryBuilder('p')                    ->leftJoin('p.city', 'city')                        ->select('count(distinct p.propId) as totalProposals')                        ->where('p.propPublished = 1')                        ->andWhere('p.propDeletedDate IS NULL')                        ->andWhere('p.propLevel = :levelValue')                        ->setParameter('levelValue', $levelValue);                if ($measure) {            $q->andWhere('p.measure IS NOT NULL');        }        else {            $q->andWhere('p.measure IS NULL');        }                                if ($level=='city') {            $city = $user->getCity();            if ($city->getFullCity()) {                $q->andWhere('city = :city OR city = :fullCity OR (city.districtCode = :districtCode AND city.fullCity=:fullCity) OR (p.propFullCity = 1 AND city.fullCity = :fullCity)')                  ->setParameter('city', $city)                  ->setParameter('districtCode', $city->getDistrictCode())                  ->setParameter('fullCity', $city->getFullCity());            }            else {                $q->andWhere('city = :city OR city.fullCity = :city')                  ->setParameter('city', $city);//                   ->setParameter('fullCity', $city->getFullCity());                            }        }        if ($level=='region') {            $region = $user->getCity()->getRegion();            $q->andWhere('city.region = :region ')                ->setParameter('region', $region);        }        if ($level=='country') {            $country = $user->getCountry();            $q->andWhere('city.country = :country ')                ->setParameter('country', $country);        }                return $q->getQuery()->getOneOrNullResult();    }        /**     * Count the published Proposals for the $city     * @param User $user     * @return array     */    public function countAllPublishedProposalsAndMeasures(User $user)    {         $level = new Container('level');                $q = $this->createQueryBuilder('p')                    ->leftJoin('p.city', 'city')                        ->select('count(distinct p.propId) as totalProposals')                        ->where('p.propPublished = 1')                        ->andWhere('p.propDeletedDate IS NULL')                        ->andWhere('p.propLevel = :levelValue')                        ->setParameter('levelValue', $level->levelValue);        if ($level->level=='city') {            $city = $user->getCity();            if ($city->getFullCity()) {                $q->andWhere('city = :city OR city = :fullCity OR (city.districtCode = :districtCode AND city.fullCity=:fullCity) OR (p.propFullCity = 1 AND city.fullCity = :fullCity)')                  ->setParameter('city', $city)                  ->setParameter('districtCode', $city->getDistrictCode())                  ->setParameter('fullCity', $city->getFullCity());            }            else {                $q->andWhere('city = :city OR city.fullCity = :city')                  ->setParameter('city', $city);            }        }        if ($level->level=='region') {            $region = $user->getCity()->getRegion();            $q->andWhere('city.region = :region ')                ->setParameter('region', $region);        }        if ($level->level=='country') {            $country = $user->getCountry();            $q->andWhere('city.country = :country ')                ->setParameter('country', $country);        }                return $q->getQuery()->getOneOrNullResult();    }            public function getProposalByUUID($uuid, $measure = false) {        $q = $this->createQueryBuilder('p')                    ->where('p.propPublished = 1')                    ->andWhere('p.propDeletedDate IS NULL')                    ->andWhere('p.propUUID = :UUID')                    ->setParameter('UUID', $uuid);                if ($measure) {            $q->andWhere('p.measure IS NOT NULL');        }        return $q->getQuery()->getOneOrNullResult();    }        public function findProposals(User $user, $propName, $level='city', $levels)    {        $q = $this->createQueryBuilder('p')                ->leftJoin('p.city', 'city')                ->where('p.propPublished = 1')                ->andWhere('p.propName=:propName')                ->setParameter('propName', $propName)                ->andWhere('p.propDeletedDate IS NULL')                ->andWhere('p.propLevel = :level')                ->setParameter('level', $levels[$level]);        if ($level=='city') {               $city = $user->getCity();            if ($city->getFullCity()) {                $q->andWhere('city = :city OR city.fullCity = :city OR (city.districtCode = :districtCode AND city.fullCity=:fullCity) OR (p.propFullCity = 1 AND city.fullCity = :fullCity)')                  ->setParameter('city', $city)                  ->setParameter('districtCode', $city->getDistrictCode())                  ->setParameter('fullCity', $city->getFullCity());            }            else {                $q->andWhere('city = :city OR city.fullCity = :city')                    ->setParameter('city', $city);            }        }        if ($level=='country') {            $country = $user->getCountry();            $q->andWhere('city.country = :country ')                ->setParameter('country', $country);        }            return $q->getQuery()->getOneOrNullResult();    }     /**     * Count the number of draft measures for the $city     * @param \DGIModule\Entity\User $user     * @return array     */    public function countDraftMeasures(User $user)    {        $q = $this->createQueryBuilder('p')                ->select('count(distinct p.propId) as totalProposals')                ->where('p.propPublishedDate IS NULL')                ->andWhere('p.usr = :user')                ->andWhere('p.propDeletedDate IS NULL')                ->andWhere('p.measure IS NOT NULL')                ->setParameter('user', $user);        return $q->getQuery()->getOneOrNullResult();    }    /**     * Get the paginated list of proposals or measures     *     * @param User $user     * @param int $offset     * @param int $limit     * @param string $sort     * @param string $order     * @param bool $measure     * @return Paginator     */    public function getPagedProposals(User $user, $offset = 0, $limit = 10, $sort, $order, $measure=false) {                $level = new Container('level');                $sorts = [];        // variable transformation        switch ($sort) {            case 'name':                $sorts[] = 'p.propName';                break;            case 'category':                $sorts[] = 'cc.catName';                $sorts[] = 'c.catName';                $sorts[] = 'p.propName';                break;            case 'user':                $sorts[] = 'u.usrName';                break;            case 'status':                $sorts[] = 'p.propStatus';                $sorts[] = 'p.propName';                break;            case 'published':                $sorts[] = 'publishedDate';                $sorts[] = 'p.propName';                break;            case 'votes':                $sorts[] = 'noVotes';                $sorts[] = 'avgVotes';                $sorts[] = 'publishedDate';                break;            case 'vote-average':                $sorts[] = 'avgVotes';                $sorts[] = 'noVotes';                 $sorts[] = 'publishedDate';                break;        }        $q = $this->createQueryBuilder('p')                  ->leftJoin('p.usr', 'u')                  ->leftJoin('p.cat', 'c')                  ->leftJoin('c.catCat', 'cc')                  ->leftJoin('p.votes', 'v')                  ->leftJoin('p.city', 'city')                  ->addSelect('COUNT(v.voteId) AS HIDDEN noVotes')                  ->addSelect('AVG(v.voteVote) AS HIDDEN avgVotes')                  ->addSelect('dateformat(p.propPublishedDate,\'%Y/%m/%d\') AS HIDDEN publishedDate')                  ->where('p.propPublished = 1')                  ->andWhere('p.propDeletedDate IS NULL')                  ->groupBy('p.propId')                  ->setFirstResult($offset)                   ->setMaxResults($limit)                  ->andWhere('p.propLevel = :levelValue')                  ->setParameter('levelValue', $level->levelValue);                                  if ($measure) {                  $q->andWhere('p.measure IS NOT NULL');        }        else {            $q->andWhere('p.measure IS NULL');        }                if ($level->level=='city') {            $city = $user->getCity();            if ($city->getFullCity()) {                $q->andWhere('city = :city OR city = :fullCity OR (city.districtCode = :districtCode AND city.fullCity=:fullCity) OR (p.propFullCity = 1 AND city.fullCity = :fullCity)')                  ->setParameter('city', $city)                  ->setParameter('districtCode', $city->getDistrictCode())                  ->setParameter('fullCity', $city->getFullCity());            }            else {                $q->andWhere('city = :city OR city.fullCity = :city')                  ->setParameter('city', $city);            }        }        if ($level->level=='region') {            $region = $user->getCity()->getRegion();            $q->andWhere('city.region = :region ')              ->setParameter('region', $region);        }        if ($level->level=='country') {            $country = $user->getCountry();            $q->andWhere('city.country = :country ')                ->setParameter('country', $country);        }       foreach ($sorts as $sort) {           $q->addOrderBy($sort, $order);       }        $query = $q->getQuery();        $paginator = new Paginator( $query );        return $paginator;    }    public function getOtherProposals(User $user, $measure=false, $levelValue, $levels) {        $q = $this->createQueryBuilder('p')                    ->leftJoin('p.usr', 'u')                    ->leftJoin('p.city', 'city')                    ->where('p.propPublished = 1')                    ->andWhere('p.propDeletedDate IS NULL')                    ->groupBy('p.propId')                    ->andWhere('p.propLevel = :levelValue')                    ->setParameter('levelValue', $levelValue);            if ($measure) {            $q->andWhere('p.measure IS NOT NULL');        }        else {            $q->andWhere('p.measure IS NULL')                ->andWhere('u!=:user')                ->setParameter('user', $user)            ;        }            if ($levelValue==$levels['city']) {            $city = $user->getCity();            if ($city->getFullCity()) {                $q->andWhere('city = :city OR city = :fullCity OR (city.districtCode = :districtCode AND city.fullCity=:fullCity) OR (p.propFullCity = 1 AND city.fullCity = :fullCity)')                    ->setParameter('city', $city)                    ->setParameter('districtCode', $city->getDistrictCode())                    ->setParameter('fullCity', $city->getFullCity());            }            else {                $q->andWhere('city = :city OR city.fullCity = :city')                    ->setParameter('city', $city);            }        }        if ($levelValue==$levels['region']) {            $region = $user->getCity()->getRegion();            $q->andWhere('city.region = :region ')                ->setParameter('region', $region);        }        if ($levelValue==$levels['country']) {            $country = $user->getCountry();            $q->andWhere('city.country = :country ')            ->setParameter('country', $country);        }        $query = $q->getQuery();        $proposals = $query->getResult();        return $proposals;    }        public function getProposalCounts(User $user, $config) {            $count = [            'city' => [                'proposal' => [                    'debate' => 0,                    'vote' => 0,                ],                'measure' => [                    'vote' => 0,                ],            ],            'region' => [                'proposal' => [                    'debate' => 0,                    'vote' => 0,                ],                'measure' => [                    'vote' => 0,                ],                ],            'country' => [                'proposal' => [                    'debate' => 0,                    'vote' => 0,                ],                'measure' => [                    'vote' => 0,                ]            ]        ];        $city = $user->getCity();        $q = $this->createQueryBuilder('p')                    ->leftJoin('p.city', 'city')                    ->where('p.propPublished = 1')                    ->andWhere('p.propDeletedDate IS NULL')                    ->andWhere('((p.measure IS NULL AND p.propStatus<=:voteStatus AND p.usr!=:user) OR p.measure IS NOT NULL)')                    ->setParameter('user', $user)                    ->setParameter('voteStatus', $config['proposal']['status']['vote'])                    ->setParameter('city', $city)                    ->setParameter('region', $city->getRegion())                    ->setParameter('country', $city->getCountry())                    ->setParameter('cityLevel', $config['level']['city'])                    ->setParameter('regionLevel', $config['level']['region'])                    ->setParameter('countryLevel', $config['level']['country'])                    ->groupBy('p.propId')        ;        if ($city->getFullCity()) {            $q->andWhere('(p.propLevel=:cityLevel AND (city = :city OR (city.districtCode = :districtCode AND city.fullCity=:fullCity) OR (p.propFullCity = 1 AND city.fullCity = :fullCity)  OR city.region = :region OR city.country = :country) OR p.propLevel=:regionLevel AND city.region = :region OR p.propLevel=:countryLevel AND city.country = :country)')                ->setParameter('districtCode', $city->getDistrictCode())                ->setParameter('fullCity', $city->getFullCity());        }        else {            $q->andWhere('(p.propLevel=:cityLevel AND (p.city = :city OR city.fullCity = :city) OR p.propLevel=:regionLevel AND city.region = :region OR p.propLevel=:countryLevel AND city.country = :country)');        }        $query = $q->getQuery();        $proposals = $query->getResult();        /** @var \DGIModule\Entity\Proposal $proposal */        foreach ($proposals as $proposal) {            $stat = array_search($proposal->getPropStatus(), $config['proposal']['status']);            if ($stat==$config['proposal']['status']['debate'] || !$proposal->isVotedBy($user)) {                $level = array_search($proposal->getPropLevel(), $config['level']);                $type = $proposal->isMeasure() ? 'measure' : 'proposal';                $stat = $type == 'measure' ? 'vote' : $stat;                $count[$level][$type][$stat]++;            }        }        return $count;    }        public function getTopProposals(User $user, $limit=5) {        $level = new Container('level');            $q = $this->createQueryBuilder('p')                ->leftJoin('p.city', 'city')                ->leftJoin('p.votes', 'v')                ->addSelect('AVG(v.voteVote) as HIDDEN totalpoints')                ->andWhere('p.propPublished = 1')                ->andWhere('p.propDeletedDate IS NULL')                ->having('totalpoints > 0')                ->groupBy('p.propId')                ->andWhere('p.propLevel = :level')                ->setParameter('level', $level->levelValue)                ->setMaxResults($limit);            if ($level->level=='city') {            $city = $user->getCity();            if ($city->getFullCity()) {                $q->andWhere('city = :city OR (city.districtCode = :districtCode AND city.fullCity=:fullCity) OR (p.propFullCity = 1 AND city.fullCity = :fullCity)')                  ->setParameter('city', $city)                  ->setParameter('districtCode', $city->getDistrictCode())                  ->setParameter('fullCity', $city->getFullCity());            }            else {                $q->andWhere('p.city = :city')                ->setParameter('city', $city);                }            $q->andWhere('(p.propStatus = 2 and p.measure IS NULL) OR p.measure IS NOT NULL'); // the Proposal in vote state        }        elseif ($level->level=='region') {            $region = $user->getCity()->getRegion();            $q->andWhere('city.region = :region ')            ->setParameter('region', $region);        }        elseif ($level->level=='country') {            $country = $user->getCountry();            $q->andWhere('city.country = :country ')              ->setParameter('country', $country)              ->andWhere('p.propStatus >= 2'); // the Proposal in vote state        }            return $q->getQuery()->getResult();    }            /**     *     * @param User $user     * @param int|number $offset     * @param int|number $limit     * @param string $sort     * @param string $order     * @return Paginator     */    public function getPagedDraftMeasures(User $user, $offset = 0, $limit = 10, $sort, $order) {        $sorts = [];        // variable tranformation        switch ($sort) {            case 'name':                $sorts[] = 'p.propName';                break;            case 'category':                $sorts[] = 'cc.catName';                $sorts[] = 'c.catName';                $sorts[] = 'p.propName';                break;            case 'created-date':                $sorts[] = 'createdDate';                $sorts[] = 'p.propName';                break;        }        $q = $this->createQueryBuilder('p')                ->leftJoin('p.usr', 'u')                ->leftJoin('p.cat', 'c')                ->leftJoin('c.catCat', 'cc')                ->addSelect('dateformat(p.propCreatedDate,\'%Y/%m/%d\') AS HIDDEN createdDate')                ->where('p.usr = :user')                ->andWhere('p.propDeletedDate IS NULL')                ->andWhere('p.measure IS NOT NULL')                ->andWhere('p.propPublishedDate IS NULL')                ->setMaxResults($limit)                ->groupBy('p.propId')                ->setFirstResult($offset)                ->setParameter('user', $user);        foreach ($sorts as $sort) {            $q->addOrderBy($sort, $order);        }        $query = $q->getQuery();        $paginator = new Paginator( $query );        return $paginator;    }    /**     *     * @todo Verify if still used     *     * @param Administration $admin     * @param int $offset     * @param int $limit     * @param $sort     * @param $order     * @return Paginator     */    public function getAdministrationLevelPagedProposals(Administration $admin, $offset = 0, $limit = 10, $sort, $order) {        $sorts = [];        // variable tranformation        switch ($sort) {            case 'name':                $sorts[] = 'p.propName';                break;            case 'category':                $sorts[] = 'cc.catName';                $sorts[] = 'c.catName';                $sorts[] = 'p.propName';                break;            case 'user':                $sorts[] = 'u.usrName';                break;            case 'status':                $sorts[] = 'p.propStatus';                $sorts[] = 'p.propName';                break;            case 'published-date':                $sorts[] = 'p.propPublishedDate';                break;            case 'votes':                $sorts[] = 'noVotes';                $sorts[] = 'p.propName';                break;        }        $q = $this->createQueryBuilder('p')                    ->leftJoin('p.usr', 'u')                    ->leftJoin('p.cat', 'c')                    ->leftJoin('c.catCat', 'cc')                    ->leftJoin('p.votes', 'v')                    ->addSelect('COUNT(v.voteId) AS HIDDEN noVotes')                    ->where('p.propPublished = 1')                    ->andWhere('p.propDeletedDate IS NULL')                    ->andWhere('p.measure IS NULL')                    ->groupBy('p.propId')                    ->setFirstResult($offset);        if ($limit!='all') {            $q->setMaxResults($limit);        }        if ($admin->getAdminLevel() == 3) { // if city level            $q->andWhere('p.city = :city')->setParameter('city', $admin->getAdminCity());        }        // TODO: add region and country level        foreach ($sorts as $sort) {            $q->addOrderBy($sort, $order);        }        $query = $q->getQuery();        $paginator = new Paginator( $query );        return $paginator;    }    /**     * @param Program $program     * @param int $offset     * @param int $limit     * @param string $sort     * @param string $order     * @param string $filter     * @param array $levels     * @return Paginator     */    public function getCityPagedProposalsForProgram(Program $program, $offset = 0, $limit = 10, $sort, $order, $filter, $levels) {        $sorts = [];        // variable tranformation        switch ($sort) {            case 'name':                $sorts[] = 'p.propName';                break;            case 'category':                $sorts[] = 'cc.catName';                $sorts[] = 'c.catName';                $sorts[] = 'p.propName';                break;            case 'user':                $sorts[] = 'u.usrName';                break;            case 'status':                $sorts[] = 'p.propStatus';                $sorts[] = 'p.propName';                break;            case 'published-date':                $sorts[] = 'p.propPublishedDate';                break;            case 'vote':                $sorts[] = 'p.propName'; //@todo                break;        }        $q = $this->createQueryBuilder('p')                        ->leftJoin('p.usr', 'u')                        ->leftJoin('p.cat', 'c')                        ->leftJoin('p.city', 'city')                        ->leftJoin('c.catCat', 'cc')//                         ->where('p.city = :city')                        ->where('p.propPublished = 1')                        ->andWhere('p.propDeletedDate IS NULL')                        ->andWhere('p.propLevel = :progLevel')                        ->setMaxResults($limit)                        ->setFirstResult($offset)                        ->setParameter('progLevel', $program->getProgLevel());        if ($program->getProgLevel()==$levels['city']) {            $city = $program->getCity();            if ($city->getFullCity()) {                    $q->andWhere('city = :city OR city = :fullCity OR (city.districtCode = :districtCode AND city.fullCity=:fullCity) OR (p.propFullCity = 1 AND city.fullCity = :fullCity)')                      ->setParameter('city', $city)                      ->setParameter('districtCode', $city->getDistrictCode())                      ->setParameter('fullCity', $city->getFullCity());                }                else {                    $q->andWhere('city = :city OR city.fullCity = :city')                      ->setParameter('city', $city);                }        }        elseif (array_search($program->getProgLevel(), $levels)=='region') {            $q->andWhere('city.region = :region')              ->setParameter('region', $program->getCity()->getRegion());        }        elseif (array_search($program->getProgLevel(), $levels)=='country') {            $q->andWhere('city.country = :country')              ->setParameter('country', $program->getCity()->getCountry());        }                if ($filter=='included') {            $q->andWhere('p IN (:proposals)')                ->setParameter('proposals', array_values($program->getProposals()->toArray()));        }        elseif ($filter=='proposal-not-included') {            $q->andWhere('p NOT IN (:proposals)')              ->andWhere('p.measure IS NULL')                 ->setParameter('proposals', array_values($program->getProposals()->toArray()));        }        elseif ($filter=='my-proposals') {            $q->andWhere('p.usr = :user')                ->setParameter('user', $program->getUsr());        }        elseif ($filter=='measures-not-included') {            $q->andWhere('p NOT IN (:proposals)')              ->andWhere('p.measure IS NOT NULL')                 ->setParameter('proposals', array_values($program->getProposals()->toArray()));        }        foreach ($sorts as $sort) {            $q->addOrderBy($sort, $order);        }              $paginator = new Paginator( $q->getQuery() );        return $paginator;    }    public function getProgramPagedSortProposals($program) {        $q = $this->createQueryBuilder('p')                    ->leftJoin('p.proposalPrograms', 'ps')                    ->leftJoin('ps.prog', 'prog')                    ->where('prog = :program')                    ->andWhere('p.propDeletedDate IS NULL')                    ->orderBy('ps.sortPosition', 'asc')                    ->setParameter('program', $program);        $propositions = $q->getQuery()->getResult();        return $propositions;    }    /**     * @param User $user     * @param int $limit     * @return array     */    public function getAggregatedProposals(User $user, $limit = null) {        $level = new Container('level');        $q = $this->createQueryBuilder('p')                    ->leftJoin('p.city', 'city')                    ->where('p.propPublished = 1')                    ->andWhere('p.propDeletedDate IS NULL')                    ->andWhere('p.propAggregatedScore>0')                    ->andWhere('p.propLevel = :levelValue')                    ->setParameter('levelValue', $level->levelValue)                    ->orderBy('p.propAggregatedScore', 'desc');                                    if ($limit) {            $q->setMaxResults($limit);        }                if ($level->level=='city') {            $city = $user->getCity();            if ($city->getFullCity()) {                $q->andWhere('city = :city OR (city.districtCode = :districtCode AND city.fullCity=:fullCity) OR (p.propFullCity = 1 AND city.fullCity = :fullCity)')                  ->setParameter('city', $city)                  ->setParameter('districtCode', $city->getDistrictCode())                  ->setParameter('fullCity', $city->getFullCity());            }            else {                $q->andWhere('p.city = :city')                  ->setParameter('city', $city);                    }        }        if ($level->level=='region') {            $region = $user->getCity()->getRegion();            $q->andWhere('city.region = :region ')            ->setParameter('region', $region);        }        if ($level->level=='country') {            $country = $user->getCountry();            $q->andWhere('city.country = :country ')              ->setParameter('country', $country);        }        $propositions = $q->getQuery()->getResult();        return $propositions;    }    /**     *     * Get user propositions     * Used in ProposalController, my-propositions action     *     * @param User $user     * @param int|number $offset     * @param int|string $limit     * @param string $sort     * @param string $order     * @param bool $published     * @param int $filter     * @return Paginator     */    public function getUserPagedProposals($user, $offset = 0, $limit = 'all', $sort = 'name', $order = 'asc', $published = true, $filter=0) {        $sorts = [];        // variable tranformation        switch ($sort) {            case 'name':                $sorts[] = 'p.propSavedName';                break;            case 'level':                $sorts[] = 'p.propLevel';                $sorts[] = 'p.propCreatedDate';                $sorts[] = 'p.propSavedName';                break;            case 'category':                $sorts[] = 'cc.catName';                $sorts[] = 'c.catName';                $sorts[] = 'p.propName';                break;            case 'user':                $sorts[] = 'u.usrName';                $sorts[] = 'p.propName';                break;            case 'created-date':                $sorts[] = 'p.propCreatedDate';                $sorts[] = 'p.propName';                break;            case 'status':                $sorts[] = 'p.propStatus';                $sorts[] = 'p.propName';                break;            case 'draft':                $sorts[] = 'p.propPublished';                  $sorts[] = 'p.propName';                 break;             case 'published':                 $sorts[] = 'p.propPublishedDate';                 $sorts[] = 'p.propName';                 break;             case 'votes':                 $sorts[] = 'noVotes';                 $sorts[] = 'p.propName';                 break;        }        $q = $this->createQueryBuilder('p')            ->leftJoin('p.usr', 'u')            ->leftJoin('p.cat', 'c')            ->leftJoin('c.catCat', 'cc')            ->leftJoin('p.votes', 'v')            ->addSelect('COUNT(v.voteId) AS HIDDEN noVotes')            ->where('p.usr = :user')            ->setParameter('user', $user)            ->andWhere('p.propDeletedDate IS NULL')            ->andWhere($filter?'p.propLevel=:filter':'p.propLevel>:filter')            ->setParameter('filter', $filter)            ->groupBy('p.propId')            ->setFirstResult($offset)        ;        if ($published) {            $q->andWhere('p.propPublished = 1')                ->andWhere('p.propStatus>:draftStatus')                ->setParameter('draftStatus', 0)            ;        }        if ($user->isAdministration()) {            $q->andWhere('p.measure IS NOT NULL');        }        else {            $q->andWhere('p.measure IS NULL');        }        if ($limit!='all') {            $q->setMaxResults($limit);        }                foreach ($sorts as $sort) {            $q->addOrderBy($sort, $order);        }        $query = $q->getQuery();        $paginator = new Paginator( $query );        return $paginator;    }    /**     *     * Get user propositions     * Used in ProposalController, my-propositions action     *     * @param User $user     * @param int|number $offset     * @param int|string $limit     * @param string $sort     * @param string $order     * @param bool $published     * @param int $filter     * @return Paginator     */    public function getUserPagedProposalsAndFavorites(User $user, $offset = 0, $limit = 'all', $sort = 'published', $order='asc', $published = true, $filter=0) {        $sorts = [];        // variable tranformation        switch ($sort) {            case 'name':                $sorts[] = 'p.propSavedName';                break;            case 'level':                $sorts[] = 'p.propLevel';                $sorts[] = 'p.propCreatedDate';                $sorts[] = 'p.propSavedName';                break;            case 'category':                $sorts[] = 'cc.catName';                $sorts[] = 'c.catName';                $sorts[] = 'p.propName';                break;            case 'user':                $sorts[] = 'u.usrName';                $sorts[] = 'p.propName';                break;            case 'created-date':                $sorts[] = 'p.propCreatedDate';                $sorts[] = 'p.propName';                break;            case 'status':                $sorts[] = 'p.propStatus';                $sorts[] = 'p.propName';                break;            case 'draft':                $sorts[] = 'p.propPublished';                $sorts[] = 'p.propName';                break;            case 'published':                $sorts[] = 'p.propPublishedDate';                $sorts[] = 'p.propName';                break;            case 'votes':                $sorts[] = 'noVotes';                $sorts[] = 'p.propName';                break;        }        $q = $this->createQueryBuilder('p')            ->leftJoin('p.usr', 'u')            ->leftJoin('p.favorites', 'f')            ->leftJoin('p.cat', 'c')            ->leftJoin('c.catCat', 'cc')            ->leftJoin('p.votes', 'v')            ->addSelect('COUNT(v.voteId) AS HIDDEN noVotes')            ->where('p.usr = :user OR f.usr=:user')            ->andWhere('p.propDeletedDate IS NULL')            ->andWhere($filter?'p.propLevel=:filter':'p.propLevel>:filter')            ->andWhere('p.measure IS NULL')            ->groupBy('p.propId')            ->setFirstResult($offset)            ->setParameter('user', $user)            ->setParameter('filter', $filter);        if ($published) {            $q->andWhere('p.propPublished = 1');        }        if ($limit!='all') {            $q->setMaxResults($limit);        }        foreach ($sorts as $sort) {            $q->addOrderBy($sort, $order);        }        $query = $q->getQuery();        $paginator = new Paginator( $query );        return $paginator;    }    /**     * @return array|Proposal[]     */    public function getProposalWithCommentsByPeriod() {        $q = $this->createQueryBuilder('p')            ->leftJoin('p.comments', 'c')            ->addSelect('sum(CASE WHEN (DATEDIFF(CURRENT_TIME(),c.comCreatedDate) <= 7) THEN 1 ELSE 0 END) as weeklyComments')            ->addSelect('sum(CASE WHEN (DATEDIFF(CURRENT_TIME(),c.comCreatedDate) <= 1) THEN 1 ELSE 0 END) as dailyComments')            ->groupBy('p.propId')            ->having('weeklyComments > 0');        return $q->getQuery()->getResult();    }    /**     * @return array|Proposal[]     */    public function getProposalWithStatusChangeByPeriod() {        $q = $this->createQueryBuilder('p')                ->addSelect('DATEDIFF(CURRENT_TIME(),p.propPublishedDate) as statusChange')                ->groupBy('p.propId')                ->having('statusChange = 5 OR statusChange = 2');        return $q->getQuery()->getResult();    }    /**     * @param $idea     * @param int $offset     * @param int $limit     * @param string $sort     * @param string $order     * @return Paginator     */    public function getIdeaPagedProposals($idea, $offset = 0, $limit = 10, $sort, $order) {        $sorts = [];        // variable tranformation        switch ($sort) {            case 'name':                $sorts[] = 'p.propSavedName';                break;            case 'level':                $sorts[] = 'p.propLevel';                $sorts[] = 'p.propCreatedDate';                $sorts[] = 'p.propSavedName';                break;            case 'category':                $sorts[] = 'cc.catName';                $sorts[] = 'c.catName';                $sorts[] = 'p.propName';                break;            case 'user':                $sorts[] = 'u.usrName';                $sorts[] = 'p.propName';                break;            case 'created-date':                $sorts[] = 'p.propCreatedDate';                $sorts[] = 'p.propName';                break;            case 'status':                $sorts[] = 'p.propStatus';                $sorts[] = 'p.propName';                break;            case 'draft':                $sorts[] = 'p.propPublished';                $sorts[] = 'p.propName';                break;            case 'published':                $sorts[] = 'p.propPublishedDate';                $sorts[] = 'p.propName';                break;            case 'votes':                $sorts[] = 'noVotes';                $sorts[] = 'p.propName';                break;        }        $q = $this->createQueryBuilder('p')                    ->leftJoin('p.idea', 'i')                    ->leftJoin('p.cat', 'c')                    ->leftJoin('c.catCat', 'cc')                    ->leftJoin('p.votes', 'v')                    ->addSelect('COUNT(v.voteId) AS HIDDEN noVotes')                    ->where('i = :idea')                    ->andWhere('p.propDeletedDate IS NULL')                    ->andWhere('p.measure IS NULL')                    ->andWhere('p.propPublished = 1')                    ->groupBy('p.propId')                    ->setFirstResult($offset)                    ->setMaxResults($limit)                    ->setParameter('idea', $idea)            ;        foreach ($sorts as $sort) {            $q->addOrderBy($sort, $order);        }        $query = $q->getQuery();        $paginator = new Paginator( $query );        return $paginator;    }    /**     * @param User $user     * @param int $offset     * @param int $limit     * @param $sort     * @param $order     * @return Paginator     */    public function getCitizenPagedProposals(User $user, $offset = 0, $limit = 10, $sort, $order) {        // variable tranformation        $sorts = [];        switch ($sort) {            case 'name':                $sorts[]  = 'p.propName';                break;            case 'category':                $sorts[] = 'cc.catName';                $sorts[] = 'c.catName';                $sorts[] = 'p.propName';                break;            case 'city':                $sorts[]  = 'city.cityName';                break;            case 'user':                $sorts[]  = 'u.usrName';                break;            case 'published':                $sorts[]  = 'p.propPublishedDate';                break;            case 'scenario':                $sorts[]  = 's.scnName';                break;            case 'vote':                $sorts[]  = 'propName'; //@todo                break;        }        $q = $this->createQueryBuilder('p')                    ->leftJoin('p.city', 'city')                    ->leftJoin('p.usr', 'u')                    ->leftJoin('p.cat', 'c')                    ->leftJoin('c.catCat', 'cc')                    ->where('city.dep IN(:partnerDepartments)')                    ->andWhere('p.cat  IN(:partnerCategories)')                    ->andWhere('p.propPublished = 1')                    ->andWhere('p.measure IS NULL')                    ->setFirstResult($offset)                    ->setMaxResults($limit)                    ->setParameter('partnerDepartments', array_values($user->getPartner()->getDepartments()->toArray()))                    ->setParameter('partnerCategories', array_values($user->getPartner()->getCategories()->toArray()));                foreach ($sorts as $sort) {            $q->addOrderBy($sort, $order);        }        $query = $q->getQuery();        $paginator = new Paginator( $query );        return $paginator;    }    public function getUserPagedFavorites($user, $offset = 0, $limit = 'all', $sort, $order) {        // variable tranformation        $sorts = [];        switch ($sort) {            case 'name':                $sorts[] = 'p.propName';                break;            case 'category':                $sorts[] = 'cc.catName';                $sorts[] = 'c.catName';                $sorts[] = 'p.propName';                break;            case 'user':                $sorts[] = 'u.usrName';                $sorts[] = 'p.propName';                break;            case 'published':                $sorts[] = 'p.propPublishedDate';                $sorts[] = 'p.propName';                break;            case 'draft':                $sorts[] = 'p.propPublished';                 $sorts[] = 'p.propName';                 break;             case 'votes':                 $sorts[] = 'noVotes';                 $sorts[] = 'p.propName';                 break;             case 'status':                 $sorts[] = 'p.propStatus';                 $sorts[] = 'p.propName';                 break;        }        $q = $this->createQueryBuilder('p')                ->leftJoin('p.favorites', 'f')                ->leftJoin('f.usr', 'u')                ->leftJoin('p.cat', 'c')                ->leftJoin('c.catCat', 'cc')                ->leftJoin('p.votes', 'v')                  ->addSelect('COUNT(v.voteId) AS HIDDEN noVotes')                  ->where('f.usr = :user')                ->andWhere('p.propPublished = 1')                ->andWhere('p.propDeletedDate IS NULL')                ->groupBy('p.propId')                ->setFirstResult($offset)                ->setParameter('user', $user);        if ($limit!='all') {            $q->setMaxResults($limit);        }        foreach ($sorts as $sort) {            $q->addOrderBy($sort, $order);        }        $query = $q->getQuery();        $paginator = new Paginator( $query );        return $paginator;    }    public function getPartnerProposalOpportunities($departments, $categories, $keywords, $offset = 0, $limit = 10, $sort, $order, $filter) {        $sorts = [];        switch ($sort) {            case 'pertinence':                $sorts[] = 'p.propName';                $sorts[] = 'cc.catName';                $sorts[] = 'c.catName';                break;            case 'name':                $sorts[] = 'p.propName';                break;            case 'category':                $sorts[] = 'cc.catName';                $sorts[] = 'c.catName';                $sorts[] = 'p.propName';                break;            case 'user':                $sorts[] = 'u.usrName';                break;            case 'status':                $sorts[] = 'p.propStatus';                $sorts[] = 'p.propName';                break;            case 'published-date':                $sorts[] = 'p.propPublishedDate';                break;            case 'vote':                $sorts[] = 'p.propName'; //@todo                break;        }        $q = $this->createQueryBuilder('p')                ->leftJoin('p.usr', 'u')                ->leftJoin('p.city', 'city')                ->leftJoin('city.dep', 'dep')                ->leftJoin('p.cat', 'c')                ->leftJoin('c.catCat', 'cc')                ->leftJoin('p.timeline', 's')                ->where('dep.depId IN (:departments)')                ->setParameter('departments', $departments)                ->andWhere('p.propPublished = 1')                ->andWhere('p.propDeletedDate IS NULL')                ->setFirstResult($offset)                ->groupBy('p.propId');      $keywordsMatch = '';      if (count($keywords)==1) {          $keywordsMatch = "IFELSE(REGEXP(p.propName, '(".$keywords[0].")')=true OR REGEXP(p.propDescription, '(".$keywords[0].")')=true OR REGEXP(s.stepName, '(".$keywords[0].")')=true, 1, 0)";      }      else {          foreach ($keywords as $keyword) {              $keywordsMatch .= " (IFELSE(REGEXP(p.propName, '(".$keyword.")')=true OR REGEXP(p.propDescription, '(".$keywords[0].")')=true OR REGEXP(s.stepName, '(".$keywords[0].")')=true, 1, 0)) ";              if ($keyword !== end($keywords)) $keywordsMatch .= ' + ';          }      }      if ($keywordsMatch!='') {            $q->addOrderBy($keywordsMatch, 'DESC');      }      if (count($categories)) {          $q->addOrderBy('IFELSE(c.catId IN (:categories), 1, 0)', 'DESC')            ->setParameter('categories', $categories);      }        if ($limit!='all') {            $q->setMaxResults($limit);        }        foreach ($sorts as $sort) {            $q->addOrderBy($sort, $order);        }        $query = $q->getQuery();        //var_dump($query->getSQL());        $paginator = new Paginator( $query );        return $paginator;    }        public function getProposalsCheck1() {        $q = $this->createQueryBuilder('p')                ->leftJoin('p.votes', 'v')                ->where('p.propDeletedDate IS NULL')                ->andWhere('p.measure IS NULL')                ->having('COUNT(v.voteId) >= 30') // TODO: change 3 to 30                ->andWhere('p.propPublished = 1')                ->andWhere('p.propExecution = 0')                ->groupBy('p.propId');                return $q->getQuery()->getResult();    }    public function getProposalsInStatus($status=1) {        $q = $this->createQueryBuilder('p')            ->where('p.propDeletedDate IS NULL')            ->andWhere('p.measure IS NULL')            ->andWhere('p.propPublished = 1')            ->andWhere('p.propStatus=:status')            ->setParameter('status', $status)            ->groupBy('p.propId');        return $q->getQuery()->getResult();    }    public function getPeriodProposals(\DateTime $startDate, \DateTime $endDate, $measure=false, $offset = 0, $limit = 'all', $sort = 'published', $order = 'desc') {        $sorts = [];        // variable tranformation        switch ($sort) {            case 'name':                $sorts[] = 'p.propName';                break;            case 'category':                $sorts[] = 'cc.catName';                $sorts[] = 'c.catName';                $sorts[] = 'p.propName';                break;            case 'user':                $sorts[] = 'u.usrName';                break;            case 'status':                $sorts[] = 'p.propStatus';                $sorts[] = 'p.propName';                break;            case 'published':                $sorts[] = 'publishedDate';                $sorts[] = 'p.propName';                break;            case 'votes'://                 $sorts[] = 'p.propStatus';                $sorts[] = 'noVotes';                $sorts[] = 'avgVotes';                $sorts[] = 'publishedDate';                break;            case 'vote-average'://                 $sorts[] = 'p.propStatus';                $sorts[] = 'avgVotes';                $sorts[] = 'noVotes';                $sorts[] = 'publishedDate';                break;        }        $q = $this->createQueryBuilder('p')            ->leftJoin('p.usr', 'u')            ->leftJoin('p.cat', 'c')            ->leftJoin('c.catCat', 'cc')            ->leftJoin('p.votes', 'v')            ->leftJoin('p.city', 'city')            ->addSelect('COUNT(v.voteId) AS HIDDEN noVotes')            ->addSelect('AVG(v.voteVote) AS HIDDEN avgVotes')            ->addSelect('dateformat(p.propPublishedDate,\'%Y/%m/%d/%H/%i/%s\') AS HIDDEN publishedDate')            ->where('p.propPublished = 1')            ->andWhere('p.propDeletedDate IS NULL')            ->andWhere('p.propPublishedDate >= :startDate')            ->andWhere('p.propPublishedDate < :endDate')            ->setParameter('startDate', $startDate)            ->setParameter('endDate', $endDate)            ->groupBy('p.propId')            ->setFirstResult($offset);        if ($measure) {            $q->andWhere('p.measure IS NOT NULL');        }        else {            $q->andWhere('p.measure IS NULL');        }        if ($limit!='all') {            $q->setMaxResults($limit);        }        foreach ($sorts as $sort) {            $q->addOrderBy($sort, $order);        }        $query = $q->getQuery();        $paginator = new Paginator( $query );        return $paginator;    }    public function countPeriodProposals(\DateTime $startDate, \DateTime $endDate, $measure=false) {        $q = $this->createQueryBuilder('p')            ->select('count(distinct p.propId) as totalProposals')            ->where('p.propPublished = 1')            ->andWhere('p.propDeletedDate IS NULL')            ->andWhere('p.propPublishedDate >= :startDate')            ->andWhere('p.propPublishedDate < :endDate')            ->setParameter('startDate', $startDate)            ->setParameter('endDate', $endDate);        if ($measure) {            $q->andWhere('p.measure IS NOT NULL');        }        else {            $q->andWhere('p.measure IS NULL');        }        $proposalCount = $q->getQuery()->getOneOrNullResult();        if ($proposalCount) return $proposalCount["totalProposals"];        else return 0;    }    /**     * @param User $user     * @param \DateTime $startDate     * @param \DateTime $endDate     * @param $levels     * @param bool $measure     * @return array     */    public function countUserPeriodProposals(User $user, \DateTime $startDate, \DateTime $endDate, $levels, $measure=false) {        $q = $this->createQueryBuilder('p')            ->leftJoin('p.city', 'city')            ->select('sum(CASE WHEN (p.propLevel = :cityLevel) THEN 1 ELSE 0 END) as cityProposals')            ->addSelect('sum(CASE WHEN (p.propLevel = :regionLevel) THEN 1 ELSE 0 END) as regionProposals')            ->addSelect('sum(CASE WHEN (p.propLevel = :countryLevel) THEN 1 ELSE 0 END) as countryProposals')            ->addselect('count(distinct p.propId) as totalProposals')            ->where('p.propPublished = 1')            ->andWhere('p.propDeletedDate IS NULL')            ->andWhere('p.propPublishedDate >= :startDate')            ->andWhere('p.propPublishedDate < :endDate')            ->setParameter('cityLevel', $levels['city'])            ->setParameter('regionLevel', $levels['region'])            ->setParameter('countryLevel', $levels['country'])            ->setParameter('startDate', $startDate)            ->setParameter('endDate', $endDate);        if ($measure) {            $q->andWhere('p.measure IS NOT NULL');        }        else {            $q->andWhere('p.measure IS NULL');        }        $city = $user->getCity();        if ($city->getFullCity()) {            $sql[0]= '(city = :city OR city = :fullCity OR (city.districtCode = :districtCode AND city.fullCity=:fullCity) OR (p.propFullCity = 1 AND city.fullCity = :fullCity))';            $q->setParameter('city', $city)                ->setParameter('districtCode', $city->getDistrictCode())                ->setParameter('fullCity', $city->getFullCity());        }        else {            $sql[0]= 'city = :city OR city.fullCity = :city';            $q->setParameter('city', $city);        }        $sql[1]= 'city.region = :region ';        $q->setParameter('region', $user->getCity()->getRegion());        $sql[2]= 'city.country = :country ';        $q->setParameter('country', $user->getCountry());        $q->andWhere(implode(' OR ', $sql));        $proposalCount = $q->getQuery()->getOneOrNullResult();        if ($proposalCount) return            [                'city' => $proposalCount["cityProposals"],                'region' => $proposalCount["regionProposals"],                'country' => $proposalCount["countryProposals"],                'total' => $proposalCount["totalProposals"],            ];        else return [            'city' => 0,            'region' => 0,            'country' => 0,            'total' => 0,        ];    }}