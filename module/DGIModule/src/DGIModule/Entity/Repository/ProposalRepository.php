<?php/** * @link      https://github.com/demodyne/demodyne * @copyright Copyright (c) 2015-2016 Demodyne (https://www.demodyne.org) * @license   http://www.gnu.org/licenses/agpl.html GNU Affero General Public License */namespace DGIModule\Entity\Repository;use Doctrine\ORM\EntityRepository;use Doctrine\ORM\Tools\Pagination\Paginator;use DGIModule\Entity\User;use Zend\Session\Container;class ProposalRepository extends EntityRepository{    public function countProposals(\DGIModule\Entity\User $user,  $measure=false)    {                $level = new Container('level');                $q = $this->createQueryBuilder('p')                    ->leftJoin('p.city', 'city')                        ->select('count(distinct p.propId) as totalProposals')                        ->where('p.propPublished = 1')                        ->andWhere('p.propDeletedDate IS NULL')                        ->andWhere('p.propLevel = :levelValue')                        ->setParameter('levelValue', $level->levelValue);                if ($measure) {            $q->andWhere('p.measure IS NOT NULL');        }        else {            $q->andWhere('p.measure IS NULL');        }                                if ($level->level=='city') {            $city = $user->getCity();            if ($city->getFullCity()) {                $q->andWhere('city = :city OR city = :fullCity OR (city.districtCode = :districtCode AND city.fullCity=:fullCity) OR (p.propFullCity = 1 AND city.fullCity = :fullCity)')                  ->setParameter('city', $city)                  ->setParameter('districtCode', $city->getDistrictCode())                  ->setParameter('fullCity', $city->getFullCity());            }            else {                $q->andWhere('city = :city OR city.fullCity = :city')                  ->setParameter('city', $city);            }        }        if ($level->level=='region') {            $region = $user->getCity()->getRegion();            $q->andWhere('city.region = :region ')                ->setParameter('region', $region);        }        if ($level->level=='country') {            $country = $user->getCountry();            $q->andWhere('city.country = :country ')                ->setParameter('country', $country);        }                return $q->getQuery()->getOneOrNullResult();    }        public function countAllPublishedProposalsAndMeasures(\DGIModule\Entity\User $user)    {         $level = new Container('level');                $q = $this->createQueryBuilder('p')                    ->leftJoin('p.city', 'city')                        ->select('count(distinct p.propId) as totalProposals')                        ->where('p.propPublished = 1')                        ->andWhere('p.propDeletedDate IS NULL')                        ->andWhere('p.propLevel = :levelValue')                        ->setParameter('levelValue', $level->levelValue);                                if ($level->level=='city') {            $city = $user->getCity();            if ($city->getFullCity()) {                $q->andWhere('city = :city OR city = :fullCity OR (city.districtCode = :districtCode AND city.fullCity=:fullCity) OR (p.propFullCity = 1 AND city.fullCity = :fullCity)')                  ->setParameter('city', $city)                  ->setParameter('districtCode', $city->getDistrictCode())                  ->setParameter('fullCity', $city->getFullCity());            }            else {                $q->andWhere('city = :city OR city.fullCity = :city')                  ->setParameter('city', $city);            }        }        if ($level->level=='region') {            $region = $user->getCity()->getRegion();            $q->andWhere('city.region = :region ')                ->setParameter('region', $region);        }        if ($level->level=='country') {            $country = $user->getCountry();            $q->andWhere('city.country = :country ')                ->setParameter('country', $country);        }                return $q->getQuery()->getOneOrNullResult();    }            public function getProposalByUUID($uuid, $measure = false) {        $q = $this->createQueryBuilder('p')                    ->where('p.propPublished = 1')                    ->andWhere('p.propDeletedDate IS NULL')                    ->andWhere('p.propUUID = :UUID')                    ->setParameter('UUID', $uuid);                if ($measure) {            $q->andWhere('p.measure IS NOT NULL');        }        return $q->getQuery()->getOneOrNullResult();    }        public function findProposals(\DGIModule\Entity\User $user, $propName, $level='city', $levels)    {        $q = $this->createQueryBuilder('p')                ->leftJoin('p.city', 'city')                ->where('p.propPublished = 1')                ->andWhere('p.propName=:propName')                ->setParameter('propName', $propName)                ->andWhere('p.propDeletedDate IS NULL')                ->andWhere('p.propLevel = :level')                ->setParameter('level', $levels[$level]);                if ($level=='city') {            $city = $user->getCity();            if ($city->getFullCity()) {                $q->andWhere('city = :city OR city.fullCity = :city OR (city.districtCode = :districtCode AND city.fullCity=:fullCity) OR (p.propFullCity = 1 AND city.fullCity = :fullCity)')                  ->setParameter('city', $city)                  ->setParameter('districtCode', $city->getDistrictCode())                  ->setParameter('fullCity', $city->getFullCity());            }            else {                $q->andWhere('city = :city OR city.fullCity = :city')                    ->setParameter('city', $city);            }        }        if ($level=='country') {            $country = $user->getCountry();            $q->leftJoin('p.city', 'city')                ->andWhere('city.country = :country ')                ->setParameter('country', $country);        }            return $q->getQuery()->getOneOrNullResult();    }     public function countDraftMesures(\DGIModule\Entity\User $user)    {        $q = $this->createQueryBuilder('p')                ->select('count(distinct p.propId) as totalProposals')                ->where('p.propPublished = 0')                ->andWhere('p.usr = :user')                ->andWhere('p.propDeletedDate IS NULL')                ->andWhere('p.measure IS NOT NULL')                ->setParameter('user', $user);        return $q->getQuery()->getOneOrNullResult();    }        public function getPagedProposals(\DGIModule\Entity\User $user, $offset = 0, $limit = 10, $sort, $order, $measure=false) {                $level = new Container('level');                $sorts = [];        // variable tranformation         switch ($sort) {            case 'name':                $sorts[] = 'p.propName';                break;            case 'category':                $sorts[] = 'cc.catName';                $sorts[] = 'c.catName';                $sorts[] = 'p.propName';                break;            case 'user':                $sorts[] = 'u.usrName';                break;            case 'status':                $sorts[] = 'p.propStatus';                $sorts[] = 'p.propName';                break;            case 'published':                $sorts[] = 'publishedDate';                $sorts[] = 'p.propName';                break;            case 'votes':                $sorts[] = 'noVotes';                 $sorts[] = 'avgVotes';                $sorts[] = 'publishedDate';                break;            case 'vote-average':                $sorts[] = 'avgVotes';                $sorts[] = 'noVotes';                 $sorts[] = 'publishedDate';                break;        }        $q = $this->createQueryBuilder('p')                  ->leftJoin('p.usr', 'u')                  ->leftJoin('p.cat', 'c')                  ->leftJoin('c.catCat', 'cc')                  ->leftJoin('p.votes', 'v')                  ->leftJoin('p.city', 'city')                  ->addSelect('COUNT(v.voteId) AS HIDDEN noVotes')                  ->addSelect('AVG(v.voteVote) AS HIDDEN avgVotes')                  ->addSelect('dateformat(p.propPublishedDate,\'%Y/%m/%d\') AS HIDDEN publishedDate')                  ->where('p.propPublished = 1')                  ->andWhere('p.propDeletedDate IS NULL')                  ->groupBy('p.propId')                  ->setFirstResult($offset)                   ->setMaxResults($limit)                  ->andWhere('p.propLevel = :levelValue')                  ->setParameter('levelValue', $level->levelValue);                                  if ($measure) {                  $q->andWhere('p.measure IS NOT NULL');        }        else {            $q->andWhere('p.measure IS NULL');        }                if ($level->level=='city') {            $city = $user->getCity();            if ($city->getFullCity()) {                $q->andWhere('city = :city OR city = :fullCity OR (city.districtCode = :districtCode AND city.fullCity=:fullCity) OR (p.propFullCity = 1 AND city.fullCity = :fullCity)')                  ->setParameter('city', $city)                  ->setParameter('districtCode', $city->getDistrictCode())                  ->setParameter('fullCity', $city->getFullCity());            }            else {                $q->andWhere('city = :city OR city.fullCity = :city')                  ->setParameter('city', $city);            }        }        if ($level->level=='region') {            $region = $user->getCity()->getRegion();            $q->andWhere('city.region = :region ')              ->setParameter('region', $region);        }        if ($level->level=='country') {            $country = $user->getCountry();            $q->andWhere('city.country = :country ')                ->setParameter('country', $country);        }               foreach ($sorts as $sort) {           $q->addOrderBy($sort, $order);       }        $query = $q->getQuery();        $paginator = new Paginator( $query );        return $paginator;    }    public function getTopProposals(\DGIModule\Entity\User $user, $level='city', $levels, $limit=5) {            $q = $this->createQueryBuilder('p')                ->leftJoin('p.city', 'city')                ->leftJoin('p.votes', 'v')                ->addSelect('AVG(v.voteVote) as HIDDEN totalpoints')                ->andWhere('p.propPublished = 1')                ->andWhere('p.propDeletedDate IS NULL')                ->having('totalpoints > 0')                ->groupBy('p.propId')                ->andWhere('p.propLevel = :level')                ->setParameter('level', $levels[$level]);            if ($level=='city') {            $city = $user->getCity();            if ($city->getFullCity()) {                $q->andWhere('city = :city OR (city.districtCode = :districtCode AND city.fullCity=:fullCity) OR (p.propFullCity = 1 AND city.fullCity = :fullCity)')                  ->setParameter('city', $city)                  ->setParameter('districtCode', $city->getDistrictCode())                  ->setParameter('fullCity', $city->getFullCity());            }            else {                $q->andWhere('p.city = :city')                ->setParameter('city', $city);                }            $q->andWhere('(p.propStatus >= 2 and p.measure IS NULL) OR p.measure IS NOT NULL'); // the Proposal in vote state        }        elseif ($level=='region') {            $region = $user->getCity()->getRegion();            $q->andWhere('city.region = :region ')            ->setParameter('region', $region);        }        elseif ($level=='country') {            $country = $user->getCountry();            $q->andWhere('city.country = :country ')              ->setParameter('country', $country)              ->andWhere('p.propStatus >= 2'); // the Proposal in vote state        }            return $q->getQuery()->getResult();    }            public function getPagedDraftMeasures(\DGIModule\Entity\User $user, $offset = 0, $limit = 10, $sort, $order) {        $sorts = [];        // variable tranformation        switch ($sort) {            case 'name':                $sorts[] = 'p.propName';                break;            case 'category':                $sorts[] = 'cc.catName';                $sorts[] = 'c.catName';                $sorts[] = 'p.propName';                break;            case 'created-date':                $sorts[] = 'createdDate';                $sorts[] = 'p.propName';                break;        }                $q = $this->createQueryBuilder('p')                ->leftJoin('p.usr', 'u')                ->leftJoin('p.cat', 'c')                ->leftJoin('c.catCat', 'cc')                ->addSelect('dateformat(p.propCreatedDate,\'%Y/%m/%d\') AS HIDDEN createdDate')                ->where('p.usr = :user')                ->andWhere('p.propDeletedDate IS NULL')                ->andWhere('p.measure IS NOT NULL')                ->andWhere('p.propPublished = 0')                ->setMaxResults($limit)                ->groupBy('p.propId')                ->setFirstResult($offset)                ->setParameter('user', $user);                foreach ($sorts as $sort) {            $q->addOrderBy($sort, $order);        }                $query = $q->getQuery();        $paginator = new Paginator( $query );        return $paginator;    }        public function getAdministrationLevelPagedProposals($admin, $offset = 0, $limit = 10, $sort, $order) {        $sorts = [];        // variable tranformation        switch ($sort) {            case 'name':                $sorts[] = 'p.propName';                break;            case 'category':                $sorts[] = 'cc.catName';                $sorts[] = 'c.catName';                $sorts[] = 'p.propName';                break;            case 'user':                $sorts[] = 'u.usrName';                break;            case 'status':                $sorts[] = 'p.propStatus';                $sorts[] = 'p.propName';                break;            case 'published-date':                $sorts[] = 'p.propPublishedDate';                break;            case 'votes':                $sorts[] = 'noVotes';                $sorts[] = 'p.propName';                break;        }        $q = $this->createQueryBuilder('p')                    ->leftJoin('p.usr', 'u')                    ->leftJoin('p.cat', 'c')                    ->leftJoin('c.catCat', 'cc')                    ->leftJoin('p.votes', 'v')                    ->addSelect('COUNT(v.voteId) AS HIDDEN noVotes')                    ->where('p.propPublished = 1')                    ->andWhere('p.propDeletedDate IS NULL')                    ->andWhere('p.measure IS NULL')                    ->groupBy('p.propId')                    ->setFirstResult($offset)                    ->setMaxResults($limit);        if ($admin->getAdminLevel() == 3) { // if city level            $q->andWhere('p.city = :city')->setParameter('city', $admin->getAdminCity());        }                // TODO: add region and country level        foreach ($sorts as $sort) {            $q->addOrderBy($sort, $order);        }        $query = $q->getQuery();        $paginator = new Paginator( $query );        return $paginator;    }        public function getCityPagedProposalsForProgram($program, $offset = 0, $limit = 10, $sort, $order, $filter, $levels) {        $sorts = [];        // variable tranformation        switch ($sort) {            case 'name':                $sorts[] = 'p.propName';                break;            case 'category':                $sorts[] = 'cc.catName';                $sorts[] = 'c.catName';                $sorts[] = 'p.propName';                break;            case 'user':                $sorts[] = 'u.usrName';                break;            case 'status':                $sorts[] = 'p.propStatus';                $sorts[] = 'p.propName';                break;            case 'published-date':                $sorts[] = 'p.propPublishedDate';                break;            case 'vote':                $sorts[] = 'p.propName'; //@todo                break;        }        $q = $this->createQueryBuilder('p')                        ->leftJoin('p.usr', 'u')                        ->leftJoin('p.cat', 'c')                        ->leftJoin('p.city', 'city')                        ->leftJoin('c.catCat', 'cc')                        ->where('p.propPublished = 1')                        ->andWhere('p.propDeletedDate IS NULL')                        ->andWhere('p.propLevel = :progLevel')                        ->setMaxResults($limit)                        ->setFirstResult($offset)                        ->setParameter('progLevel', $program->getProgLevel());        if ($program->getProgLevel()==$levels['city']) {            $city = $program->getCity();            if ($city->getFullCity()) {                $q->andWhere('city = :city OR city = :fullCity OR (city.districtCode = :districtCode AND city.fullCity=:fullCity) OR (p.propFullCity = 1 AND city.fullCity = :fullCity)')                  ->setParameter('city', $city)                  ->setParameter('districtCode', $city->getDistrictCode())                  ->setParameter('fullCity', $city->getFullCity());            }            else {                $q->andWhere('city = :city OR city.fullCity = :city')                  ->setParameter('city', $city);            }        }        elseif (array_search($program->getProgLevel(), $levels)=='region') {            $q->andWhere('city.region = :region')              ->setParameter('region', $program->getCity()->getRegion());        }        elseif (array_search($program->getProgLevel(), $levels)=='country') {            $q->andWhere('city.country = :country')              ->setParameter('country', $program->getCity()->getCountry());        }                if ($filter=='included') {            $q->andWhere('p IN (:proposals)')                ->setParameter('proposals', array_values($program->getProposals()->toArray()));        }        elseif ($filter=='proposal-not-included') {            $q->andWhere('p NOT IN (:proposals)')              ->andWhere('p.measure IS NULL')                 ->setParameter('proposals', array_values($program->getProposals()->toArray()));        }        elseif ($filter=='my-proposals') {            $q->andWhere('p.usr = :user')                ->setParameter('user', $program->getUsr());        }        elseif ($filter=='measures-not-included') {            $q->andWhere('p NOT IN (:proposals)')              ->andWhere('p.measure IS NOT NULL')                 ->setParameter('proposals', array_values($program->getProposals()->toArray()));        }        foreach ($sorts as $sort) {            $q->addOrderBy($sort, $order);        }              $paginator = new Paginator( $q->getQuery() );        return $paginator;    }    public function getProgramPagedSortProposals($program) {        $q = $this->createQueryBuilder('p')                    ->leftJoin('p.proposalPrograms', 'ps')                    ->leftJoin('ps.prog', 'prog')                    ->where('prog = :program')                    ->andWhere('p.propDeletedDate IS NULL')                    ->orderBy('ps.sortPosition', 'asc')                    ->setParameter('program', $program);        $propositions = $q->getQuery()->getResult();        return $propositions;    }        public function getAggregatedProposals($user, $limit = null) {        $level = new Container('level');        $q = $this->createQueryBuilder('p')                    ->leftJoin('p.city', 'city')                    ->where('p.propPublished = 1')                    ->andWhere('p.propDeletedDate IS NULL')                    ->andWhere('p.propAggregatedScore>0')                    ->andWhere('p.propLevel = :levelValue')                    ->setParameter('levelValue', $level->levelValue)                    ->orderBy('p.propAggregatedScore', 'desc');                if ($limit) {            $q->setMaxResults($limit);        }                if ($level->level=='city') {            $city = $user->getCity();            if ($city->getFullCity()) {                $q->andWhere('city = :city OR (city.districtCode = :districtCode AND city.fullCity=:fullCity) OR (p.propFullCity = 1 AND city.fullCity = :fullCity)')                  ->setParameter('city', $city)                  ->setParameter('districtCode', $city->getDistrictCode())                  ->setParameter('fullCity', $city->getFullCity());            }            else {                $q->andWhere('p.city = :city')                  ->setParameter('city', $city);                    }        }        if ($level->level=='region') {            $region = $user->getCity()->getRegion();            $q->andWhere('city.region = :region ')            ->setParameter('region', $region);        }        if ($level->level=='country') {            $country = $user->getCountry();            $q->andWhere('city.country = :country ')              ->setParameter('country', $country);        }        $propositions = $q->getQuery()->getResult();        return $propositions;    }    /**     *      * Get user propositions      * Used in ProposalController, my-propositions action      *      * @param \DGIModule\Entity\User $user     * @param number $offset     * @param number $limit     * @param unknown $sort     * @param unknown $order     * @return \Doctrine\ORM\Tools\Pagination\Paginator     */    public function getUserPagedProposals($user, $offset = 0, $limit = 10, $sort, $order, $published = false, $filter=0) {        $sorts = [];        // variable tranformation        switch ($sort) {            case 'name':                $sorts[] = 'p.propSavedName';                break;            case 'level':                $sorts[] = 'p.propLevel';                $sorts[] = 'p.propCreatedDate';                $sorts[] = 'p.propSavedName';                break;            case 'category':                $sorts[] = 'cc.catName';                $sorts[] = 'c.catName';                $sorts[] = 'p.propName';                break;            case 'user':                $sorts[] = 'u.usrName';                $sorts[] = 'p.propName';                break;            case 'created-date':                $sorts[] = 'p.propCreatedDate';                $sorts[] = 'p.propName';                break;            case 'status':                $sorts[] = 'p.propStatus';                $sorts[] = 'p.propName';                break;            case 'draft':                $sorts[] = 'p.propPublished';                  $sorts[] = 'p.propName';                 break;             case 'published':                 $sorts[] = 'p.propPublishedDate';                 $sorts[] = 'p.propName';                 break;             case 'votes':                 $sorts[] = 'noVotes';                 $sorts[] = 'p.propName';                 break;        }        $q = $this->createQueryBuilder('p')                  ->leftJoin('p.usr', 'u')                  ->leftJoin('p.cat', 'c')                  ->leftJoin('c.catCat', 'cc')                  ->leftJoin('p.votes', 'v')                  ->addSelect('COUNT(v.voteId) AS HIDDEN noVotes')                    ->where('p.usr = :user')                    ->andWhere('p.propDeletedDate IS NULL')                    ->andWhere($filter?'p.propLevel=:filter':'p.propLevel>:filter')                    ->andWhere('p.measure IS NULL')                    ->groupBy('p.propId')                    ->setFirstResult($offset)                    ->setMaxResults($limit)                    ->setParameter('user', $user)                    ->setParameter('filter', $filter);        if ($published) {            $q->andWhere('p.propPublished = 1');        }                foreach ($sorts as $sort) {            $q->addOrderBy($sort, $order);        }        $query = $q->getQuery();        $paginator = new Paginator( $query );        return $paginator;    }        public function getCitizenPagedProposals($user, $offset = 0, $limit = 10, $sort, $order) {        // variable tranformation        $sorts = [];        switch ($sort) {            case 'name':                $sorts[]  = 'p.propName';                break;            case 'category':                $sorts[] = 'cc.catName';                $sorts[] = 'c.catName';                $sorts[] = 'p.propName';                break;            case 'city':                $sorts[]  = 'city.cityName';                break;            case 'user':                $sorts[]  = 'u.usrName';                break;            case 'published':                $sorts[]  = 'p.propPublishedDate';                break;            case 'scenario':                $sorts[]  = 's.scnName';                break;            case 'vote':                $sorts[]  = 'propName'; //@todo                break;        }        $q = $this->createQueryBuilder('p')                    ->leftJoin('p.city', 'city')                    ->leftJoin('p.usr', 'u')                    ->leftJoin('p.cat', 'c')                    ->leftJoin('c.catCat', 'cc')                    ->where('city.dep IN(:partnerDepartments)')                    ->andWhere('p.cat  IN(:partnerCategories)')                    ->andWhere('p.propPublished = 1')                    ->andWhere('p.measure IS NULL')                    ->setFirstResult($offset)                    ->setMaxResults($limit)                    ->setParameter('partnerDepartments', array_values($user->getPartner()->getDepartments()->toArray()))                    ->setParameter('partnerCategories', array_values($user->getPartner()->getCategories()->toArray()));                foreach ($sorts as $sort) {            $q->addOrderBy($sort, $order);        }        $query = $q->getQuery();        $paginator = new Paginator( $query );        return $paginator;    }    public function getUserPagedFavorites($user, $offset = 0, $limit = 10, $sort, $order) {        // variable tranformation        $sorts = [];        switch ($sort) {            case 'name':                $sorts[] = 'p.propName';                break;            case 'category':                $sorts[] = 'cc.catName';                $sorts[] = 'c.catName';                $sorts[] = 'p.propName';                break;            case 'user':                $sorts[] = 'u.usrName';                $sorts[] = 'p.propName';                break;            case 'published':                $sorts[] = 'p.propPublishedDate';                $sorts[] = 'p.propName';                break;            case 'draft':                $sorts[] = 'p.propPublished';                 $sorts[] = 'p.propName';                 break;             case 'votes':                 $sorts[] = 'noVotes';                 $sorts[] = 'p.propName';                 break;             case 'status':                 $sorts[] = 'p.propStatus';                 $sorts[] = 'p.propName';                 break;        }        $q = $this->createQueryBuilder('p')                ->leftJoin('p.favorites', 'f')                ->leftJoin('f.usr', 'u')                ->leftJoin('p.cat', 'c')                ->leftJoin('c.catCat', 'cc')                ->leftJoin('p.votes', 'v')                ->addSelect('COUNT(v.voteId) AS HIDDEN noVotes')                ->where('f.usr = :user')                ->andWhere('p.propPublished = 1')                ->andWhere('p.propDeletedDate IS NULL')                ->groupBy('p.propId')                ->setFirstResult($offset)                ->setMaxResults($limit)                ->setParameter('user', $user);        foreach ($sorts as $sort) {            $q->addOrderBy($sort, $order);        }                $query = $q->getQuery();        $paginator = new Paginator( $query );        return $paginator;    }        public function getProposalsCheck1() {        $q = $this->createQueryBuilder('p')                ->leftJoin('p.votes', 'v')                ->where('p.propDeletedDate IS NULL')                ->andWhere('p.measure IS NULL')                ->having('COUNT(v.voteId) >= 30') // more than 30 votes                ->andWhere('p.propPublished = 1')                ->andWhere('p.propExecution = 0')                ->groupBy('p.propId');                return $q->getQuery()->getResult();    }}