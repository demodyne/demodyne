<?php/** * @link      https://github.com/demodyne/demodyne * @copyright Copyright (c) 2015-2017 Demodyne (https://www.demodyne.org) * @license   http://www.gnu.org/licenses/agpl.html GNU Affero General Public License */namespace DGIModule\Entity\Repository;use DateTimeZone;use DGIModule\Entity\User;use Doctrine\ORM\EntityRepository;use Doctrine\ORM\Tools\Pagination\Paginator;use Zend\Session\Container;class EventRepository extends EntityRepository{    public function countEvents(User $user)    {        $q = $this->createQueryBuilder('e')                        ->select('count(distinct e.eventId) as total')                        ->where('e.usr = :user')                        ->andWhere('e.eventSession=0')                        ->setParameter('user', $user);        return $q->getQuery()->getOneOrNullResult();    }        public function countNotCompletedSessions(User $user)    {        $q = $this->createQueryBuilder('e')                        ->select('count(distinct e.eventId) as total')                        ->where('e.usr = :user')                        ->andWhere('e.eventSession=1')                        ->andWhere('e.eventSessionCompleted=0')                        ->setParameter('user', $user);        return $q->getQuery()->getOneOrNullResult();    }        public function countCompletedSessions(User $user)    {        $q = $this->createQueryBuilder('e')                ->select('count(distinct e.eventId) as total')                ->where('e.usr = :user')                ->andWhere('e.eventSession=1')                ->andWhere('e.eventSessionCompleted=1')                ->setParameter('user', $user);        return $q->getQuery()->getOneOrNullResult();    }        public function countAllEvents(User $user)    {        $level = $_SESSION['level'];        $q = $this->createQueryBuilder('e')                    ->leftJoin('e.city', 'city')                    ->select('count(distinct e.eventId) as total')                    ->where('e.eventPublishedDate IS NOT NULL')                    ->andWhere('e.eventEndDate > current_time()')                    ->andWhere('e.eventLevel = :levelValue')                    ->setParameter('levelValue', $level['levelValue']);                                    if ($level['level']=='city') {            $city = $user->getCity();            if ($city->getFullCity()) {                $q->andWhere('city = :city OR city.fullCity = :fullCity OR city.fullCity = :city OR city = :fullCity')                  ->setParameter('city', $city)                  ->setParameter('fullCity', $city->getFullCity());            }            else {                $q->andWhere('city = :city OR city.fullCity = :city')                ->setParameter('city', $city);                    }        }        elseif ($level->level=='region') {            $region = $user->getCity()->getRegion();            $q->andWhere('city.region = :region ')            ->setParameter('region', $region);        }        elseif ($level['level']=='country') {            $country = $user->getCountry();            $q->andWhere('city.country = :country ')            ->setParameter('country', $country);        }                                                     return $q->getQuery()->getOneOrNullResult();    }    public function getMyEvents(User  $user, $offset = 0, $limit = 10, $sort, $order, $month, $year, $searchTerms = null, $drafts = false) {        $sorts = [];        // variable tranformation        switch ($sort) {            case 'name':                $sorts[] = 'e.eventName';                break;            case 'status':                $sorts[] = 'IFELSE(e.eventPublishedDate IS NULL, 0, 1)';                $sorts[] = 'IFELSE(e.eventCanceledDate IS NULL, 0, 1)';                $sorts[] = 'e.eventStartDate';                $sorts[] = 'e.eventEndDate';                $sorts[] = 'e.eventName';                break;            case 'start_date':                $sorts[] = 'e.eventStartDate';                $sorts[] = 'e.eventEndDate';                $sorts[] = 'e.eventName';                break;            case 'end_date':                $sorts[] = 'e.eventEndDate';                $sorts[] = 'e.eventStartDate';                $sorts[] = 'e.eventName';                break;            default:                $sorts[] = 'e.eventStartDate';                $sorts[] = 'e.eventName';        }        $q = $this->createQueryBuilder('e')                ->where('e.usr = :user')                ->andWhere('e.eventSession=0')                ->setFirstResult($offset)                ->setMaxResults($limit)                ->setParameter('user', $user);        if (! $drafts && ! $searchTerms) {            if ($month == null) {                $q->andWhere('e.eventEndDate > :now')                ->setParameter('now', new \DateTime());            }            else {                $date = \DateTime::createFromFormat('j-m-Y', '01-'.$month.'-'.$year);                $endDate = \DateTime::createFromFormat('j-m-Y', '01-'.$month.'-'.$year);                $endDate->add(new \DateInterval('P1M'));                $q->andWhere('(e.eventEndDate > :startdate AND e.eventEndDate < :enddate) OR (e.eventStartDate > :startdate AND e.eventStartDate < :enddate)')                ->setParameter('startdate', $date)                ->setParameter('enddate', $endDate);            }        }                if ($drafts) {            $q->andWhere('e.eventPublishedDate IS NULL');        }                if ($searchTerms) {            $st = implode('|', explode(' ', trim(preg_replace('/\s\s+/', ' ', str_replace("\n", " ", $searchTerms)))));            $q->andWhere('REGEXP(e.eventName, :terms) = true OR REGEXP(e.eventDescription, :terms) = true OR REGEXP(e.eventLocation, :terms) = true')              ->setParameter('terms', $st);                }                foreach ($sorts as $sort) {            $q->addOrderBy($sort, $order);        }        $query = $q->getQuery();        $paginator = new Paginator( $query );        return $paginator;    }    public function getAllEvents(User $user, $offset = 0, $limit = 10, $sort, $order, $month, $year, $searchTerms = null) {                $level = new Container('level');                $sorts = [];        // variable tranformation        switch ($sort) {            case 'name':                $sorts[] = 'e.eventName';                break;            case 'status':                $sorts[] = 'IFELSE(e.eventCanceledDate IS NULL, 0, 1)';                $sorts[] = 'e.eventStartDate';                $sorts[] = 'e.eventEndDate';                $sorts[] = 'e.eventName';                break;            case 'start_date':                $sorts[] = 'e.eventStartDate';                $sorts[] = 'e.eventEndDate';                $sorts[] = 'e.eventName';                break;            case 'end_date':                $sorts[] = 'e.eventEndDate';                $sorts[] = 'e.eventStartDate';                $sorts[] = 'e.eventName';                break;            default:                $sorts[] = 'e.eventStartDate';                $sorts[] = 'e.eventName';        }        $q = $this->createQueryBuilder('e')                  ->leftJoin('e.city', 'city')                  ->where('e.eventPublishedDate IS NOT NULL')                  ->andWhere('e.eventLevel = :levelValue')                  ->setParameter('levelValue', $level->levelValue)                  ->setFirstResult($offset)                  ->setMaxResults($limit);          if ($level->level=='city') {              $city = $user->getCity();              if ($city->getFullCity()) {                    $q->andWhere('city = :city OR city.fullCity = :fullCity OR city.fullCity = :city OR city = :fullCity')                      ->setParameter('city', $city)                      ->setParameter('fullCity', $city->getFullCity());                }                else {                    $q->andWhere('city = :city OR city.fullCity = :city')                    ->setParameter('city', $city);                            }          }          elseif ($level->level=='region') {              $region = $user->getCity()->getRegion();              $q->andWhere('city.region = :region ')              ->setParameter('region', $region);          }          elseif ($level->level=='country') {              $country = $user->getCountry();              $q->andWhere('city.country = :country ')              ->setParameter('country', $country);          }        if ($month == null) {            $q->andWhere('e.eventEndDate >= current_time()');        }        else {            $date = \DateTime::createFromFormat('j-m-Y h:i', '01-'.$month.'-'.$year.' 00:00', new DateTimeZone('UTC'));            $endDate = \DateTime::createFromFormat('j-m-Y h:i', '01-'.$month.'-'.$year.' 00:00', new DateTimeZone('UTC'));            $endDate->add(new \DateInterval('P1M'));            $q->andWhere('(e.eventEndDate >= :startdate AND e.eventEndDate <= :enddate) OR (e.eventStartDate >= :startdate AND e.eventStartDate <= :enddate)')                ->setParameter('startdate', $date)                ->setParameter('enddate', $endDate);        }                if ($searchTerms) {            $st = implode('|', explode(' ', trim(preg_replace('/\s\s+/', ' ', str_replace("\n", " ", $searchTerms)))));            $q->andWhere('REGEXP(e.eventName, :terms) = true OR REGEXP(e.eventDescription, :terms) = true OR REGEXP(e.eventLocation, :terms) = true')                ->setParameter('terms', $st);        }                foreach ($sorts as $sort) {            $q->addOrderBy($sort, $order);        }        $query = $q->getQuery();        $paginator = new Paginator( $query );        return $paginator;    }    public function getMySessions(User  $user, $offset = 0, $limit = 10, $sort, $order, $filter, $completed=false, $searchTerms = null, $level) {        $sorts = [];        // variable tranformation        switch ($sort) {            case 'name':                $sorts[] = 'e.eventName';                break;            case 'status':                $sorts[] = 'IFELSE(e.eventPublishedDate IS NULL, 0, 1)';                $sorts[] = 'IFELSE(e.eventCanceledDate IS NULL, 0, 1)';                $sorts[] = 'e.eventStartDate';                $sorts[] = 'e.eventEndDate';                $sorts[] = 'e.eventName';                break;            case 'start_date':                $sorts[] = 'e.eventStartDate';                $sorts[] = 'e.eventEndDate';                $sorts[] = 'e.eventName';                break;            case 'end_date':                $sorts[] = 'e.eventEndDate';                $sorts[] = 'e.eventStartDate';                $sorts[] = 'e.eventName';                break;            default:                $sorts[] = 'e.eventStartDate';                $sorts[] = 'e.eventName';        }        $q = $this->createQueryBuilder('e')                    ->leftJoin('e.invitations', 'invite')                    ->leftJoin('e.attendees', 'attendee')                    ->leftJoin('e.city', 'city')                    ->where('e.eventSession=1')                    ->setFirstResult($offset)                    ->setMaxResults($limit)                    ->groupBy('e')                    ;        // completed as filter        if ($filter!='none') {            $filters = explode('|', $filter);            $who = [];            $whoValue = ['e.usr = :user', '(invite = :user AND attendee = :user)', 'invite = :user', 'attendee = :user'];            $where = [];            $how = [];            if (in_array('completed', $filters)) {                $q->andWhere('e.eventSessionCompleted=1 OR e.eventEndDate < current_time()');            }            else {                $q->andWhere('e.eventEndDate >= current_time()');            }            foreach ($filters as $filter) {                switch ($filter) {                    case 'owner':                        $who[] = $whoValue[0];                        break;                    case 'accepted':                        $who[] = $whoValue[1];                        break;                    case 'pending':                        $who[] = $whoValue[2];                        break;                    case 'attending':                        $who[] = $whoValue[3];                        break;                    case 'city':                        $where[] = 'e.eventLevel = '.$level['city'];                        break;                    case 'region':                        $where[] = 'e.eventLevel = '.$level['region'];                        break;                    case 'country':                        $where[] = 'e.eventLevel = '.$level['country'];                        break;                    case 'private':                        $how[] = 'e.eventPublishedDate IS NULL';                        break;                    case 'public':                        $how[] = 'e.eventPublishedDate IS NOT NULL';                        break;                }            }            if (count($who)) {                $q->andWhere(implode(' OR ', $who))                  ->setParameter('user', $user);            }            else {                $q->andWhere(implode(' OR ', $whoValue))                  ->setParameter('user', $user);            }            if (count($where)) {                $q->andWhere(implode(' OR ', $where));            }            if (count($how)) {                $q->andWhere(implode(' OR ', $how));            }        }        else {            $q->andWhere('e.usr = :user OR invite=:user')              ->setParameter('user', $user)              ->andWhere('e.eventEndDate >= current_time()');        }        if ($searchTerms) {            $st = implode('|', explode(' ', trim(preg_replace('/\s\s+/', ' ', str_replace("\n", " ", $searchTerms)))));            $q->andWhere('REGEXP(e.eventName, :terms) = true OR REGEXP(e.eventDescription, :terms) = true OR REGEXP(e.eventLocation, :terms) = true')            ->setParameter('terms', $st);        }        foreach ($sorts as $sort) {            $q->addOrderBy($sort, $order);        }        $query = $q->getQuery();        $paginator = new Paginator( $query );        return $paginator;    }    public function getPeriodEvents(\DateTime $startDate, \DateTime $endDate, $session = false, $offset = 0, $limit = 'all', $sort='start_date', $order='asc') {        $sorts = [];        // variable tranformation        switch ($sort) {            case 'name':                $sorts[] = 'e.eventName';                break;            case 'status':                $sorts[] = 'IFELSE(e.eventCanceledDate IS NULL, 0, 1)';                $sorts[] = 'e.eventStartDate';                $sorts[] = 'e.eventEndDate';                $sorts[] = 'e.eventName';                break;            case 'start_date':                $sorts[] = 'e.eventStartDate';                $sorts[] = 'e.eventEndDate';                $sorts[] = 'e.eventName';                break;            case 'end_date':                $sorts[] = 'e.eventEndDate';                $sorts[] = 'e.eventStartDate';                $sorts[] = 'e.eventName';                break;            default:                $sorts[] = 'e.eventStartDate';                $sorts[] = 'e.eventName';        }        $q = $this->createQueryBuilder('e')                    ->where('e.eventPublishedDate IS NOT NULL')                    ->andWhere('e.eventPublishedDate >= :startDate')                    ->andWhere('e.eventPublishedDate < :endDate')                    ->setParameter('startDate', $startDate)                    ->setParameter('endDate', $endDate)                    ->setFirstResult($offset);        if ($session) {            $q->andWhere('e.eventSession=1');        }        else {            $q->andWhere('e.eventSession=0');        }        if ($limit!='all') {            $q->setMaxResults($limit);        }        foreach ($sorts as $sort) {            $q->addOrderBy($sort, $order);        }        $query = $q->getQuery();        $paginator = new Paginator( $query );        return $paginator;    }    public function getUpcomingEvents(User  $user) {        $level = $_SESSION['level'];        $q = $this->createQueryBuilder('e')            ->leftJoin('e.city', 'city')            ->where('e.eventPublishedDate IS NOT NULL')            ->andWhere('e.eventCanceledDate IS NULL')            ->andWhere('e.eventEndDate >= current_time()')            ->setMaxResults(5)            ->orderBy('e.eventEndDate', 'asc')            ->andWhere('e.eventLevel = :levelValue')            ->setParameter('levelValue', $level['levelValue']);        if ($level['level']=='city') {            $city = $user->getCity();            if ($city->getFullCity()) {                $q->andWhere('city = :city OR city.fullCity = :fullCity OR city.fullCity = :city OR city = :fullCity')                    ->setParameter('city', $city)                    ->setParameter('fullCity', $city->getFullCity());            }            else {                $q->andWhere('city = :city OR city.fullCity = :city')                    ->setParameter('city', $city);            }        }        elseif ($level->level=='region') {            $region = $user->getCity()->getRegion();            $q->andWhere('city.region = :region ')                ->setParameter('region', $region);        }        elseif ($level['level']=='country') {            $country = $user->getCountry();            $q->andWhere('city.country = :country ')                ->setParameter('country', $country);        }        $events = $q->getQuery()->getResult();        return $events;    }    public function countPeriodEvents(\DateTime $startDate, \DateTime $endDate, $session = false) {        $q = $this->createQueryBuilder('e')            ->select('count(distinct e.eventId) as total')            ->where('e.eventPublishedDate IS NOT NULL')            ->andWhere('e.eventPublishedDate >= :startDate')            ->andWhere('e.eventPublishedDate < :endDate')            ->setParameter('startDate', $startDate)            ->setParameter('endDate', $endDate);        if ($session) {            $q->andWhere('e.eventSession=1');        }        else {            $q->andWhere('e.eventSession=0');        }        $total =  $q->getQuery()->getOneOrNullResult();        return $total["total"];    }    public function countUserPeriodEvents(User $user, \DateTime $startDate, \DateTime $endDate, $levels, $session = false) {        $q = $this->createQueryBuilder('e')            ->leftJoin('e.city', 'city')            ->select('sum(CASE WHEN (e.eventLevel = :cityLevel) THEN 1 ELSE 0 END) as cityEvents')            ->addSelect('sum(CASE WHEN (e.eventLevel = :regionLevel) THEN 1 ELSE 0 END) as regionEvents')            ->addSelect('sum(CASE WHEN (e.eventLevel = :countryLevel) THEN 1 ELSE 0 END) as countryEvents')            ->addSelect('count(distinct e.eventId) as totalEvents')            ->where('e.eventPublishedDate IS NOT NULL')            ->andWhere('e.eventPublishedDate >= :startDate')            ->andWhere('e.eventPublishedDate < :endDate')            ->setParameter('cityLevel', $levels['city'])            ->setParameter('regionLevel', $levels['region'])            ->setParameter('countryLevel', $levels['country'])            ->setParameter('startDate', $startDate)            ->setParameter('endDate', $endDate);        if ($session) {            $q->andWhere('e.eventSession=1');        }        else {            $q->andWhere('e.eventSession=0');        }        $city = $user->getCity();        if ($city->getFullCity()) {            $sql[0]= '(city = :city OR city = :fullCity OR (city.districtCode = :districtCode AND city.fullCity=:fullCity) OR (e.eventFullCity = 1 AND city.fullCity = :fullCity))';            $q->setParameter('city', $city)                ->setParameter('districtCode', $city->getDistrictCode())                ->setParameter('fullCity', $city->getFullCity());        }        else {            $sql[0]= 'city = :city OR city.fullCity = :city';            $q->setParameter('city', $city);        }        $sql[1]= 'city.region = :region ';        $q->setParameter('region', $user->getCity()->getRegion());        $sql[2]= 'city.country = :country ';        $q->setParameter('country', $user->getCountry());        $q->andWhere(implode(' OR ', $sql));        $eventCount = $q->getQuery()->getOneOrNullResult();        if ($eventCount) return            [                'city' => $eventCount["cityEvents"],                'region' => $eventCount["regionEvents"],                'country' => $eventCount["countryEvents"],                'total' => $eventCount["totalEvents"],            ];        else return [            'city' => 0,            'region' => 0,            'country' => 0,            'total' => 0,        ];    }    public function getUpcomingSessions(User $user) {        $now = new \DateTime();        $level = $_SESSION['level'];        $q = $this->createQueryBuilder('e')                    ->leftJoin('e.city', 'city')                    ->where('e.eventPublishedDate IS NOT NULL')                    ->andWhere('e.eventCanceledDate IS NULL')                    ->andWhere('e.eventEndDate >= :now')                    ->setParameter('now', $now)                    ->setMaxResults(5)                    ->orderBy('e.eventEndDate', 'asc')                    ->andWhere('e.eventLevel = :levelValue')                    ->setParameter('levelValue', $level['levelValue']);        if ($level['level']=='city') {            $city = $user->getCity();            if ($city->getFullCity()) {                $q->andWhere('city = :city OR city.fullCity = :fullCity OR city.fullCity = :city OR city = :fullCity')                ->setParameter('city', $city)                ->setParameter('fullCity', $city->getFullCity());            }            else {                $q->andWhere('city = :city OR city.fullCity = :city')                ->setParameter('city', $city);            }        }        elseif ($level->level=='region') {            $region = $user->getCity()->getRegion();            $q->andWhere('city.region = :region ')            ->setParameter('region', $region);        }        elseif ($level['level']=='country') {            $country = $user->getCountry();            $q->andWhere('city.country = :country ')            ->setParameter('country', $country);        }        $events = $q->getQuery()->getResult();        return $events;    }    public function getEventsWithStartChangeByPeriod() {        $q = $this->createQueryBuilder('e')            ->addSelect('DATEDIFF(e.eventStartDate, CURRENT_TIME()) as startDays')            ->groupBy('e.eventId')            ->having('startDays = 5 OR startDays = 2');        return $q->getQuery()->getResult();    }}