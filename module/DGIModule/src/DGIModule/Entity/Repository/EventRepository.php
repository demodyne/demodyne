<?php/** * @link      https://github.com/demodyne/demodyne * @copyright Copyright (c) 2015-2016 Demodyne (https://www.demodyne.org) * @license   http://www.gnu.org/licenses/agpl.html GNU Affero General Public License */namespace DGIModule\Entity\Repository;use Doctrine\ORM\EntityRepository;use Doctrine\ORM\Tools\Pagination\Paginator;use Zend\Session\Container;class EventRepository extends EntityRepository{    public function countEvents(\DGIModule\Entity\User $user)    {        $q = $this->createQueryBuilder('e')                        ->select('count(distinct e.eventId) as total')                        ->where('e.usr = :user')                        ->setParameter('user', $user);        return $q->getQuery()->getOneOrNullResult();    }        public function countAllEvents(\DGIModule\Entity\User $user)    {        $level = $_SESSION['level'];        $q = $this->createQueryBuilder('e')                    ->leftJoin('e.city', 'city')                    ->select('count(distinct e.eventId) as total')                    ->where('e.eventPublishedDate IS NOT NULL')                    ->andWhere('e.eventEndDate > :now')                    ->setParameter('now', new \DateTime())                    ->andWhere('e.eventLevel = :levelValue')                    ->setParameter('levelValue', $level['levelValue']);                            if ($level['level']=='city') {            $city = $user->getCity();            if ($city->getFullCity()) {                $q->andWhere('city = :city OR city.fullCity = :fullCity OR city.fullCity = :city OR city = :fullCity')                  ->setParameter('city', $city)                  ->setParameter('fullCity', $city->getFullCity());            }            else {                $q->andWhere('city = :city OR city.fullCity = :city')                ->setParameter('city', $city);                    }        }        elseif ($level->level=='region') {            $region = $user->getCity()->getRegion();            $q->andWhere('city.region = :region ')            ->setParameter('region', $region);        }        elseif ($level['level']=='country') {            $country = $user->getCountry();            $q->andWhere('city.country = :country ')            ->setParameter('country', $country);        }                                                     return $q->getQuery()->getOneOrNullResult();    }        public function getMyEvents(\DGIModule\Entity\User  $user, $offset = 0, $limit = 10, $sort, $order, $month, $year, $searchTerms = null, $drafts = false) {        $sorts = [];        // variable tranformation        switch ($sort) {            case 'name':                $sorts[] = 'e.eventName';                break;            case 'status':                $sorts[] = 'IFELSE(e.eventPublishedDate IS NULL, 0, 1)';                $sorts[] = 'IFELSE(e.eventCanceledDate IS NULL, 0, 1)';                $sorts[] = 'e.eventStartDate';                $sorts[] = 'e.eventEndDate';                $sorts[] = 'e.eventName';                break;            case 'start_date':                $sorts[] = 'e.eventStartDate';                $sorts[] = 'e.eventEndDate';                $sorts[] = 'e.eventName';                break;            case 'end_date':                $sorts[] = 'e.eventEndDate';                $sorts[] = 'e.eventStartDate';                $sorts[] = 'e.eventName';                break;            default:                $sorts[] = 'e.eventStartDate';                $sorts[] = 'e.eventName';        }        $q = $this->createQueryBuilder('e')                ->where('e.usr = :user')                ->setFirstResult($offset)                ->setMaxResults($limit)                ->setParameter('user', $user);        if (! $drafts && ! $searchTerms) {            if ($month == null) {                $q->andWhere('e.eventEndDate > :now')                ->setParameter('now', new \DateTime());            }            else {                $date = \DateTime::createFromFormat('j-m-Y', '01-'.$month.'-'.$year);                $endDate = \DateTime::createFromFormat('j-m-Y', '01-'.$month.'-'.$year);                $endDate->add(new \DateInterval('P1M'));                $q->andWhere('(e.eventEndDate > :startdate AND e.eventEndDate < :enddate) OR (e.eventStartDate > :startdate AND e.eventStartDate < :enddate)')                ->setParameter('startdate', $date)                ->setParameter('enddate', $endDate);            }        }                if ($drafts) {            $q->andWhere('e.eventPublishedDate IS NULL');        }                if ($searchTerms) {            $st = implode('|', explode(' ', trim(preg_replace('/\s\s+/', ' ', str_replace("\n", " ", $searchTerms)))));            $q->andWhere('REGEXP(e.eventName, :terms) = true OR REGEXP(e.eventDescription, :terms) = true OR REGEXP(e.eventLocation, :terms) = true')              ->setParameter('terms', $st);                }                foreach ($sorts as $sort) {            $q->addOrderBy($sort, $order);        }        $query = $q->getQuery();        $paginator = new Paginator( $query );        return $paginator;    }            public function getAllEvents(\DGIModule\Entity\User $user, $offset = 0, $limit = 10, $sort, $order, $month, $year, $searchTerms = null) {                $level = new Container('level');                $sorts = [];        // variable tranformation        switch ($sort) {            case 'name':                $sorts[] = 'e.eventName';                break;            case 'status':                $sorts[] = 'IFELSE(e.eventCanceledDate IS NULL, 0, 1)';                $sorts[] = 'e.eventStartDate';                $sorts[] = 'e.eventEndDate';                $sorts[] = 'e.eventName';                break;            case 'start_date':                $sorts[] = 'e.eventStartDate';                $sorts[] = 'e.eventEndDate';                $sorts[] = 'e.eventName';                break;            case 'end_date':                $sorts[] = 'e.eventEndDate';                $sorts[] = 'e.eventStartDate';                $sorts[] = 'e.eventName';                break;            default:                $sorts[] = 'e.eventStartDate';                $sorts[] = 'e.eventName';        }        $q = $this->createQueryBuilder('e')                  ->leftJoin('e.city', 'city')                  ->where('e.eventPublishedDate IS NOT NULL')                  ->andWhere('e.eventLevel = :levelValue')                  ->setParameter('levelValue', $level->levelValue)                  ->setFirstResult($offset)                  ->setMaxResults($limit);                            if ($level->level=='city') {              $city = $user->getCity();              if ($city->getFullCity()) {                    $q->andWhere('city = :city OR city.fullCity = :fullCity OR city.fullCity = :city OR city = :fullCity')                      ->setParameter('city', $city)                      ->setParameter('fullCity', $city->getFullCity());                }                else {                    $q->andWhere('city = :city OR city.fullCity = :city')                      ->setParameter('city', $city);                            }          }                    elseif ($level->level=='country') {              $country = $user->getCountry();              $q->andWhere('city.country = :country ')              ->setParameter('country', $country);          }        if ($month == null) {            $q->andWhere('e.eventEndDate > :now')              ->setParameter('now', new \DateTime());        }        else {            $date = \DateTime::createFromFormat('j-m-Y', '01-'.$month.'-'.$year);            $endDate = \DateTime::createFromFormat('j-m-Y', '01-'.$month.'-'.$year);            $endDate->add(new \DateInterval('P1M'));            $q->andWhere('(e.eventEndDate > :startdate AND e.eventEndDate < :enddate) OR (e.eventStartDate > :startdate AND e.eventStartDate < :enddate)')                ->setParameter('startdate', $date)                ->setParameter('enddate', $endDate);        }                if ($searchTerms) {            $st = implode('|', explode(' ', trim(preg_replace('/\s\s+/', ' ', str_replace("\n", " ", $searchTerms)))));            $q->andWhere('REGEXP(e.eventName, :terms) = true OR REGEXP(e.eventDescription, :terms) = true OR REGEXP(e.eventLocation, :terms) = true')                ->setParameter('terms', $st);                    }                foreach ($sorts as $sort) {            $q->addOrderBy($sort, $order);        }                $query = $q->getQuery();        $paginator = new Paginator( $query );        return $paginator;    }        public function getUpcomingEvents(\DGIModule\Entity\User  $user) {        $now = new \DateTime();        $level = $_SESSION['level'];        $q = $this->createQueryBuilder('e')                   ->leftJoin('e.city', 'city')                  ->where('e.eventPublishedDate IS NOT NULL')                  ->andWhere('e.eventCanceledDate IS NULL')                  ->andWhere('e.eventEndDate >= :now')                  ->setParameter('now', $now)                  ->setMaxResults(5)                  ->orderBy('e.eventEndDate', 'asc')                  ->andWhere('e.eventLevel = :levelValue')                  ->setParameter('levelValue', $level['levelValue']);          if ($level['level']=='city') {              $city = $user->getCity();              if ($city->getFullCity()) {                    $q->andWhere('city = :city OR city.fullCity = :fullCity OR city.fullCity = :city OR city = :fullCity')                      ->setParameter('city', $city)                      ->setParameter('fullCity', $city->getFullCity());                }                else {                    $q->andWhere('city = :city OR city.fullCity = :city')                    ->setParameter('city', $city);                            }          }          elseif ($level->level=='region') {              $region = $user->getCity()->getRegion();              $q->andWhere('city.region = :region ')              ->setParameter('region', $region);          }          elseif ($level['level']=='country') {              $country = $user->getCountry();              $q->andWhere('city.country = :country ')              ->setParameter('country', $country);          }                                                      $events = $q->getQuery()->getResult();        return $events;    }}