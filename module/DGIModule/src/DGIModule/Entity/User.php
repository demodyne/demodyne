<?php/** * @link      https://github.com/demodyne/demodyne * @copyright Copyright (c) 2015-2017 Demodyne (https://www.demodyne.org) * @license   http://www.gnu.org/licenses/agpl.html GNU Affero General Public License */namespace DGIModule\Entity; use DGIModule\Entity\Administration;use DGIModule\Entity\City;use DGIModule\Entity\Counters;use DGIModule\Entity\Country;use DGIModule\Entity\Event;use DGIModule\Entity\Language;use DGIModule\Entity\Partner;use Doctrine\ORM\Mapping as ORM;use Doctrine\Common\Collections\ArrayCollection;use Doctrine\Common\Collections\Collection;use DGIModule\Entity\Proposal;/** * User * * @ORM\Table(name="dgi_users", indexes={@ORM\Index(name="city_usr_fk_idx", columns={"city_id"}), @ORM\Index(name="country_usr_fk_idx", columns={"country_id"}), @ORM\Index(name="part_id_idx", columns={"part_id"}), @ORM\Index(name="usr_part_id_idx", columns={"part_id"}), @ORM\Index(name="fk_user_admin_idx", columns={"admin_id"})}) * @ORM\Entity(repositoryClass="DGIModule\Entity\Repository\UserRepository") */class User{    /**     * @var string     *     * @ORM\Column(name="usr_name", type="string", length=100, nullable=false)     */    private $usrName;    /**     * @var string     *     * @ORM\Column(name="usr_password", type="string", length=100, nullable=false)     */    private $usrPassword;    /**     * @var string     *     * @ORM\Column(name="usr_email", type="string", length=60, nullable=false)     */    private $usrEmail;    /**     * @var integer     *     * @ORM\Column(name="usrl_id", type="integer", nullable=true)     */    private $usrlId;    /**     * @var Language     *     * @ORM\ManyToOne(targetEntity="DGIModule\Entity\Language")     * @ORM\JoinColumns({     *   @ORM\JoinColumn(name="lang_id", referencedColumnName="lang_id")     * })     */    private $lang;    /**     * @var boolean     *     * @ORM\Column(name="usr_active", type="boolean", nullable=false)     */    private $usrActive;    /**     * @var string     *     * @ORM\Column(name="usr_question", type="string", length=100, nullable=true)     */    private $usrQuestion;    /**     * @var string     *     * @ORM\Column(name="usr_answer", type="string", length=100, nullable=true)     */    private $usrAnswer;    /**     * @var string     *     * @ORM\Column(name="usr_picture", type="string", length=255, nullable=true)     */    private $usrPicture;    /**     * @var string     *     * @ORM\Column(name="usr_password_salt", type="string", length=100, nullable=true)     */    private $usrPasswordSalt;    /**     * @var \DateTime     *     * @ORM\Column(name="usr_registration_date", type="utcdatetime", nullable=true)     */    private $usrRegistrationDate;    /**     * @var string     *     * @ORM\Column(name="usr_registration_token", type="string", length=100, nullable=true)     */    private $usrRegistrationToken;    /**     * @var boolean     *     * @ORM\Column(name="usr_email_confirmed", type="boolean", nullable=false)     */    private $usrEmailConfirmed;    /**     * @var integer     *     * @ORM\Column(name="usr_id", type="integer")     * @ORM\Id     * @ORM\GeneratedValue(strategy="IDENTITY")     */    private $usrId;    /**     * @var \DateTime     *     * @ORM\Column(name="usr_last_login_date", type="utcdatetime", nullable=true)     */    private $usrLastLoginDate;        /**     * @var \DateTime     *     * @ORM\Column(name="usr_current_login_date", type="utcdatetime", nullable=true)     */    private $usrCurrentLoginDate;    /**     *      * @var string     *      * @ORM\Column(name="usr_firstname", type="string", length=50, nullable=false)     */    private $usrFirstname;    /**     *     * @var string     *     * @ORM\Column(name="usr_lastname", type="string", length=50, nullable=false)     */    private $usrLastname;    /**     *     * @var string     *     * @ORM\Column(name="usr_nir", type="string", length=20, nullable=true)     */    private $usrNIR;    /**     * @var string     *     * @ORM\Column(name="usr_presentation", type="string", length=1000, nullable=true)     */    private $usrPresentation = '';    /**     *     * @var string     *     * @ORM\Column(name="usr_country", type="string", length=2, nullable=true)     */    private $usrCountry;        /**     * @var integer     *     * @ORM\Column(name="fb_id", type="bigint", nullable=true)     */    private $fbId;        /**     * @var string     *     * @ORM\Column(name="fb_access_token", type="string", length=255, nullable=true)     */    private $fbAccessToken;        /**     * @var Country     *     * @ORM\ManyToOne(targetEntity="DGIModule\Entity\Country")     * @ORM\JoinColumns({     *   @ORM\JoinColumn(name="country_id", referencedColumnName="country_id")     * })     */    private $country;    /**     *     * @var string     *     * @ORM\Column(name="usr_postal_code", type="string", length=5, nullable=false)     */    private $usrPostalcode;    /**     * @var string     *     * @ORM\Column(name="usr_city", type="string", length=50, nullable=true)     */    private $usrCity = '';    /**     * @var City     *     * @ORM\ManyToOne(targetEntity="DGIModule\Entity\City")     * @ORM\JoinColumns({     *   @ORM\JoinColumn(name="city_id", referencedColumnName="city_id")     * })     */    private $city;    /**     * @var \DateTime     *     * @ORM\Column(name="usr_change_city_date", type="utcdatetime", nullable=false)     */    private $usrChangeCityDate;    /**     * @var string     *     * @ORM\Column(name="usr_phone", type="string", length=12, nullable=true)     */    private $usrPhone;    /**     * @var \DateTime     *     * @ORM\Column(name="usr_birthday", type="integer", nullable=true)    */    private $usrBirthday;    /**     * @var integer     *     * @ORM\Column(name="usr_gendre", type="integer", nullable=true)     */    private $usrGendre;     /**     * @var integer     *     * @ORM\Column(name="usr_deleted", type="integer", nullable=true)     */    private $usrDeleted = '0';    /**     * @var \DateTime     *     * @ORM\Column(name="usr_deleted_date", type="utcdatetime", nullable=true)     */    private $usrDeletedDate;    /**     * @var string     *     * @ORM\Column(name="usr_uuid", type="uuid", length=36, nullable=true)     */    private $usrUUID;    /** @ORM\OneToMany(targetEntity="DGIModule\Entity\Proposal", mappedBy="usr") */    private $proposals;    /** @ORM\OneToMany(targetEntity="DGIModule\Entity\Vote", mappedBy="usr") */    private $votes;    /** @ORM\OneToMany(targetEntity="DGIModule\Entity\Favorite", mappedBy="usr") */    private $favorites;    /** @ORM\OneToMany(targetEntity="DGIModule\Entity\Program", mappedBy="usr") */    private $programs;    /** @ORM\OneToMany(targetEntity="DGIModule\Entity\Inbox", mappedBy="toUsr") */    private $receivedMessages;    /**     * @var Administration     *     * @ORM\OneToOne(targetEntity="DGIModule\Entity\Administration", cascade={"persist", "merge", "remove"})     * @ORM\JoinColumns({     *   @ORM\JoinColumn(name="admin_id", referencedColumnName="admin_id")     * })     */    private $admin;    /**     * @var Partner     *     * @ORM\OneToOne(targetEntity="DGIModule\Entity\Partner", cascade={"persist", "merge", "remove"})     * @ORM\JoinColumns({     *   @ORM\JoinColumn(name="part_id", referencedColumnName="part_id")     * })     */    private $partner;    /**     * @var \Doctrine\Common\Collections\Collection|Proposal[]     *     * @ORM\ManyToMany(targetEntity="DGIModule\Entity\Proposal", mappedBy="champions", cascade={"persist", "merge", "remove"})     */     private $championForProposals;     /**      * @var \Doctrine\Common\Collections\Collection|Proposal[]      *      * @ORM\ManyToMany(targetEntity="DGIModule\Entity\Proposal", mappedBy="partners", cascade={"persist", "merge", "remove"})      */     private $partnerForProposals;     /**      * @var \Doctrine\Common\Collections\Collection|Proposal[]      *      * @ORM\ManyToMany(targetEntity="DGIModule\Entity\Proposal", mappedBy="administrations", cascade={"persist", "merge", "remove"})      */     private $administrationForProposals;     /**      * @var \Doctrine\Common\Collections\Collection|User[]      *      * @ORM\ManyToMany(targetEntity="DGIModule\Entity\User", inversedBy="contactForUser", cascade={"persist", "merge","remove"})      * @ORM\JoinTable(      *  name="dgi_users_contacts",      *  joinColumns={      *      @ORM\JoinColumn(name="contact_usr_id", referencedColumnName="usr_id")      *  },      *  inverseJoinColumns={      *      @ORM\JoinColumn(name="usr_id", referencedColumnName="usr_id")      *  }      * )      */     private $contacts;     /**      * @var \Doctrine\Common\Collections\Collection|User[]      *      * @ORM\ManyToMany(targetEntity="DGIModule\Entity\User", mappedBy="contacts", cascade={"persist", "merge", "remove"})      */     private $contactForUsers;     /**     * @var \Doctrine\Common\Collections\Collection|Event[]     *     * @ORM\ManyToMany(targetEntity="DGIModule\Entity\Event", mappedBy="attendees", cascade={"persist", "merge", "remove"})     */     private $attendantForEvents;     /**      * @var \Doctrine\Common\Collections\Collection|Event[]      *      * @ORM\ManyToMany(targetEntity="DGIModule\Entity\Event", mappedBy="invitations", cascade={"persist", "merge", "remove"})      */     private $invitedForEvents;          /**      * @var Counters      *      * @ORM\ManyToOne(targetEntity="DGIModule\Entity\Counters", cascade={"persist", "merge", "remove"})      * @ORM\JoinColumns({      *   @ORM\JoinColumn(name="cnt_id", referencedColumnName="cnt_id")      * })      */     private $cnt;    /**     * @var \DGIModule\Entity\UserDigest     *     * @ORM\ManyToOne(targetEntity="DGIModule\Entity\UserDigest", cascade={"persist", "merge", "remove"})     * @ORM\JoinColumns({     *   @ORM\JoinColumn(name="digest_id", referencedColumnName="digest_id")     * })     */    private $digest;          private $guest = false;     	public function __construct()	{		$this->usrRegistrationDate = new \DateTime();		$this->favorites = new ArrayCollection();		$this->programs = new ArrayCollection();		$this->championForProposals = new ArrayCollection();		$this->partnerForProposals = new ArrayCollection();		$this->administrationForProposals = new ArrayCollection();		$this->contacts = new ArrayCollection();		$this->attendantForEvents = new ArrayCollection();		$this->invitedForEvents = new ArrayCollection();		$this->receivedMessages = new ArrayCollection();	}    /**     * @return UserDigest     */    public function getDigest()    {        return $this->digest;    }    /**     * @param UserDigest $digest     * @return User     */    public function setDigest($digest)    {        $this->digest = $digest;        return $this;    }		public function getInvitedContactsForEvent(Event $event) {	    $User = [];	    	    foreach ($this->contacts as $user) {	        if ($user->isInvited($event)) {	            $User[] = $user;	        }	    }	    	    return $User;	}		public function getNotInvitedContactsForEvent(Event $event) {	    $User = [];	     	    foreach ($this->contacts as $user) {	        if (!$user->isInvited($event)) {	            $User[] = $user;	        }	    }	     	    return $User;	}		public function isInvited(Event $event) {	    return $this->invitedForEvents->contains($event);	}		public function isAttending(Event $event) {	    return $this->attendantForEvents->contains($event);	}    /**     * @param Favorite $favorite     * @internal param UserGroup $userGroup     */	public function addFavorite(Favorite $favorite)	{	    if ($this->favorites->contains($favorite)) {	        return;	    }	    $this->favorites->add($favorite);	    //$proposition->addUser($this);	}	/**	 * Get usrName	 *	 * @return string	 */	public function getFavorites()	{	    $favorites = new ArrayCollection();	    foreach ($this->favorites as $favorite) {	        if (!$favorite->getProp()->getPropDeletedDate()) {	            $favorites->add($favorite);	        }	    }	    return $favorites;	}    /**     * @param Favorite $favorite     * @internal param UserGroup $userGroup     */	public function removeFavorite(Favorite $favorite)	{	    if (!$this->favorites->contains($favorite)) {	        return;	    }	    $this->favorites->removeElement($favorite);	}	/**	 * Get Programs	 *	 * @return ArrayCollection|Program[]	 */	public function getPrograms()	{	    $programs = new ArrayCollection();	    foreach ($this->programs as $program) {	        if (!$program->getProgDeletedDate()) {	            $programs->add($program);	        }	    }	    return $programs;	}		public function getVotes()	{	    return $this->votes;	}		public function getProgramForLevel($level) {	    $programForLevel = null;	    foreach ($this->programs as $program) {	        if ($program->getProgLevel()==$level && !$program->getProgDeletedDate()) {	            $programForLevel = $program;	            break;	        }	    }	    return $programForLevel;	}		public function getProposals()	{	    	    return $this->proposals;	}    /**     * Set usrName     *     * @param string $usrName     * @return User      */    public function setUsrName($usrName)    {        $this->usrName = $usrName;        return $this;    }    /**     * Get usrName     *     * @return string      */    public function getUsrName()    {        return $this->usrName;    }    /**     * Set usrPassword     *     * @param string $usrPassword     * @return User     */    public function setUsrPassword($usrPassword)    {        $this->usrPassword = $usrPassword;        return $this;    }    /**     * Get usrPassword     *     * @return string      */    public function getUsrPassword()    {        return $this->usrPassword;    }    /**     * Set usrEmail     *     * @param string $usrEmail     * @return User     */    public function setUsrEmail($usrEmail)    {        $this->usrEmail = $usrEmail;        return $this;    }    /**     * Get usrEmail     *     * @return string      */    public function getUsrEmail()    {        return $this->usrEmail;    }    /**     * Set usrlId     *     * @param integer $usrlId     * @return User     */    public function setUsrlId($usrlId)    {        $this->usrlId = $usrlId;        return $this;    }    /**     * Get usrlId     *     * @return integer      */    public function getUsrlId()    {        return $this->usrlId;    }    /**     * Set lang     *     * @param Language $lang     *     * @return User     */    public function setLang(Language $lang = null)    {        $this->lang = $lang;        return $this;    }    /**     * Get lang     *     * @return Language     */    public function getLang()    {        return $this->lang;    }    /**     * Set usrActive     *     * @param boolean $usrActive     * @return User     */    public function setUsrActive($usrActive)    {        $this->usrActive = $usrActive;        return $this;    }    /**     * Get usrActive     *     * @return boolean      */    public function getUsrActive()    {        return $this->usrActive;    }    /**     * Set usrQuestion     *     * @param string $usrQuestion     * @return User     */    public function setUsrQuestion($usrQuestion)    {        $this->usrQuestion = $usrQuestion;        return $this;    }    /**     * Get usrQuestion     *     * @return string      */    public function getUsrQuestion()    {        return $this->usrQuestion;    }    /**     * Set usrAnswer     *     * @param string $usrAnswer     * @return User     */    public function setUsrAnswer($usrAnswer)    {        $this->usrAnswer = $usrAnswer;        return $this;    }    /**     * Get usrAnswer     *     * @return string      */    public function getUsrAnswer()    {        return $this->usrAnswer;    }    /**     * Set usrPicture     *     * @param string $usrPicture     * @return User     */    public function setUsrPicture($usrPicture)    {        $this->usrPicture = $usrPicture;        return $this;    }    /**     * Get usrPicture     *     * @return string      */    public function getUsrPicture()    {        return $this->usrPicture;    }    /**     * Set usrPasswordSalt     *     * @param string $usrPasswordSalt     * @return User     */    public function setUsrPasswordSalt($usrPasswordSalt)    {        $this->usrPasswordSalt = $usrPasswordSalt;        return $this;    }    /**     * Get usrPasswordSalt     *     * @return string      */    public function getUsrPasswordSalt()    {        return $this->usrPasswordSalt;    }    /**     * Set usrRegistrationDate     *     * @param string $usrRegistrationDate     * @return User     */    public function setUsrRegistrationDate($usrRegistrationDate)    {        $this->usrRegistrationDate = $usrRegistrationDate;        return $this;    }    /**     * Get usrRegistrationDate     *     * @return \DateTime     */    public function getUsrRegistrationDate()    {        return $this->usrRegistrationDate;    }    /**     * Set usrRegistrationToken     *     * @param string $usrRegistrationToken     * @return User     */    public function setUsrRegistrationToken($usrRegistrationToken)    {        $this->usrRegistrationToken = $usrRegistrationToken;        return $this;    }    /**     * Get usrRegistrationToken     *     * @return string      */    public function getUsrRegistrationToken()    {        return $this->usrRegistrationToken;    }    /**     * Set usrEmailConfirmed     *     * @param string $usrEmailConfirmed     * @return User     */    public function setUsrEmailConfirmed($usrEmailConfirmed)    {        $this->usrEmailConfirmed = $usrEmailConfirmed;        return $this;    }    /**     * Get usrEmailConfirmed     *     * @return string      */    public function getUsrEmailConfirmed()    {        return $this->usrEmailConfirmed;    }    /**     * Set usrLastLoginDate     *     * @param \DateTime $usrLastLoginDate     *     * @return User     */    public function setUsrLastLoginDate($usrLastLoginDate)    {        $this->usrLastLoginDate = $usrLastLoginDate;        return $this;    }    /**     * Get usrLastLoginDate     *     * @return \DateTime     */    public function getUsrLastLoginDate()    {        return $this->usrLastLoginDate;    }        /**     * Set usrCurrentLoginDate     *     * @param \DateTime $usrCurrentLoginDate     *     * @return User     */    public function setUsrCurrentLoginDate($usrCurrentLoginDate)    {        $this->usrCurrentLoginDate = $usrCurrentLoginDate;            return $this;    }        /**     * Get usrCurrentLoginDate     *     * @return \DateTime     */    public function getUsrCurrentLoginDate()    {        return $this->usrCurrentLoginDate;    }    /**     * Get usrId     *     * @return integer      */    public function getUsrId()    {        return $this->usrId;    }    /**     * Set usrId     *     * @param int $usrId     * @return User     */    public function setUsrId($usrId)    {        $this->usrId = $usrId;        return $this;    }        /**     * Set usrFirstname     *     * @param string $usrFirstname     * @return User     */    public function setUsrFirstname($usrFirstname)    {        $this->usrFirstname = $usrFirstname;        return $this;    }    /**     * Get usrFirstname     *     * @return string     */    public function getUsrFirstname()    {        return $this->usrFirstname;    }    /**     * Set usrLastname     *     * @param string $usrLastname     * @return User     */    public function setUsrLastname($usrLastname)    {        $this->usrLastname = $usrLastname;        return $this;    }    /**     * Get usrLastname     *     * @return string     */    public function getUsrLastname()    {        return $this->usrLastname;    }    /**     * Set usrCountry     *     * @param string $usrCountry     * @return User     */    public function setUsrCountry($usrCountry)    {        $this->usrCountry = $usrCountry;        return $this;    }    /**     * Get usrCountry     *     * @return string     */    public function getUsrCountry()    {        return $this->usrCountry;    }    /**     * Set country     *     * @param Country $country     * @return User     */    public function setCountry(Country $country = null)    {        $this->country = $country;        return $this;    }    /**     * Get country     *     * @return Country     */    public function getCountry()    {        return $this->country;    }    /**     * Set usrPostalCode     *     * @param string $usrPostalcode     * @return User     */    public function setUsrPostalCode($usrPostalcode)    {        $this->usrPostalcode = $usrPostalcode;        return $this;    }    /**     * Get usrPostalCode     *     * @return integer     */    public function getUsrPostalCode()    {        return $this->usrPostalcode;    }    /**     * Set usrCity     *     * @param string $usrCity     * @return User     */    public function setUsrCity($usrCity)    {        $this->usrCity = $usrCity;        return $this;    }    /**     * Get usrCity     *     * @return string     */    public function getUsrCity()    {        return $this->usrCity;    }    /**     * Set city     *     * @param City $city     * @return User     */    public function setCity(City $city = null)    {        $this->city = $city;        return $this;    }    /**     * Get city     *     * @return City     */    public function getCity()    {        return $this->city;    }    /**     * Set usrChangeCityDate     *     * @param \DateTime $usrChangeCityDate     * @return User     */    public function setUsrChangeCityDate($usrChangeCityDate)    {        $this->usrChangeCityDate = $usrChangeCityDate;        return $this;    }    /**     * Get usrChangeCityDate     *     * @return \DateTime     */    public function getUsrChangeCityDate()    {        return $this->usrChangeCityDate;    }    /**     * Set usrPhone     *     * @param string $usrPhone     * @return User     */    public function setUsrPhone($usrPhone)    {        $this->usrPhone = $usrPhone;        return $this;    }    /**     * Get usrPhone     *     * @return string     */    public function getUsrPhone()    {        return $this->usrPhone;    }    /**     * Set usrBirthday     *     * @param \DateTime $usrBirthday     * @return User     */    public function setUsrBirthday($usrBirthday)    {        $this->usrBirthday = $usrBirthday;        return $this;    }    /**     * Get usrBirthday     *     * @return \DateTime     */    public function getUsrBirthday()    {        return $this->usrBirthday;    }    /**     * Set usrGendre     *     * @param integer $usrGendre     * @return User     */    public function setUsrGendre($usrGendre)    {        $this->usrGendre = $usrGendre;        return $this;    }    /**     * Get usrSex     *     * @return integer     */    public function getUsrGendre()    {        return $this->usrGendre;    }    /**     * Set usrDeleted     *     * @param integer $usrDeleted     * @return User     */    public function setUsrDeleted($usrDeleted)    {        $this->usrDeleted = $usrDeleted;        return $this;    }    /**     * Get usrDeleted     *     * @return integer     */    public function getUsrDeleted()    {        return $this->usrDeleted;    }    /**     * Set usrDeletedDate     *     * @param \DateTime $usrDeletedDate     * @return User     */    public function setUsrDeletedDate($usrDeletedDate)    {        $this->usrDeletedDate = $usrDeletedDate;        return $this;    }    /**     * Get usrDeletedDate     *     * @return \DateTime     */    public function getUsrDeletedDate()    {        return $this->usrDeletedDate;    }    /**     * Get usrUuid     *     * @return string     */    public function getUsrUUID()    {        return $this->usrUUID;    }    /**     * Set part     *     * @param Partner $part     * @return User     */    public function setPartner(Partner $part = null)    {        $this->partner = $part;        return $this;    }    /**     * Set usrPresentation     *     * @param string $usrPresentation     *     * @return User     */    public function setUsrPresentation($usrPresentation)    {        $this->usrPresentation = $usrPresentation;        return $this;    }    /**     * Get usrPresentation     *     * @return string     */    public function getUsrPresentation()    {        return $this->usrPresentation;    }    /**     * Set admin     *     * @param Administration $admin     *     * @return User     */    public function setAdmin(Administration $admin = null)    {        $this->admin = $admin;        return $this;    }    /**     * Get admin     *     * @return Administration     */    public function getAdmin()    {        return $this->admin;    }    public function isAdministration() {        return ($this->admin!=null)?1:0;    }    public function isDemodyneAdmin() {        return $this->usrlId==5;    }    /**     * Get part     *     * @return Partner     */    public function getPartner()    {        return $this->partner;    }        public function isPartner() {        return ($this->partner!=null)?1:0;    }        public function isCitizen() {        return ($this->partner==null && $this->admin==null);    }            public function getAdministrationProposals() {        return $this->administrationForProposals;    }    public function getPartnerProposals() {        return $this->partnerForProposals;    }    public function getChampionProposals() {        return $this->championForProposals;    }    /**     * @param User $contact     * @return $this     */    public function addContact(User $contact)    {        if ($this->contacts->contains($contact)) {            return $this;        }        $this->contacts->add($contact);        return $this;    }    /**     * Get contacts     *     * @return ArrayCollection|User[]     */    public function getContacts()    {        $contacts = new ArrayCollection();        foreach ($this->contacts as $contact) {            if (!$contact->getUsrDeletedDate()) {                $contacts->add($contact);            }        }        return $contacts;    }    /**     * Get contacts     *     * @param User $contact     * @return string     */    public function hasContact(User $contact)    {        return $this->getContacts()->contains($contact);    }    /**     * @param User $contact     * @return $this     */    public function removeContact(User $contact)    {        if (!$this->contacts->contains($contact)) {            return $this;        }        $this->contacts->removeElement($contact);        return $this;    }        /**     * Set cnt     *     * @param Counters $cnt     *     * @return User     */    public function setCounters(Counters $cnt = null)    {        $this->cnt = $cnt;            return $this;    }        /**     * Get cnt     *     * @return Counters     */    public function getCounters()    {        return $this->cnt;    }        public function setGuest($guest) {        $this->guest = $guest;        return $this;    }        public function isGuest()    {        return $this->guest;    }            public function setFbId($fbId)    {        $this->fbId = $fbId;        return $this;    }        public function getFbId()    {        return $this->fbId;    }        public function setFbAccessToken($fbAccessToken)    {        $this->fbAccessToken = $fbAccessToken;        return $this;    }        public function getFbAccessToken()    {        return $this->fbAccessToken;    }    /**     * @param string $usrUUID     * @return $this     */    public function setUsrUUID($usrUUID)    {        $this->usrUUID = $usrUUID;        return $this;    }    /**     * @return ArrayCollection|Inbox[]     */    public function getReceivedMessages()    {        return $this->receivedMessages;    }    /**     * @return string     */    public function getUsrNIR()    {        return $this->usrNIR;    }    /**     * @param string $usrNIR     * @return User     */    public function setUsrNIR($usrNIR)    {        $this->usrNIR = $usrNIR;        return $this;    }}